%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (50_YEARS_LOGO8 noBG.ai)%%CreationDate: 5/3/22 2:55 PM%%Canvassize: 16383%%BoundingBox: -1631 -113 -185 1146%%HiResBoundingBox: -1630.619 -112.9216 -185.1201 1145.8689%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 960.5 539.5 960.5 539.5%AI3_TileBox: 582 252 1316 828%AI3_DocumentPreview: None%AI5_ArtSize: 1920 1080%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -2997 2244 0.375893 1889 1303 26 0 0 6 45 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 112 8%%BeginData: 18074 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8A87D7D5252FD042720FD042752525352A8A8FD66FFA8A8%7D522727F827F827F827F827F827F827F827F827F827F827F852527DA8FD%5EFFA8A85227F8272727F827275252FD047DA87DA87DA87D7D527D5227F8%272727F827277DA8FD58FFA8A85227F827F827F852527D7DFD11FFA8A87D%7D2727F827F827277DA8FD54FF7D5227272027277D7DFD1BFFA8A8522720%27272752A8FD4FFFA87D2727F827277DA8FD21FFA8A85227F827F8527DFD%4CFF7D27F82727527DFD15FFA8A8A8FD0FFFA87D2727F82727A8FD48FF7D%F827F82752A8FD08FFA8A87D7DA8A8275227A8FFFFFFA82727F82727A8FF%7D527D7DFD0BFF7D27F827F8527DFD44FFA85220272752A8FD07FFA87D27%272027277DFF272752FD04FF272752A8522727A8A82727277DFF7D527DFD%08FFA82727202752FD42FF5227F82727A8FD0AFF272727FD04A8FF522752%FFFFFF5227F8FFFFFF522727FF2727F827A8FFF852FD0AFF5227F82727A8%FD3FFF2727F8277DFD0CFF7DF852FFA8FFFFFF7DF87DFFFFFF522752FFFF%FFA8F827A82752522752FF277DFD0BFFA852F827277DFD3CFF7DF827F852%A8FD0DFF7D27F827F8A8FFFF7D2752FFFFFF522727FFFFFF7D27F8A8F87D%7D27F87DF87DFD0DFF7DF827F852A8FD39FF7D2027277DFD0FFF7D202753%7DFFFFFF7D207DFFFFA87D2727A8FFFF7D2027A8277DFF522720277DFD0F%FF27272027A8FD36FFA852F827F8A8FD0AFFA8FD05FF7D2727FFFFA87DFF%522752A87D277E52F8277D7DF82752FFF87DFFFF2727F87DFD04FF527DFD%0AFF5227F8277DFD34FFA852F82727FD0BFF7D277DFD04FF7D27277D7D27%52FF272727F82727FFFF7D2727F8277DFF7D2727FFFFA827277DFD04FFA8%27A8FD0AFF7D27F8277DFD32FFA827F82727FD09FFA85227FF7D27A8FFFF%FF2727F82727527DFF7DA87EA8A8FD05FFA8A8A8FFFFA87D5284FFFF7DF8%7DFFFFFFA85227525252FD09FF7D27F82752FD30FFA852272752FD09FFA8%A87D52A8FF277DFFFFA87DA8FD0DFFA8FD0EFF7EA8FFFF7D20527D275327%7DFD09FFA827272752FD2EFFA852F82752FD09FF522752FF28A8FFA87DFD%09FFA8A8527D52522752525227FD04527D7D7EA8FD09FFA87D527D527E27%A8277DFD08FFA827F82752FD2DFF52272752FD0AFF2752277D537DFD09FF%A87D5252527D7DA8A8FD07FFA8A87D7D5252527D7DFD09FF7D2727A8A827%52FD09FFA82727277DFD2BFF52F82752FD08FFA827A87D27F87DA8A8FD06%FFA87D275252A8A8FD12FFA8525227527DFD07FFA87D272752FF5252FD08%FFA827F8277DFD29FF7D202752FD09FFA85227FFFF52A8FD06FFA8525252%A9FD1AFF7D5228A8FD07FF5227FFFF2752FD09FFA8272027A8FD27FFA8F8%2727FD0CFF5227FFA8FD05FFA852277DA8FD1EFFA827277DFD06FFA8A852%52FD0BFF7D27F827A8FD25FFA8F82727FD0EFFA8FD06FF7D527DFD23FF7E%5227A9FD06FF7DFD0DFF7D27F852FD25FF2727F8A8FD13FFA82852A8FD26%FF7D277DFD14FF5227F87DFD23FF5327207DFD05FFA87D7E7D7D7DA8A8FD%06FF7D27A8FD0CFF7EFD1BFFA87D27527DA8A8FD11FF272727AFFD21FF7D%27F852FFFFFFA85227F827F827F827F82727527DA8A85252FD0BFFA852F8%27F87DFD14FF7D7D2727F827F827F827F827F8275284A8FD0CFFA8F82727%FD21FF52F827A8FFFFFF272752A8A8FFFFFFA8A87D7D2727F82727A8FD0B%FF27F8A8A87DF87DFD10FF7D52F827275253A8A8FFA8FFA8A87D7E5227F8%27277DA8FD0AFF7DF8277DFD1FFF7DF82752FFFFFF7D2784FD05FFA8FD05%FFA87D5227F827277DA8FD05FFA852F8A8FFFFFF52F8FD0DFFA87DF827F8%597DFD0EFFA87D52F82752A8FD09FF27F827A8FD1EFF272727FD04FF7D27%FFA87D52522727275252A8A8FD04FFA87D5227272052527D522727A8FFA8%7DFF7D27FD0CFF7D2720527DFD04FFA87D7D525227522752527D7DFD04FF%A85227277DFD08FFA827277DFD1DFF5227F8A8FD04FF5252FFA8F827F827%F827F827F827277D7DFD05FF7D7D5252275252A8FFFF27A8FF5227FD0BFF%2E2727A8FFFFA87D2E27F827F827F827F827F827F827F85253A8FFFFA852%F8277EFD07FF5227F8A8FD1BFFA827F852FD05FF5252FF7D27F8272727F8%272727F8272727F8527DA8A8FD09FF2727FFFF277DFD09FFA8272753FFFF%FF52272727F8272727F8272727F8272727F8272727F852A8FFFFA827277D%FD07FFF82752FD1BFF7DF8277DFD05FF277DFF7DF827F827F827F827F827%F827F827F827F827277D7DA87DA87D52F82752FF7D277DFD08FF7DF8277E%FFFF7DF827F827F827F827F827F827F827F827F827F827F827F82752FFFF%FF272752FD06FF53F827A8FD1AFF272752FD06FF277DFF7D272027272720%27272720272727202727272027272720272727202727A8FF7D27FD08FF84%2052AFFFA8522727202727272027272720272727202727272027272720FD%0427A8FFFF522752FD05FFA827277DFD19FF7D27F8A8FD06FFF884FF7DF8%27F827F827F827F827F827F827F827F827F827F827F827F827F827A8FF21%52FD07FFA8F827A8FF7D27F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F87DFFFF522752FD05FF5227F8A8FD18FF52F852FD%06FFA827A8FF52272727F8272727F8272727F8272727F8272727F8272727%F827272753FF7D277DFD06FFA8F852FFFF7D272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F852FFFF52277DFD04FFA8%F8277DFD17FFA8F8277DFD06FF7DF8A8FF52F827F827F827F827F827F827%F827F827F827F827F827F827F82727FFFF5227FD07FFF827A8FF7D27F827%F827F827F827F827F827F85259A87D7D5227F827F827F827F827F827F827%F852FFFF52277DFD04FF52F852FD17FF522727FD07FF7D27A8FFFD042720%27272720272727202727272027272720272727202727A8FFA827A8FD06FF%5227A8FF7D27202727272027272720FD0427A8FD06FFA859272720272727%2027272720272753FFFF2727FD04FF7D2727A8FD15FFA827F859FD07FF7D%F8FFFF27F827F827F827F827F827F827F827F827F827F827F827F827F87D%FFA8F852FD06FF7D2752FFA827F827F827F827F827F827F8272EFFFFFF7D%52527DA8FFFF7DF827F827F827F827F827F827F87DFFA8F852FD04FF2727%52FD15FFA8F827A8FD07FF5227FFFF2727F8272727F8272727F8272727F8%272727F8272727F827277DFFFF2727A8FD06FF2727FFFF52F8272727F827%2727F8FD0427FFFFA8F8272752F82752FFFF7D2727F8272727F8272727F8%2727A8FF7D27A8FFFFFF7DF827FD15FF522727FD08FF5227FFA827F827F8%27F827F827F827F827F827F827F827F827F82727A8FFFF27277DFD06FF7D%F884FF7DF827F827F827F827F827F827F8A8FF7DF852A8FFFFFF522752FF%FF52F827F827F827F827F827F82727FFA82727FFFFFF7D27F8A8FD14FF27%207DFD08FF2752FFA8272720FD0427A9A87DFD042720272727202727527D%FFFFFF27277DFD07FF2752FFFF2727202727272027272720272752FFFF27%52FD06FF7D277DFF7D272027272720272727202727277DFF7D27A8FFFFFF%27277DFD13FFA8F8277DFD08FF2752FF7D27F827F827F827A8FFFFFFA8A8%7D7D5252527D7DA8FFFFFF7DF8277DFD07FF7D277DFF5227F827F827F827%F827F827F8277EFF5227A8FD07FF2727A8FF2727F827F827F827F827F827%F852FFFFF87DFFFFFF52F852FD13FF7D2727FD09FFF87DFF7DF8272727F8%2727FFFFA8A8FD0BFF7D52F87DFD09FF7DF8FFFF27F8272727F8272727F8%FD0427FFA82752FD08FFA8277DFF7D2727F8272727F8272727F82727A8FF%7D27FFFFFF7D2720FD13FF52F852FD08FFA8277DFF5227F827F827F852FF%A8F8272752527D7DA87D7D5227F827F87EFD0AFFF852FF7EF827F827F827%F827F827F827F87DFF7DF8A8FD09FF5227FFA827F827F827F827F827F827%F82752FF7D277DFFFFA8F8277DFD12FF27277DFD08FFA820A8FF7D202727%27202752FF7D272727527D7DA884A87D7D52522727277DA8FD07FFA8277D%FF5227202727272027272720272727A8FF5252FD0AFF7D27A8FF27272027%27272027272720272727FFFF277DFFFFFF27207DFD11FFA827F87DFD08FF%7D277EFF5227F827F827F87DFFA852A8FD0CFF7D52F82752A8FD05FF7DF8%FFA827F827F827F827F827F827F82727FFAF2752FD0AFFA8F8A8FF7DF827%F827F827F827F827F827F8A8FF5227FFFFFF522752FD11FFA82727A8FD08%FF8427FFFF522727F82727277DFD05FFA87D537D527D7DA8A8FD05FF5227%277DFD04FF5252FFA8F8272727F8272727F8272727F852FFA8F8A8FD0AFF%A8277DFF7D272727F8272727F8272727F8277DFF7D27A8FFFF7D2752FD11%FF5327F8FD09FF5227A8FF2727F827F827F8A8FFA85952F827F827F827F8%27F827F85252A8FFFFA852F852A8FFFF2752FF7D27F827F827F827F827F8%27F82752FF7D27A8FD0BFF2753FFA8F827F827F827F827F827F827F852FF%A8F8A8FFFF7D2720FD11FF7D2752FD09FF7D27FFFF27272720272727527D%2727202727272027272720272727202727527EFFFFA82027A8FF20A8FF7D%202727272027272720272727207DFF7D20FD0CFF5252FFA8272727202727%2720272727202727FFA8277DFFFFA82727A8FD10FF522752FD09FF5252FF%A8F827F827F827F827F827F827F827F827F827F827F827F827F827F82752%FFFFA8F8277D277DFF5227F827F827F827F827F827F8277DFF5327FFFF7D%7D527E7DA8A87DA8FF5227FFA8F827F827F827F827F827F827F827A8FFF8%7DFFFFA827F8A8FD10FF52F87DFD09FF5252FFA827F8272727F8272727F8%272727F8272727F8272727F8272727F8FD0427AFFFA8F82727A8FF7D2727%F8272727F8272727F827277DFF7D27FFA8272727522752A8F8A8FF7D27FF%A827F8272727F8272727F8272727F8FFFF2752FFFFFF2127A8FD10FF2727%52FD09FF2752FFA8F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F8A8FF7EF827A8FF5227F827F827F827F827F827F827%7DFF5252FFFFA82752FFF87DA8277DFF5327FFFFF827F827F827F827F827%F827F827A8FF2752FFFFA827F87EFD10FF52207DFD09FF277DFF7D272027%2727202727272027272720272727202727272027272720272727202727FF%FF7D27FFFF5227272027272720272727202727A8FF7D52FFFFFF277DFF27%275220A8FF7D20FFA82720272727202727272027272720A8FF5252FFFFFF%27277DFD10FF27277DFD09FFF87DFF7DF827F827F827F827F827F8272727%F827F827F827F827F827F827F827F827F82752FFA827A8FF2727F827F827%F827F827F827F8277DFF5252FFFFA82752FF202727277DFF7D27FFA8F827%F827F827F827F827F827F8277DFF5252FFFFFF52F87DFD10FF2727A8FD08%FFA8277DFF52272727F8272727F82752A8A8FFFFFF7E7D2727F8272727F8%272727F8272727F827A8FF7DFFFF52F8272727F8272727F8272727F8A8FF%7D27FFFFFFF87DFF2753A927A8FF7D27FFA8272727F8272727F8272727F8%2727A8FF5252FFFFFF52277DFD10FFF8277DFD08FFA8F8A8FF52F827F827%F827F8527DFFFFFFA8FD04FFA8F827F827F827F827F827F827F827F852FD%04FF2727F827F827F827F827F827F8277DFF5227A8FFA82752FFF8537E27%7DFF5227FFA8F827F827F827F827F827F827F827A8FF2752FFFFFF52F87D%FD10FF2727A8FD08FFA827A8FF7DA87DA87D7D7DA8FFFFA87DFD042752FF%FFA8202727272027272720272727202727A8FFFFFF522027272720272727%20272727207DFF7D20FFFFFF7DA8FF7DA8FF7DFFFF7D27FFA82727272027%272720272727202727FFFF4B52FFFFFF52277DFD10FF27277DFD07FF5227%F852FD0AFF5227F8527DA85227F8A8FF7DF827F827F827F827F827F827F8%277DFFFFFF5227F827F827F827F827F827F82753FF7D27A8FD0BFF5252FF%A8F827F827F827F827F827F827F827FFFFF87DFFFFFF52F87DFD10FF27F8%7DFD06FF2727527D2752FD087D272752FD05FFA82727FFFF27F8272727F8%272727F8272727F852FFFFFF7D2727F8272727F8272727F827277DFFA827%A8FD0BFF5252FFA827F8272727F8272727F8FD0427FFA8277DFFFFFF2727%7DFD10FF272752FD05FFA8277DFFFFFF2727F8FD0627527EFD07FF7D277D%FF5227F827F827F827F827F827F82727FFFFFF7D27F827F827F827F827F8%27F82752FFA8277DFD0BFF2752FF7DF827F827F827F827F827F827F852FF%A8F8A8FFFFAF27F87DFD10FF52207DFD05FFA820FFFFA8FFFF522752FD0F%FF207DFFA82027272720272727202727272027FFFFFFA927272027272720%27272720272752FFFF27A8FD0BFF277DFF7D272027272720272727202727%277DFF7D27FD04FF27277DFD10FF522752FD05FF7D27FFFFF87DFFFF5227%7DFD0EFF5227FFA827F827F827F827F827F827F82727FFFFFFA827F827F8%27F827F827F827F82720FFFF2752FD0AFFA8F8A8FF52F827F827F827F827%F827F827F8A8FF5252FFFFFFA827F8A8FD10FF7D2752FD05FF7D27FFFF27%277DFFFF522753FD0DFF5252FFFF2727F8272727F8272727F8272727FFFF%A8FF52272727F8272727F8272727F8277DFF5227FD0AFF5227FFFFFD0427%F8272727F8272727F852FFFFF87DFFFFFFA82727A8FD10FF7D2727FD05FF%5227FFFF2127F87DFFFF522752FD0CFF5227FF7D27F827F827F827F827F8%27F82727FFA852FFA8F827F827F827F827F827F827F87DFF7EF8A8FD08FF%A82752FF7E27F827F827F827F827F827F82752FF7D27A8FFFFFF7D27F8A8%FD10FFA82727A8FD04FF7D27FFFF272727207DFFFF522752FD0BFF277DFF%A82727202727272027272720272752FFA927A8FF52272720272727202727%27202727FFFF2728FD08FF7E20A8FF7D20272727202727272027272720FF%FF5227FD04FF7D274CFD11FFA827F8A8FD04FF5227FFFF2727F827F852FF%FF7D27F8A8FD08FF7D277DFF5227F827F827F827F827F827F82752FF7D27%52FF7D27F827F827F827F827F827F8277DFF7D277DFD07FFF827FFFF2727%F827F827F827F827F827F852FFA8F87DFD04FF522752FD12FF27277DFD04%FF7DF8FFFF27F8272727F852A8FFA8522752A8FD05FFA82727FFFF27F827%2727F8272727F8272727F8A8FF59F827A8FF52272727F8272727F8272727%F852FFFF2727A8FD05FF2727A8FF52272727F8272727F8272727F827A8FF%5227A8FD04FF52F87DFD12FF52F852FD04FF5327A8FF2727F827F827F827%7DFFFF7DF82752A8A8A85927F8A8FF7DF827F827F827F827F827F827F827%FFFFF827F87DFFA8F827F827F827F827F827F827F87DFFA8F82752A8A8A8%27277DFFA827F827F827F827F827F827F82752FF7E2752FD04FFA8F8277D%FD12FF7D2727FD04FF7D20FFFF27202727272027272752FFFFFF52272727%202752FFFFA827272027272720272727202727277DFF7D27A87D27FFFF7E%27272027272720272727202727A8FFFF5227202727277DFFA82720272727%2027272720FD0427FFFF5227FD05FF7D2720AFFD12FFA8F827A8FFFFFF7D%27A8FF2727F827F827F827F82727A8FFFFFFA87DA8A8FFFFA8F827F827F8%27F827F827F827F827F87D7D27F8522727277D5227F827F827F827F827F8%27F827F87DA8FFA87D7DA8FFFFA827F827F827F827F827F827F827F8A8FF%7DF87EFD05FF7DF827A8FD12FFA827F87DFFFFFF7D27FFFF272727F82727%27F8272727F8527D7D537D527D5252272727522752527D52FD067DA87D7D%7DA87D7D7DA87D7D7DA8FD0A7D537DFD07527D5227F8272727F8272727F8%272727F8A8FFA8F852FD06FF272752FD14FF272727FFFFFF52277D7DF827%F827F8272752275252FD047D7E7DFD04A8FFA8FFA8FD27FFA8FFA8FFFD04%A87DA8FD047D525227522727527DF82752A8A8A9A8FF7E27F87DFD0FFFA8%A87D7D52272027FD05527D52847DA8A8FFA8FD4DFFA8A87DA87D7D525227%52525220272752527E7EA8A8FD04FF7D7D5252F827F82727527D7E7DA8A8%FFAFFD5FFFFD04A87D7D52522727F8272752527D7DF82752A8A8FD73FFA8%FFA87DF82728FFA8522752A8FD18FFA8FFFFFFA8A8FFFFA8A8A8FF7D7D52%52A8A8277DFF7D52FF7D52A8A8522727FD04FFA82127A8FF2752272752A8%287DFF7D52FF847D7EFFFFFFA8A8A8FFA8FFA8FD1BFFA87D27527DFD04FF%A8522053A8FD10FFAF7DFFFFA8272752FFFF7D27A8FF7D277DFF52272720%AFA82727FF5227FF7D27FF27272752A8FFFFFF7D27277DFF522727207D7D%2752FF2727FF7D277DFFFF7D2720277DA8205227527DA859FD04FFA8A8FD%0FFF7D27277EFD08FF7D272752A8FD07FFA8527DFF5227FF5227A8FF2727%F82753FF522752FF522752FF52277DFFFFA8F8277D7DF8FFF87DFF27F8A8%FD05FF7DF82752FFFF7DF87EFFA8F87DFF27F8FF52277DFFFF7DF85252A8%7D52F827F87D2827A8FF7D27F827A8A8285253FD08FF7DF82752FD0CFF7D%27277DA8FD05FFA827F8FF2727A87D27FF7D2753A8F852FF52F84CFF52F8%52FF7DF87DA8FFA82727525227A87DA8FF272752FD05FF5227274CFFFF52%27A8FF7D2752A8F852FF7DF8A8FFFF59277EFFFFFFA82752FFFF52F8FFA8%27F85259A8F8272752FD06FF7D27F87DA9FD0EFFA87DF82752FD05FF5227%7D52F87D5227FF7DF8A8FF27F8FF5227F87E272727FF5227F827A8A8F827%F827F8FD04FFA8F82727FFFFFFA8275252F8A8FF52F8A8FF7DF827F82727%FF52277DFFFF59F85252A8FFA8F87DFFFF2727A852F87DFFFF522752FFA8%FD04FF7D272752A8FD13FF5227277DA8FFFF7D207D2827527D27FF52277D%FF2727A8522727524C2727FF7D207D7DFFA827524C2027FD05FFAF27277D%FFFFFF275227277DFF5227A8FF7D27527D2052FF5220A8FFFF52272727A8%FF7D2752FFFF2727FF2727A8FFFF7D2052FD04FFA8522052A8FD16FFA827%F852FFFFA827272720272752FF7DF87DFF52F8A8275227272752F8FF7D27%7DFFFFA8F87D522727FD06FF7DF87DFFFF7D27F827F87DFF52F8FFFF7DF8%A8FF2727FF5227A8FFFF52F8A8FFFFFF7DF87DFFA9F852A827F8A8FFFFA9%52F852A8FFA827F87DFD18FF7DF852FD04FF2727217D272727FF7D2752FF%2727A852527DF87D7D27A8A827527DA8A8277DA82727FD04FF275227277D%FFFF7DF8A8A82752FF2727A8FF52277DFF2752FF52277DA8FF52277DFFFF%FF7D277DFFA82752FF2727A8FD04FF52F87DFFFF7D2752FD17FF7DF827A8%FD04FF7DF8277D52F852FFFF2727F82752FFF852A82752A8F87D7D27F827%52A8F87DFF5227FFFFFFA827F8277DFFFFFF5227A8FF2752A85227FFFF7D%F8A8A82752FF2727F8277D52F827F87DFF52F87EFFA8F87DFF52F87DA8FF%A8FF7D2727FFFFFF522752FD15FFA82727A8FD05FF7D2720FF522752FFFF%A8272752FFFF7D7DFF7DFFA87DA8FFA8FFA8FD21FFA8FFFFAFA8A87DFF7D%7D5252A8FF5252A8FF7D2759FF7D2727277D522827207DFD04FF52277DFD%13FFA8F827A8FD07FF2727FFA852A8FD04FFA8FD43FF7DFFFFFF7D52527E%2727F852A8FD05FF52277DFD12FF27277DFD69FF2727A8FD10FF27277DFD%6BFF2727A8FD0EFF52277DFD1DFFA8A9A8A87DA87D7D597D527D527DFD05%5253527D5253527D527D527D7D7D52FD067D847DA87DFD06A8FD1FFF2027%A8FD0CFF522752FD0FFFA8FFA8A87D7D5259FD09527D5227F8537D7D7DA8%7DA87DA87DA87DFD0AA8FFA8FFFD06A87DA87DA87D7DF827527D7D7D527D%52525253525952FD047DFD04A8FD0EFFA8F828FD0BFF7D2752FD08FFA97D%847D7DFD05527D52FD047DA8A8FD0AFF7D277DFD21FFA82852A8FD09FFA8%A8FD067D527D52272752527D7DA8A8FD08FFA8F852FD09FF7D2727FFA87D%537D52522727F8FD0527F8277DFD14FFA8522752A8FD1CFF525227A8FD15%FF7DF82727522727F827F8272752527D7DA8A87DF87DFD07FFA827202727%27202727535284A8A8A8FFFFFF7D272727A8FD15FFA87D27527DFD17FF7D%53277DA8FD16FF7D272727FD05FFA8A87D7D5252FD0727A8FD06FF7D527D%7DA8A8FD0DFF7D27F827A8FD17FF7D7D2752527EA8FD0DFFA8A852522752%7DFD09FF7DA8FD0DFF7DF82727FD0DFFA8FFA87D525252FD1AFF7D272727%A8FD0DFFA8FD0BFFA87D5252285252FD077DFD05527D7DFD0AFFA852277D%FD0CFF7D272727FD30FF7D27F8277DFD0BFFA8277D7DA8FD0BFFA8FF7D7D%597D7D7D59FD047DAFA8FD0BFF7D27527D2752A8FD0AFF59F82727FD32FF%7D2720277DFD0AFF7D527D20FF7DA8A8FD1FFFA87EA87D20A8FF2752A8A8%FD08FF52202727FD34FF7D27F8277DFD09FFF87E27275252522727A8A8FD%18FFA8A87EA8A8F827FF7E27FF7D2752FD07FFA852F82727FD36FF7D27F8%2752FD07FFA8A87D7D7D277DFF277D522752A87DA8FD10FFA8A8FF7D27A8%5352FF27F853FF52A8FFA8FD07FF7D27F82752FD38FFA827F82727A8FD07%FFA8A87DF8FF7D52FF7DF87E7D272752A85352A8A87D7DFF7DFFFF7DA8FF%27277D7D27A87D7E27FF2752F87DA8FD09FF5227F82752FD3AFFA8592727%207DFD09FFA8FF527DFF52527D7D27FD0452A87D2752277D52A8FF27A8FF%7D27A85252A8277D527D52FFFFA8FD08FFA8FD04277DFD3DFF7DF827F827%7DFD09FF7DFFFF2752A8525227A827FFFF7D52FF525252A8FF527DFF7D27%7DA827522753A8A8A8FD09FFA87DF827F852A8FD40FF5227F82752A8FD0A%FFA87D7D7DA8537D5252AF5252FF52525284FF5252A87D27527DFF7DA8FD%0CFF7D27F827277DFD43FF7D27F827F852A8FD0DFFA8FFA85252A82E2727%FF5227527D277DA8A8A8FD0EFF7D2727F82752A8FD45FFA87D2727202752%A8FD2AFF7D52202727527EFD49FFA85227F827F8527DFD25FFA87D2727F8%2727A8FD4DFFA87D20272727F8537DFD1FFFA87DFD0427F8527DFD51FFA9%5252F827F827F85252A8A8FD15FFA8A87D7D2727F827F82752A8A8FD55FF%A85252272720FD04277D7DA8A8FD0BFFA8A87D7D5252272720FD04277DA8%FD5AFFA8A85252F827F827F827F827F827275227522752FD0427F827F827%F827F827527DA8FD62FF7D7D5252FD0427F8272727F8272727F8272727F8%52527D7DA8FD6BFFA8A87D7D537D7D7D53FD047DFD04A8FD36FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ Touch Calligraphic Brush/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Touch Calligraphic Brush)(1 12 12 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au*u0 O0 g0 J 0 j 1 w 10 M []0 d0 XR-1594.1903 89.3241 m-1591.0548 93.8136 -1588.2741 98.6074 -1584.7266 102.7434 C-1560.4914 131.0004 -1536.0706 159.0977 -1511.7634 187.2931 C-1502.4915 198.0482 -1493.3341 208.9026 -1484.1966 219.7723 c-1482.8635 221.3581 -1481.9338 223.2828 -1480.4407 225.6472 C-1496.6871 234.4846 -1512.6636 243.2058 -1528.6701 251.8712 c-1538.9482 257.4355 -1549.3068 262.8518 -1559.5653 268.4517 C-1577.1961 278.0761 -1594.7567 287.829 -1612.3924 297.4443 C-1616.7952 299.8448 -1621.7129 301.4537 -1625.7284 304.3493 c-1627.8261 305.8621 -1628.4775 309.3806 -1630.619 313.6689 C-1590.6312 319.1277 -1552.432 324.3422 -1512.9926 329.7261 C-1514.649 336.2124 -1516.75 343.1374 -1518.1621 350.2001 C-1523.6792 377.7942 -1529.1608 405.3979 -1534.3156 433.0613 C-1542.0507 474.573 -1540.4445 516.6518 -1538.6882 558.3507 C-1536.7153 605.1894 -1527.6819 651.2635 -1514.3369 696.4351 C-1501.3864 740.2713 -1483.6444 782.0564 -1461.7474 821.9908 C-1445.1099 852.3332 -1426.3923 881.5246 -1403.7938 907.9205 C-1387.7232 926.6915 -1371.7802 945.6436 -1354.6207 963.3939 C-1328.8627 990.0388 -1299.8348 1012.9495 -1269.4965 1034.2423 C-1237.5475 1056.6656 -1203.5422 1075.459 -1168.0812 1091.5054 C-1128.3372 1109.4898 -1087.0173 1123.1705 -1044.2114 1131.7435 C-1023.0876 1135.974 -1001.6149 1138.4668 -980.2957 1141.7167 C-942.8923 1147.4187 -905.1347 1146.1095 -867.7057 1144.4404 C-820.8593 1142.3515 -774.7872 1133.4093 -729.6238 1120.0631 C-687.0924 1107.4946 -646.4639 1090.4588 -607.6055 1069.3613 C-576.0029 1052.2032 -545.633 1032.8985 -518.139 1009.5324 c-499.5172 993.7064 -480.7977 977.9079 -463.2313 960.948 C-436.3728 935.0167 -413.2434 905.8188 -391.8134 875.2423 C-369.4139 843.2828 -350.6117 809.2776 -334.5531 773.8281 C-316.4421 733.8476 -302.7088 692.2684 -294.2592 649.1523 C-290.1156 628.0092 -286.0601 606.648 -284.6736 585.2104 C-282.3388 549.1106 -280.7574 512.8398 -281.5661 476.7015 C-282.1184 452.0192 -286.4363 427.297 -290.6087 402.8552 C-294.7063 378.8519 -300.7468 355.1801 -306.1334 330.4518 C-266.439 325.1224 -225.7613 319.6608 -185.1201 314.2042 C-185.1201 310.2941 -185.1201 307.8803 -185.1201 305.6358 C-234.2971 278.878 -283.4104 252.1551 -332.7388 225.3151 C-313.3116 202.3407 -294.6778 178.8996 -274.5456 156.825 C-244.1651 123.513 -221.2195 95.0182 -221.2828 86.8008 C-234.5301 88.7185 -247.6385 90.5971 -260.7382 92.5342 c-262.5651 92.8044 -264.3283 93.5263 -266.1567 93.7616 C-283.0716 95.9382 -299.9753 98.2243 -316.9205 100.1388 C-333.6633 102.0303 -350.4645 103.4015 -367.2146 105.2338 C-384.9711 107.176 -402.7268 109.179 -420.4229 111.5942 C-427.4533 112.5536 -429.7888 106.997 -433.3847 103.4514 C-455.0092 82.129 -475.5916 59.6704 -498.1353 39.384 C-517.3349 22.1072 -537.6991 5.68167 -559.3736 -8.28816 C-585.7013 -25.257 -613.4446 -40.2511 -641.4751 -54.3053 C-684.3651 -75.81 -729.8004 -90.6506 -776.8596 -99.9978 C-797.9897 -104.1948 -819.3623 -108.2028 -840.7999 -109.5894 C-876.8996 -111.9242 -913.1741 -113.5555 -949.3075 -112.683 C-974.2391 -112.0811 -999.0855 -106.9643 -1023.9185 -103.497 C-1057.9839 -98.7406 -1090.7272 -88.8649 -1123.1123 -77.5318 C-1169.5635 -61.2766 -1213.1694 -39.3225 -1254.3473 -12.5256 C-1283.7311 6.5963 -1312.0295 27.2296 -1336.901 52.104 C-1354.589 69.7944 -1371.8734 87.8918 -1389.1649 105.973 c-1396.2615 113.3937 -1404.9227 109.9334 -1412.8156 109.501 c-1425.3079 108.8166 -1437.7252 106.7312 -1450.1685 105.192 C-1466.5847 103.1616 -1482.9886 101.0301 -1499.4105 99.0464 C-1514.5118 97.2222 -1529.6499 95.6919 -1544.7342 93.7413 C-1556.8805 92.1705 -1568.9677 90.1457 -1581.0874 88.3654 C-1584.7407 87.8286 -1588.4149 87.4352 -1592.0796 86.9764 C-1592.7832 87.7589 -1593.4867 88.5414 -1594.1903 89.3241 Cf1 D-211.6114 304.7044 m-217.3493 305.701 -221.8811 306.6998 -226.4669 307.243 C-237.8856 308.5954 -249.3474 309.5903 -260.7581 311.0019 C-280.6035 313.457 -300.3975 316.3448 -320.263 318.6138 C-333.8455 320.1652 -347.5354 320.7553 -361.1364 322.168 C-379.4532 324.0707 -397.7156 326.4949 -416.0302 328.4216 C-429.0754 329.7938 -442.1785 330.6062 -455.2371 331.8613 C-476.5252 333.9075 -497.7738 336.4103 -519.0853 338.1579 C-537.5759 339.6742 -556.1254 340.5097 -574.658 341.4694 C-607.7275 343.1822 -640.805 344.737 -673.8762 346.4148 C-682.195 346.8368 -690.4964 347.623 -698.8169 347.9862 C-725.4851 349.1508 -752.1661 351.2811 -778.8285 351.094 C-880.9967 350.3775 -983.2156 354.2324 -1085.3291 348.0465 C-1096.6203 347.3625 -1107.9265 346.9185 -1119.2281 346.4168 C-1156.3743 344.7674 -1193.5217 343.1467 -1230.6683 341.5057 C-1243.0547 340.9585 -1255.4707 340.7578 -1267.8188 339.7397 c-1290.4796 337.8714 -1313.0873 335.365 -1335.7411 333.4029 C-1357.1079 331.5523 -1378.5258 330.2827 -1399.8839 328.3462 C-1420.3738 326.4884 -1440.8117 324.0616 -1461.2805 321.9643 C-1473.0033 320.7632 -1484.7749 319.9864 -1496.4672 318.5512 C-1521.3445 315.4978 -1546.188 312.1664 -1571.0377 308.8909 C-1579.8475 307.7296 -1588.6352 306.4001 -1599.2687 304.8861 C-1549.0824 278.9577 -1501.0658 254.1503 -1451.014 228.2914 C-1487.9576 187.2135 -1524.5397 146.5376 -1562.2498 104.6074 C-1556.5588 105.3453 -1552.3739 105.8761 -1548.1923 106.4323 C-1534.987 108.1886 -1521.8028 110.1243 -1508.5732 111.6728 C-1492.6408 113.5376 -1476.6537 114.9343 -1460.7207 116.7949 C-1444.0387 118.7431 -1427.4254 121.315 -1410.7229 123.042 C-1391.2867 125.0518 -1371.7725 126.2939 -1352.3176 128.1383 c-1331.5648 130.1059 -1310.8639 132.6414 -1290.0989 134.453 C-1273.2362 135.9243 -1256.3172 136.7827 -1239.414 137.7515 C-1209.6081 139.4598 -1179.795 141.0399 -1149.9856 142.6847 C-1140.5854 143.2034 -1131.1902 143.8179 -1121.7875 144.2823 C-1098.9208 145.4116 -1076.061 146.8314 -1053.1799 147.4846 C-1022.0657 148.373 -990.9335 149.1262 -959.8102 149.0818 C-919.9954 149.0249 -880.1772 148.3357 -840.3689 147.5122 C-801.7427 146.7133 -763.1262 145.4347 -724.5075 144.2935 C-709.9455 143.8632 -695.3803 143.4043 -680.8327 142.6493 C-651.8309 141.1442 -622.8401 139.4244 -593.8447 137.7948 C-574.5038 136.7078 -555.1554 135.7376 -535.8236 134.5099 C-511.9871 132.996 -488.1635 131.2779 -464.3356 129.6288 C-456.5652 129.091 -448.774 128.722 -441.0359 127.8764 C-422.7396 125.8769 -404.4661 123.6647 -386.1896 121.486 C-374.2773 120.0658 -362.3811 118.5118 -350.4687 117.0931 C-335.0898 115.2618 -319.6987 113.5327 -304.3192 111.7063 C-295.8473 110.7003 -287.3861 109.6031 -278.9242 108.5145 C-269.1808 107.261 -259.4418 105.9714 -248.3117 104.5157 C-286.1107 147.0224 -323.2823 187.0161 -359.1362 228.4811 C-309.2234 254.2701 -261.3022 279.03 -211.6114 304.7044 Cf-336.5206 328.9582 m-258.0872 565.6696 -329.8455 859.5236 -587.264 1025.7527 C-720.401 1111.7264 -867.7374 1137.3722 -1023.4566 1108.7928 C-1141.2638 1087.1714 -1243.0186 1032.8677 -1329.3541 949.833 C-1533.1691 753.8105 -1540.6622 482.7704 -1482.6322 327.933 C-1469.5244 329.4377 -1456.634 330.9173 -1443.0715 332.4741 C-1443.0715 335.5003 -1443.0715 338.4368 -1443.0715 341.3732 c-1443.0715 377.4962 -1443.2756 413.6212 -1442.9239 449.7407 c-1442.839 458.4635 -1441.58 467.3165 -1439.6777 475.8457 c-1437.0446 487.6515 -1429.1482 494.9561 -1417.3718 498.0594 c-1413.3837 499.1103 -1409.5019 500.5643 -1407.0732 501.3489 C-1407.0732 508.2475 -1407.492 513.8656 -1406.9925 519.4007 c-1405.6471 534.3092 -1403.778 549.1699 -1402.3669 564.0731 C-1401.0519 577.9618 -1400.2495 591.8998 -1398.8783 605.7822 C-1396.9338 625.469 -1394.5177 645.1095 -1392.603 664.7989 c-1391.2268 678.9513 -1390.6094 693.1785 -1389.1759 707.3239 C-1386.6961 731.7941 -1383.9131 756.2344 -1381.1282 780.6726 C-1379.0742 798.697 -1376.7817 816.694 -1374.6581 834.7107 c-1373.1613 847.4098 -1364.7561 855.6889 -1354.0514 859.0783 c-1324.8452 868.3258 -1294.4843 870.4757 -1264.2605 865.8896 C-1242.5632 862.5973 -1221.311 856.4073 -1199.804 851.7705 C-1197.7071 851.3185 -1194.8129 852.0978 -1192.9661 853.325 C-1168.6195 869.5037 -1145.0973 887.0601 -1119.9488 901.8585 c-1092.6575 917.9178 -1062.8118 928.8681 -1032.213 937.2002 c-998.3731 946.4148 -964.0419 952.8165 -928.7643 952.6618 c-918.1236 952.6151 -907.4146 953.4287 -896.8551 952.5016 c-870.7597 950.2105 -844.2524 949.3856 -818.7742 943.9347 C-757.8658 930.9038 -701.3858 906.8301 -651.2113 869.1404 c-649.0271 867.4997 -645.8485 866.456 -643.1062 866.3975 C-615.4058 865.8074 -588.7764 859.6351 -562.2752 852.1076 c-508.9997 836.9751 -464.5502 808.152 -427.3738 767.4056 C-403.7352 741.4971 -385.0207 712.5452 -372.3095 679.9033 C-359.017 645.7693 -350.1498 610.2695 -348.3001 573.7753 C-346.5316 538.882 -346.225 503.7255 -354.3813 469.2136 C-360.5492 443.1155 -366.1288 416.7783 -378.768 392.8538 C-388.8851 373.703 -400.0811 355.1223 -410.7315 336.4061 C-386.7359 333.9978 -361.5398 331.4692 -336.5206 328.9582 Cf-455.1611 119.8027 m-467.2231 120.9925 -478.0118 122.2529 -488.8337 123.0784 C-505.4352 124.3448 -522.0718 125.1558 -538.6715 126.4422 C-564.868 128.4723 -591.038 130.8478 -617.2357 132.8615 C-634.1105 134.1587 -651.0056 135.3076 -667.9131 135.9765 C-671.849 136.1323 -676.1796 134.6859 -679.7937 132.8965 C-687.8833 128.8911 -695.5435 124.0292 -703.5432 119.8296 C-731.6193 105.0907 -760.864 93.1041 -791.4493 84.7838 c-825.2757 75.5817 -859.6256 69.2218 -894.8958 69.3356 C-910.6957 69.3866 -926.5122 68.9062 -942.2908 69.4889 c-954.0399 69.9228 -965.9148 70.7859 -977.4241 73.0392 C-998.4931 77.1639 -1019.5633 81.641 -1040.2136 87.4599 C-1069.4105 95.6872 -1097.2884 107.3747 -1123.8896 122.2094 C-1135.0545 128.4357 -1145.6216 137.3383 -1160.2071 134.6491 C-1167.0294 133.3912 -1174.085 133.2492 -1181.0498 132.9435 C-1196.4188 132.2689 -1211.8108 132.0527 -1227.1679 131.1923 C-1240.8198 130.4277 -1254.4408 129.0895 -1268.069 127.9286 C-1292.8938 125.8139 -1317.723 123.7401 -1342.53 121.4311 C-1349.2195 120.8084 -1355.8359 119.4005 -1363.0938 118.2571 C-1140.6499 -141.2388 -712.3834 -170.9745 -455.1611 119.8027 Cf-1247.0602 664.3735 m-1243.6317 663.9709 -1240.48 663.9032 -1237.4764 663.2015 C-1206.8035 656.0351 -1176.3844 648.2042 -1144.2039 652.5493 C-1122.3761 655.4965 -1101.0262 660.1899 -1081.5919 670.0395 C-1046.977 687.5829 -1021.9584 715.0359 -1004.2945 749.6602 C-992.4318 772.9133 -986.3033 797.8598 -980.5407 822.9117 C-978.1448 833.3275 -986.218 846.0655 -996.4938 849.8773 C-1010.3524 855.0183 -1021.4337 850.791 -1030.552 835.5209 C-1038.3503 822.4614 -1049.7222 813.0771 -1063.8348 811.5435 c-1081.1126 809.666 -1099.4123 809.8167 -1116.3188 813.4801 C-1148.384 820.4281 -1179.7983 830.4082 -1211.4327 839.3077 C-1236.6253 846.395 -1262.2098 852.4829 -1288.3059 852.7687 c-1306.822 852.9715 -1325.5151 849.5135 -1343.8681 846.2297 c-1351.6796 844.8321 -1358.7501 839.3214 -1359.9965 830.1616 c-1362.9065 808.7759 -1365.6345 787.3604 -1368.0289 765.9115 C-1369.5461 752.3205 -1370.195 738.6351 -1371.4757 725.0148 C-1373.5051 703.4339 -1375.7891 681.8769 -1377.8644 660.3001 c-1379.0966 647.4896 -1380.0265 634.6498 -1381.2857 621.8422 c-1383.3273 601.077 -1385.6193 580.3365 -1387.628 559.5683 C-1388.919 546.2209 -1389.051 532.7065 -1391.1913 519.5083 c-1395.0318 495.8258 -1380.0086 485.0007 -1362.7532 484.9436 C-1339.1227 484.8653 -1315.4832 484.5739 -1291.8669 485.1571 C-1285.5438 485.3132 -1278.8504 487.4159 -1273.1073 490.2219 c-1264.0614 494.6416 -1255.8484 500.731 -1246.9747 505.5456 C-1229.7837 514.8733 -1210.5423 515.4223 -1192.6905 511.5824 C-1169.6683 506.6303 -1156.8945 488.853 -1151.3646 466.2607 c-1147.6309 451.0069 -1147.2211 435.6819 -1149.5765 420.035 c-1153.4096 394.5727 -1170.9342 372.2225 -1195.6647 366.148 C-1215.7128 361.224 -1235.2755 364.0864 -1254.1302 373.2118 C-1289.5392 390.3493 -1318.8776 415.5421 -1347.1836 442.1269 C-1359.4525 453.65 -1371.0005 465.9376 -1382.983 477.7696 C-1389.1425 483.8517 -1396.7382 487.2874 -1405.3306 485.7604 C-1422.3325 482.7385 -1428.2847 471.0988 -1428.3494 456.1953 C-1428.5133 418.4412 -1428.4038 380.6858 -1428.4039 342.931 c-1428.4039 340.3659 -1428.4038 337.8008 -1428.4038 334.4276 C-1419.417 335.1105 -1411.8241 335.6874 -1403.5219 336.3183 C-1403.5219 379.1416 -1403.5219 420.4817 -1403.5219 463.8867 C-1399.8143 461.0312 -1397.4544 459.5358 -1395.4783 457.6405 c-1379.6562 442.4654 -1364.5723 426.4389 -1347.9605 412.1907 C-1328.737 395.7024 -1308.8712 379.7602 -1287.9847 365.482 C-1273.1457 355.3381 -1257.6378 346.1016 -1237.1036 349.1719 C-1215.3671 352.4222 -1193.0404 351.5998 -1171.0132 353.1493 C-1167.118 353.4233 -1162.8852 355.9461 -1159.7284 358.547 C-1136.4503 377.7265 -1125.5133 403.3453 -1123.8726 432.7403 C-1122.6679 454.3233 -1126.7147 475.4513 -1137.493 494.5159 C-1152.6799 521.3783 -1175.5211 536.0408 -1206.9705 537.2197 C-1228.2953 538.0192 -1248.6581 533.4452 -1265.6516 521.7964 C-1283.0148 509.8941 -1300.9832 508.5307 -1320.4676 509.2524 C-1336.1238 509.8323 -1351.8185 509.3697 -1368.6625 509.3697 C-1367.8387 515.0656 -1366.9822 519.7181 -1366.5185 524.4093 C-1364.2798 547.0587 -1362.1422 569.7181 -1359.9777 592.3748 c-1357.2527 620.8978 -1354.5404 649.4221 -1351.8153 677.9451 C-1349.6508 700.6018 -1347.3803 723.249 -1345.33 745.9161 C-1343.0128 771.5337 -1340.889 797.1689 -1338.5375 824.4637 C-1329.9563 825.3676 -1321.2552 825.8439 -1312.7121 827.268 C-1288.6658 831.2766 -1264.9727 827.8848 -1241.8612 822.3358 c-1199.0816 812.0646 -1156.9601 798.9309 -1113.9967 789.6055 C-1096.0837 785.7175 -1076.3268 786.0639 -1058.1196 788.9587 C-1038.8815 792.0174 -1022.9699 803.7459 -1012.5689 821.3685 c-1011.112 823.837 -1008.5893 825.6763 -1006.5598 827.8068 C-1004.899 824.3267 -1004.4016 822.0464 -1004.9775 820.0806 c-1009.6673 804.0716 -1013.5091 787.7072 -1019.6181 772.2448 C-1030.4034 744.9465 -1047.091 721.3583 -1070.8093 703.7129 c-1094.4463 686.128 -1121.7726 677.5848 -1150.9774 675.733 C-1174.9452 674.2133 -1198.6267 677.4191 -1221.8743 683.2668 C-1237.4206 687.1774 -1252.8035 691.7374 -1268.054 695.95 C-1271.6014 662.0215 -1275.099 628.5691 -1278.6512 594.5939 C-1272.9844 596.8528 -1268.0437 598.7861 -1263.1302 600.7866 C-1231.2375 613.7712 -1198.1207 621.0801 -1163.6645 621.7184 C-1155.6355 621.8672 -1147.5345 621.1175 -1139.5518 620.1075 C-1125.8283 618.371 -1111.9506 617.0438 -1098.5295 613.8814 C-1061.0517 605.0503 -1028.6509 587.2602 -1003.1672 557.692 C-990.9976 543.5719 -981.8006 527.8937 -975.1732 510.5462 C-966.3753 487.5175 -964.2798 463.7878 -965.2843 439.2578 C-966.1068 419.1721 -970.209 400.2104 -978.0403 381.9049 C-981.1955 374.5296 -984.7308 367.317 -988.3679 359.4351 C-982.6254 359.4351 -977.6971 359.8777 -972.8786 359.3384 c-964.1639 358.363 -960.3497 362.3737 -957.137 370.2909 C-948.3656 391.9062 -942.7327 414.1453 -940.258 439.4601 C-938.2339 436.8739 -936.9204 435.7348 -936.2802 434.2961 C-927.9865 415.656 -920.6512 396.5285 -911.3218 378.4272 C-902.1228 360.579 -901.2478 361.0305 -880.9253 361.0645 C-878.576 361.0684 -876.2267 361.0649 -873.1914 361.0649 C-873.9202 363.0469 -874.1997 364.3519 -874.8344 365.4519 c-884.5054 382.2131 -895.1031 398.5078 -903.7353 415.7852 C-918.9224 446.1823 -926.0198 479.2154 -927.5837 512.7536 C-928.8981 540.9413 -926.884 569.4092 -924.5673 597.6071 C-922.1086 627.5321 -912.3471 655.8141 -899.041 682.5983 c-881.9359 717.0294 -858.3843 746.3826 -827.9043 770.2273 C-785.6117 803.3131 -737.604 822.4085 -684.4877 826.6822 C-656.9997 828.8938 -629.1688 828.1921 -601.5574 822.5902 C-548.2529 811.7755 -502.212 787.6173 -463.805 749.5854 C-441.3296 727.3298 -424.0053 701.1752 -411.1496 671.9155 c-397.3715 640.5566 -389.0121 607.8419 -387.4543 574.0046 C-386.0213 542.8757 -385.7935 511.609 -391.5568 480.4448 C-398.3789 443.5551 -410.9438 409.2793 -431.3944 377.9955 C-439.534 365.544 -449.0747 354.0082 -458.9131 340.7994 C-449.9517 339.9052 -441.8297 338.9787 -433.6827 338.4018 C-432.407 338.3115 -430.5104 339.4768 -429.7588 340.6238 C-418.1126 358.3987 -405.2005 375.5278 -395.3672 394.2681 C-375.5991 431.9424 -365.9304 473.0491 -363.0948 515.1367 C-361.3472 541.0747 -363.3728 567.4991 -366.1058 593.4524 C-370.1983 632.3174 -381.6404 669.2635 -400.9845 703.5336 C-417.0211 731.9443 -436.4943 757.4012 -461.4357 778.7776 C-486.1664 799.9735 -513.181 817.1422 -543.2813 829.4762 C-572.522 841.4579 -603.0732 849.0671 -634.4119 851.2135 C-662.5198 853.1386 -690.648 851.519 -718.6457 845.4195 C-781.607 831.7029 -835.0757 802.477 -878.1748 754.2225 C-897.3753 732.7251 -913.0487 709.0836 -924.5151 682.8131 C-942.5103 641.5847 -952.3823 598.4407 -952.5209 553.2745 C-952.5471 544.7281 -952.5246 536.1816 -952.5246 527.6351 C-953.3544 527.3043 -954.1841 526.9734 -955.0139 526.6427 C-956.7074 529.1488 -958.7554 531.4864 -960.04 534.187 C-974.3043 564.1743 -995.7971 588.1228 -1023.0847 606.4159 C-1063.1535 633.2774 -1108.5969 643.7908 -1156.083 646.1046 C-1179.454 647.2435 -1202.4061 642.9237 -1225.0326 637.1323 c-1233.3301 635.0085 -1241.6748 633.0694 -1250.8505 630.8388 C-1249.4843 642.9261 -1248.3241 653.1911 -1247.0602 664.3735 Cf-1083.6207 650.0996 m-1061.8424 644.1422 -1039.984 636.2611 -1020.1053 623.4298 C-1000.2843 610.6357 -982.7179 595.3152 -966.6141 575.314 C-959.4325 656.1738 -932.13 726.6591 -874.0363 782.2311 C-815.9462 837.7999 -744.9383 863.7408 -664.6944 866.8776 C-824.9912 983.1185 -1050.7357 963.5334 -1184.9267 847.2209 C-1174.4442 844.1876 -1164.0185 841.3453 -1153.7018 838.151 C-1128.3389 830.2981 -1102.7999 823.995 -1075.8672 825.4323 C-1062.8383 826.1275 -1052.1399 831.0896 -1045.6104 842.0934 C-1039.6525 852.1336 -1031.2047 858.2895 -1020.8902 862.1425 c-1005.7363 867.8033 -990.7106 866.0767 -978.7817 855.3082 c-968.8589 846.3507 -962.8321 833.7893 -965.8152 819.9648 C-972.7037 788.0422 -980.1761 756.1155 -998.1705 728.1141 c-1011.0409 708.0862 -1024.7113 688.5704 -1045.024 675.0849 C-1058.0399 666.4436 -1071.2495 658.0941 -1083.6207 650.0996 Cf-548.3568 543.9383 m-545.268 580.3438 -548.0408 616.416 -558.3186 651.4241 C-568.2838 685.368 -582.0016 717.6742 -614.911 736.183 C-643.0159 751.9897 -671.9844 751.6305 -700.3288 736.18 C-725.1702 722.639 -738.5621 699.6686 -748.7568 674.5727 C-763.3342 638.6877 -768.1552 601.0383 -768.4441 562.5379 C-768.7473 522.176 -768.8545 481.9101 -758.6311 442.4036 C-751.4049 414.4791 -740.4129 388.4335 -720.8346 366.8642 C-716.6255 362.227 -710.4493 357.5566 -704.5844 356.6177 C-692.1622 354.6293 -679.3399 355.2317 -666.6964 354.5119 C-650.3639 353.5821 -634.0509 352.3052 -617.7158 351.4332 C-615.4861 351.3142 -612.5646 352.0075 -611.0065 353.4508 C-601.8748 361.9101 -591.6536 369.6763 -584.3846 379.5745 c-560.8042 411.684 -552.6168 449.4828 -548.6802 488.0949 C-546.8007 506.5287 -548.3568 525.3129 -548.3568 543.9383 Cf-694.6583 135.4999 m-701.8518 136.3832 -707.5746 137.4985 -713.3316 137.7174 C-732.7629 138.4563 -752.2041 138.9823 -771.6456 139.3948 C-801.669 140.0317 -831.6966 140.977 -861.7212 140.934 C-899.7232 140.8796 -937.7238 139.9468 -975.7255 139.4273 C-1017.1516 138.8613 -1058.5804 138.4551 -1100.0029 137.6974 c-1109.1703 137.5296 -1118.316 136.1802 -1128.0584 135.3234 C-1006.4069 61.5389 -832.0846 54.1783 -694.6583 135.4999 Cf-1346.0271 470.2566 m-1343.0925 464.5528 -1341.8142 459.9456 -1338.9144 456.8646 C-1332.4733 450.0213 -1325.175 443.9904 -1318.3056 437.5437 C-1294.7916 415.4769 -1268.83 396.961 -1239.2398 383.9382 C-1220.7133 375.7844 -1202.1728 375.651 -1185.5093 388.2974 C-1171.1445 399.1992 -1164.1128 414.7046 -1162.8529 432.5212 C-1161.6582 449.4177 -1164.9648 465.504 -1174.2007 479.9765 C-1180.255 489.4636 -1189.3415 495.7416 -1199.9897 497.6821 C-1221.6158 501.6235 -1240.8074 493.2774 -1257.903 481.3212 C-1268.3241 474.033 -1278.9358 470.3153 -1291.2342 470.272 C-1308.5427 470.211 -1325.8515 470.2566 -1346.0271 470.2566 Cf-920.2729 361.2253 m-925.0982 370.2584 -929.461 378.4257 -934.607 388.0591 C-936.2944 382.3504 -937.3869 378.0976 -938.8197 373.9627 c-940.2723 369.7704 -942.061 365.6945 -943.8384 361.2253 C-935.9581 361.2253 -928.7007 361.2253 -920.2729 361.2253 Cf*U0 D-1403.5902 175.8564 m-1412.3661 207.1735 -1421.1778 238.6185 -1430.2666 271.0522 C-1421.2431 271.0522 -1414.8168 271.0522 -1408.0027 271.0522 C-1403.7115 252.3339 -1399.4092 233.5668 -1394.8775 213.7995 C-1394.0284 220.4191 -1392.9855 226.1594 -1392.6144 231.9427 c-1391.8557 243.7686 -1391.218 255.6129 -1390.993 267.4585 c-1390.8336 275.857 -1384.2143 275.063 -1379.2331 276.1892 C-1374.1592 277.3365 -1372.2358 275.1105 -1370.9171 269.4587 c-1367.2152 253.594 -1362.0715 238.0658 -1357.4966 222.4049 C-1356.6864 222.4374 -1355.8763 222.4698 -1355.0662 222.5024 C-1355.0662 238.094 -1354.569 253.7077 -1355.2623 269.2684 c-1355.6464 277.8871 -1352.1644 280.3261 -1344.4871 279.617 C-1341.8416 279.3727 -1339.1546 279.5782 -1335.0489 279.5782 C-1337.3122 246.3697 -1339.5316 213.8057 -1341.775 180.8897 C-1348.8079 180.1483 -1355.3639 179.4571 -1362.725 178.6812 C-1367.4458 194.7445 -1372.1995 210.9198 -1377.5953 229.2804 C-1378.915 216.495 -1380.8602 205.7202 -1380.9636 194.9279 c-1381.1649 173.9354 -1384.683 174.4106 -1403.5902 175.8564 Cf-1242.5253 286.7003 m-1241.366 287.292 -1241.1432 287.4967 -1240.9074 287.5131 C-1221.3066 288.8787 -1221.3507 288.8663 -1216.398 269.5412 C-1213.2426 257.229 -1209.9637 244.9482 -1206.6388 232.6808 C-1206.3406 231.5803 -1205.2963 230.6822 -1204.5651 229.6429 C-1201.3172 249.6475 -1198.1376 269.2319 -1194.9546 288.8367 C-1187.6173 289.6979 -1180.7488 290.5042 -1173.0967 291.4025 C-1169.5734 258.5824 -1166.1118 226.3368 -1162.5996 193.6198 C-1169.3519 192.746 -1175.3181 191.9739 -1181.61 191.1596 C-1183.1886 209.1829 -1184.6825 226.2388 -1186.1764 243.2948 C-1186.4237 243.3824 -1186.671 243.47 -1186.9182 243.5578 C-1189.1811 232.2557 -1191.4823 220.9612 -1193.6849 209.6474 c-1194.3965 205.9925 -1194.9043 202.2948 -1195.4092 198.6034 c-1196.5959 189.9265 -1204.8927 195.0276 -1208.8013 191.6473 C-1210.3212 193.7134 -1212.5381 195.5656 -1213.2486 197.8802 C-1218.0535 213.532 -1222.5398 229.2816 -1227.7123 246.9965 C-1227.7123 227.0456 -1227.7123 208.9995 -1227.7123 190.4559 C-1234.0186 190.4559 -1239.5334 190.4559 -1245.6577 190.4559 C-1244.6093 222.6702 -1243.5688 254.6388 -1242.5253 286.7003 Cf-1090.5299 295.6706 m-1084.2401 295.6706 -1078.5767 295.6706 -1072.4567 295.6706 C-1064.9879 277.2667 -1057.4669 258.7341 -1049.5096 239.1264 C-1049.5096 258.5403 -1049.5096 276.7569 -1049.5096 295.4243 C-1044.3217 295.4243 -1038.9914 295.4243 -1032.2044 295.4243 C-1032.2044 263.3866 -1032.2044 231.1476 -1032.2044 198.1027 C-1036.5945 198.1027 -1041.8374 197.3639 -1046.7018 198.4009 C-1049.305 198.9557 -1052.1791 202.17 -1053.3482 204.8696 C-1059.8414 219.8633 -1065.8489 235.0674 -1072.3094 250.9021 C-1072.3094 233.0942 -1072.3094 216.1008 -1072.3094 198.5587 C-1077.9618 197.7932 -1083.9427 196.9832 -1090.5299 196.0911 C-1090.5299 229.4905 -1090.5299 262.1817 -1090.5299 295.6706 Cf-719.9966 196.7792 m-726.8273 196.7792 -733.2316 196.7792 -740.9923 196.7792 C-740.3265 210.0899 -739.6755 223.1042 -738.997 236.6679 C-745.0086 236.6679 -750.5246 236.6679 -756.2763 236.6679 C-757.0995 224.0538 -757.9164 211.5382 -758.7626 198.5709 C-765.7776 198.5709 -772.4157 198.5709 -779.1332 198.5709 C-777.6483 230.8535 -776.1727 262.9354 -774.6779 295.4344 C-767.5833 295.4344 -760.9771 295.4344 -753.869 295.4344 C-754.4903 282.5395 -755.0917 270.0578 -755.6493 258.4864 C-754.3334 257.354 -754.1475 257.0514 -753.935 257.0316 C-737.4012 255.4834 -737.4011 255.485 -737.4011 272.1591 c-737.4011 279.1699 -737.4011 286.1808 -737.4011 293.7161 C-730.2874 293.7161 -723.6923 293.7161 -715.9026 293.7161 C-717.2605 261.5626 -718.6094 229.6262 -719.9966 196.7792 Cf*u-1256.1964 233.3623 m-1256.6218 219.8502 -1259.0262 207.6303 -1266.2666 195.7998 C-1273.0433 184.7271 -1300.0685 182.8031 -1308.1162 194.374 C-1319.8628 211.2632 -1322.8654 230.2969 -1319.8821 250.06 c-1318.5766 258.7077 -1315.3967 267.594 -1310.951 275.1216 C-1304.6136 285.8525 -1293.184 288.4162 -1281.8507 285.714 c-1270.2777 282.9545 -1263.6507 273.5506 -1260.7902 262.5008 c-1258.3375 253.0265 -1257.6593 243.0929 -1256.1964 233.3623 Cf1 D-1290.2797 270.7869 m-1293.6464 264.6537 -1296.7498 261.0349 -1297.6899 256.9215 C-1301.0833 242.075 -1299.8902 227.2462 -1294.6684 212.9901 c-1293.4794 209.7441 -1289.7764 207.4189 -1287.2305 204.6699 C-1284.8833 207.3627 -1281.1726 209.7223 -1280.4192 212.8047 c-1276.6684 228.1497 -1277.7605 243.6027 -1282.0885 258.6729 C-1283.1753 262.4574 -1286.6442 265.5578 -1290.2797 270.7869 Cf*U*u0 D-885.5905 296.6652 m-884.4512 297.1586 -884.2084 297.3475 -883.9564 297.361 C-861.9738 298.5323 -861.6798 298.5975 -856.8679 277.2013 C-851.5178 253.4124 -846.7567 229.4907 -841.8097 205.6122 C-841.488 204.0599 -841.7679 202.383 -841.7679 200.4125 C-843.4971 200.1666 -845.0404 199.7845 -846.5911 199.7519 c-862.0205 199.4271 -862.6541 199.3764 -864.2535 214.5113 C-865.1122 222.6368 -870.0622 220.415 -874.5475 220.9536 C-879.6027 221.5606 -881.9479 219.4042 -882.4703 214.4819 C-882.9728 209.7457 -883.8078 205.0448 -884.6392 199.3533 C-891.2802 198.8034 -897.8177 198.2621 -905.841 197.5978 C-898.9084 231.5126 -892.2468 264.1019 -885.5905 296.6652 Cf1 D-868.1242 237.7154 m-869.8701 248.1327 -871.5601 258.2164 -873.649 270.6801 C-874.6576 263.4605 -875.2109 258.5322 -876.0644 253.6564 C-876.9663 248.5041 -878.1543 243.4019 -879.334 237.7154 C-875.3143 237.7154 -871.715 237.7154 -868.1242 237.7154 Cf*U0 D-600.8911 250.3163 m-600.8911 244.1338 -600.8911 238.8117 -600.8911 232.6121 C-608.0174 232.6121 -615.1739 232.6121 -622.8189 232.6121 C-622.8189 224.6017 -622.8189 217.4584 -622.8189 210.1226 C-614.9874 209.2006 -607.3612 208.3028 -598.6288 207.2747 C-599.1232 201.6924 -599.6075 196.2236 -600.1881 189.6673 C-615.8058 190.4783 -630.735 191.2535 -645.4933 192.02 C-644.0147 224.2656 -642.5521 256.1617 -641.0835 288.1892 C-626.6584 288.1892 -612.3589 288.1892 -597.6515 288.1892 C-597.6515 281.7045 -597.6515 276.3695 -597.6515 270.4154 C-605.407 270.4154 -613.2689 270.4154 -621.3802 270.4154 C-621.3802 264.022 -621.3802 257.6056 -621.3802 250.3163 C-614.4938 250.3163 -607.8632 250.3163 -600.8911 250.3163 Cf-1153.3254 292.0095 m-1137.9884 292.861 -1124.066 293.6339 -1109.5465 294.44 C-1109.5465 288.3078 -1109.5465 282.7823 -1109.5465 276.6402 C-1116.5845 275.7625 -1123.6685 274.8791 -1130.8048 273.9893 C-1134.4367 256.348 -1134.242 256.1641 -1110.2843 254.8443 C-1105.9051 239.1082 -1107.0529 238.0014 -1130.4213 236.8827 C-1129.8128 229.0615 -1129.2067 221.2723 -1128.6185 213.7117 C-1120.2388 213.7117 -1112.6271 213.7117 -1104.5503 213.7117 C-1104.5503 208.2136 -1104.5503 202.6845 -1104.5503 195.9922 C-1119.5564 195.9922 -1134.219 195.9922 -1149.1501 195.9922 C-1150.5228 227.5597 -1151.9126 259.5196 -1153.3254 292.0095 Cf-434.9371 177.894 m-433.9897 183.3709 -433.0745 187.2009 -432.7139 191.0823 C-432.1448 197.205 -428.8932 196.9814 -424.2079 195.6028 c-419.9163 194.34 -415.2545 193.0293 -410.9591 193.5196 C-407.8009 193.88 -403.5227 196.5145 -402.3998 199.2329 C-401.272 201.9632 -402.3531 206.9469 -404.3624 209.3715 C-409.6036 215.6961 -416.638 220.588 -421.5759 227.0987 c-429.5795 237.6516 -429.9594 252.7363 -423.7335 261.549 C-416.9409 271.1636 -402.8586 275.7853 -389.6409 272.7377 C-376.6284 269.7375 -376.574 269.5656 -383.401 251.6158 C-386.3621 252.295 -389.6887 252.4405 -392.4027 253.8048 C-398.7151 256.9777 -403.8706 254.1088 -405.8581 249.2519 c-407.1151 246.1799 -404.6806 240.3673 -402.1219 237.2404 C-397.8349 232.0016 -391.7061 228.3101 -387.1058 223.2785 C-378.303 213.6503 -378.4802 202.4194 -383.3949 191.1618 C-388.2916 179.9454 -397.316 174.5984 -409.5342 175.3411 C-417.6586 175.8349 -425.7454 176.9467 -434.9371 177.894 Cf-984.8252 217.5426 m-976.9647 217.5426 -970.3196 216.4443 -964.2214 217.8025 c-955.2921 219.7912 -953.4412 227.2576 -959.8955 233.7932 c-963.9714 237.9204 -968.7957 241.5383 -973.8249 244.4513 C-989.3059 253.418 -991.7437 280.2551 -978.0779 290.9053 C-971.1783 296.2824 -952.0724 300.8776 -944.6538 296.4534 c-942.3069 295.0537 -941.6225 289.883 -941.3304 286.3428 C-941.1099 283.6711 -942.726 280.8479 -943.5631 277.9596 C-948.1612 278.5307 -952.653 280.2124 -956.4762 279.2469 c-960.2937 278.2827 -964.8771 275.3127 -966.372 271.9853 c-967.3469 269.8156 -964.1484 264.629 -961.5147 262.2208 c-956.2548 257.4114 -949.8419 253.8876 -944.3666 249.284 C-934.3126 240.8308 -934.3171 228.911 -937.1654 218.0997 C-940.2463 206.4056 -950.3437 200.3633 -962.1036 198.235 c-966.3049 197.4746 -970.7834 197.8084 -975.0923 198.1645 C-986.2435 199.086 -989.2044 203.7377 -985.8415 214.5392 C-985.3772 216.0308 -984.8399 217.4996 -984.8252 217.5426 Cf-441.1596 196.1612 m-441.1596 190.3418 -441.1596 185.0137 -441.1596 179.6898 C-471.1744 172.7676 -489.2813 190.2866 -489.7783 217.554 C-490.0766 233.9151 -488.0351 249.2247 -478.4675 263.2709 C-471.6924 273.2178 -452.2344 282.1396 -436.2817 275.548 C-434.6359 274.868 -432.6801 271.9823 -432.8759 270.3628 C-433.4321 265.7617 -435.0282 261.2864 -436.1962 256.8322 C-454.9216 260.4829 -465.3441 252.6394 -466.7822 234.252 C-467.3115 227.4861 -467.9037 220.4597 -466.6945 213.8779 C-464.0954 199.7295 -459.7697 197.076 -441.1596 196.1612 Cf-555.609 188.638 m-562.3203 188.638 -568.728 188.638 -576.5502 188.638 C-574.2639 215.0672 -572.014 241.0744 -569.693 267.9027 C-574.8197 267.9027 -579.8325 267.9027 -585.3379 267.9027 C-585.3379 274.7761 -585.3379 280.8376 -585.3379 288.1731 C-567.1959 286.7366 -549.3873 285.3266 -530.1711 283.8052 C-530.8251 277.7432 -531.4871 271.6061 -532.0835 266.0778 C-533.1146 265.3955 -533.3504 265.1022 -533.5639 265.1176 C-562.9346 267.2493 -547.5685 243.9034 -550.973 232.4318 C-555.0046 218.8466 -554.2285 203.8346 -555.609 188.638 Cf-786.9536 275.9509 m-792.1728 276.5281 -796.8851 277.0491 -803.1445 277.7413 C-804.2484 251.4671 -805.3508 225.2297 -806.489 198.138 C-813.0153 198.8266 -819.5048 199.5114 -827.3425 200.3384 C-826.2138 225.8757 -825.0803 251.521 -823.9514 277.061 C-829.5994 278.0561 -834.7106 278.9566 -839.6917 279.8343 C-839.6917 286.0587 -839.6917 291.3846 -839.6917 296.3712 C-821.3601 296.3712 -803.4279 296.3712 -784.749 296.3712 C-785.52 289.2293 -786.1636 283.2686 -786.9536 275.9509 Cf-702.5352 195.3002 m-701.0465 227.64 -699.5764 259.5773 -698.0812 292.059 C-691.2323 292.059 -684.629 292.059 -677.337 292.059 C-678.0496 275.9354 -678.8046 259.9155 -679.448 243.891 C-679.8269 234.4562 -680.3763 224.9994 -679.971 215.5904 C-679.9028 214.0073 -675.4836 211.6678 -672.8653 211.337 C-667.5695 210.6683 -662.13 211.1376 -655.5899 211.1376 C-656.3991 204.9274 -657.1043 199.5161 -657.9598 192.9502 C-672.9857 193.7424 -687.9182 194.5296 -702.5352 195.3002 Cf-519.9415 283.2659 m-513.1298 282.4336 -506.8097 281.6613 -499.0567 280.714 C-501.8446 248.5882 -504.6296 216.497 -507.5306 183.0694 C-514.3027 183.814 -520.4631 184.4913 -528.0053 185.3206 C-525.3181 217.9599 -522.6872 249.9152 -519.9415 283.2659 Cf-1009.3346 258.7524 m-1013.9388 258.7524 -1017.1268 258.7524 -1021.2659 258.7524 C-1019.4199 267.1969 -1017.6821 275.1108 -1015.9604 283.0282 C-1012.8607 297.2828 -1012.8648 297.2837 -994.7782 294.8295 C-999.7719 282.453 -1004.5549 270.5986 -1009.3346 258.7524 Cf*u-828.8066 1017.4022 m-827.0411 1007.3655 -829.7399 996.7924 -837.7395 989.4434 c-844.148 983.5561 -852.6419 978.0624 -860.9744 976.5192 c-881.1167 972.789 -900.5281 975.5321 -915.5034 991.9256 C-929.4878 1007.2343 -929.2794 1034.8486 -920.4138 1048.1731 c-902.6046 1074.9394 -866.4906 1071.0092 -848.4401 1058.9149 c-834.0022 1049.2412 -827.452 1035.809 -828.8066 1017.4022 Cf1 D-900.3586 1020.8481 m-898.5999 1015.573 -897.0283 1008.5698 -894.009 1002.2592 C-886.7272 987.0398 -868.7718 985.6973 -860.1246 999.8235 c-852.4169 1012.4149 -852.7443 1026.142 -858.832 1039.1365 c-862.7592 1047.5195 -869.3476 1054.0928 -880.0525 1052.8087 c-890.7172 1051.5294 -896.0704 1044.8216 -897.7712 1034.6369 c-898.4299 1030.6923 -899.2408 1026.7732 -900.3586 1020.8481 Cf*U0 D-750.2678 1004.0265 m-749.4485 1020.9772 -744.7663 1038.1737 -758.9176 1052.5739 C-758.1202 1052.8719 -757.3227 1053.17 -756.5254 1053.468 C-748.1716 1052.0566 -739.8487 1050.4076 -731.4535 1049.3138 c-725.4353 1048.5297 -724.0461 1046.0929 -728.7634 1042.2007 c-733.5345 1038.2642 -734.3114 1033.6238 -734.2355 1027.928 c-733.9859 1009.1992 -733.989 990.4627 -734.27 971.7347 c-734.3265 967.9685 -731.5135 962.1439 -738.0826 961.0061 C-744.2198 959.9432 -748.7385 962.2774 -752.6287 968.0894 C-765.0299 986.6163 -778.3427 1004.531 -791.1649 1022.7797 c-794.347 1027.3085 -797.0055 1032.2053 -800.8775 1038.5194 C-800.8775 1019.9539 -801.4032 1003.1551 -800.5179 986.4309 C-800.2889 982.1036 -795.6232 978.0189 -793.0257 973.8042 C-792.2885 972.6082 -791.6577 971.3468 -790.1223 968.5648 C-802.9447 970.8287 -814.1844 972.8132 -825.4241 974.7977 C-825.8354 975.4866 -826.2466 976.1755 -826.6579 976.8645 C-813.857 984.2975 -817.336 996.0478 -817.173 1006.7658 c-817.0079 1017.6226 -817.214 1028.4845 -817.1068 1039.3427 c-817.045 1045.5993 -817.4848 1051.4062 -822.7461 1056.0341 C-824.0591 1057.1891 -823.5168 1060.4534 -824.0516 1064.4069 C-809.8784 1059.8729 -794.1953 1064.5293 -783.4481 1053.4227 C-775.8289 1045.5487 -770.3884 1035.5253 -764.232 1026.2904 C-759.3745 1019.0042 -754.9079 1011.4575 -750.2678 1004.0265 Cf-1016.0948 1039.3138 m-1030.1504 1048.6606 -1043.1322 1041.6406 -1056.6051 1040.415 C-1056.6051 1033.301 -1056.6051 1026.6469 -1056.6051 1019.469 C-1049.0447 1019.7886 -1041.7497 1018.8786 -1036.822 1026.1221 C-1036.5579 1026.5103 -1031.1944 1024.7526 -1031.091 1023.7082 c-1030.5058 1017.7961 -1030.4276 1011.7554 -1031.0808 1005.8587 c-1031.2295 1004.5167 -1034.8542 1003.2602 -1037.0684 1002.5897 c-1037.993 1002.3097 -1039.3645 1003.7915 -1040.614 1004.2518 c-1051.1901 1008.1479 -1057.031 1004.1864 -1057.0354 993.161 c-1057.0369 989.1385 -1057.0356 985.116 -1057.0356 980.4378 C-1047.8752 981.7185 -1039.4374 982.5903 -1031.1616 984.2632 c-1028.988 984.7026 -1027.4531 987.8067 -1025.3798 989.3599 c-1022.733 991.3427 -1019.8376 992.9935 -1017.0493 994.7875 C-1016.1845 992.1629 -1014.7816 989.5809 -1014.5704 986.9048 c-1014.1706 981.8378 -1014.4548 976.7169 -1014.4548 971.3384 C-1039.6782 967.4984 -1064.1674 963.7702 -1088.6567 960.042 C-1089.1941 960.7783 -1089.7315 961.5145 -1090.2689 962.2508 C-1088.8831 965.0073 -1087.2895 967.6822 -1086.1658 970.5417 c-1084.8567 973.8728 -1083.0932 977.3492 -1083.0286 980.7908 C-1082.7079 997.881 -1082.6781 1014.9852 -1083.0723 1032.0724 C-1083.1422 1035.1004 -1085.6439 1038.1013 -1087.135 1041.0579 c-1088.2885 1043.3451 -1091.0427 1046.0216 -1090.4945 1047.6562 c-1089.8633 1049.5382 -1086.5203 1051.26 -1084.117 1051.6759 c-1069.6007 1054.1877 -1055.0131 1056.2858 -1040.4561 1058.5655 c-1034.6555 1059.4738 -1028.8681 1060.4691 -1023.0823 1061.4689 c-1019.0123 1062.1722 -1016.006 1061.5657 -1016.0788 1056.4461 c-1016.1517 1051.327 -1016.0948 1046.2061 -1016.0948 1039.3138 Cf-999.8624 973.3075 m-991.0996 1004.1686 -987.6944 1033.475 -1001.9161 1063.2237 C-988.5813 1064.0246 -975.9897 1064.7808 -961.0797 1065.6762 C-962.9231 1061.3961 -964.0686 1058.646 -965.2889 1055.9294 c-966.435 1053.378 -968.654 1050.8771 -968.6925 1048.3281 C-968.9827 1029.1314 -968.8507 1009.9282 -968.8507 990.2573 C-961.0968 990.2573 -953.4477 988.4836 -947.3075 990.7671 c-941.4242 992.955 -937.1074 999.355 -932.1022 1003.9038 C-931.3569 1003.5675 -930.6116 1003.2313 -929.8663 1002.8951 C-929.8663 995.7837 -929.176 988.5629 -930.2759 981.6259 C-930.6174 979.4719 -935.7219 976.7808 -938.8032 976.5632 C-958.7786 975.1525 -978.7974 974.3572 -999.8624 973.3075 Cf*u-664.0632 945.5817 m-664.0569 960.4823 -653.0607 973.8043 -640.7378 973.8407 c-630.4627 973.8711 -624.607 967.8102 -624.9523 957.502 c-625.3536 945.5196 -637.6912 930.3411 -647.4366 929.8403 c-659.1685 929.2374 -664.0682 933.8762 -664.0632 945.5817 Cf1 D-639.6193 965.8832 m-654.6512 952.9352 -657.7713 945.3827 -651.3354 938.1564 C-639.2336 943.8034 -632.4009 959.2216 -639.6193 965.8832 Cf*U*u0 D-1194.332 928.7571 m-1203.116 919.9407 -1212.4233 919.2479 -1219.2998 926.8986 c-1225.489 933.7845 -1224.4229 945.3921 -1217.0627 951.2569 c-1211.1402 955.976 -1198.7777 955.1479 -1193.2512 949.6618 c-1183.668 940.1484 -1181.7388 924.4431 -1189.0231 913.1467 c-1190.248 911.2471 -1192.3469 909.5299 -1194.4302 908.6791 c-1196.275 907.9257 -1198.6603 908.496 -1200.8071 908.4819 C-1200.6516 910.9293 -1201.232 913.7663 -1200.1859 915.7421 c-1198.0682 919.7416 -1195.0688 923.2741 -1192.4329 926.9992 C-1193.0659 927.5852 -1193.6989 928.1711 -1194.332 928.7571 Cf1 D-1197.5868 937.9884 m-1202.093 941.4755 -1204.7805 944.1877 -1208.0321 945.6105 c-1208.8096 945.9507 -1213.3538 941.1468 -1212.9146 940.1691 c-1211.4599 936.9305 -1208.8508 933.8786 -1205.9217 931.8649 c-1205.1781 931.3537 -1201.6042 934.9595 -1197.5868 937.9884 Cf*U0 D-702.1764 958.0619 m-698.5907 960.6835 -696.4655 962.9668 -693.8474 963.9967 c-688.7105 966.0174 -682.8586 966.551 -678.1331 969.1884 c-673.9527 971.5215 -670.9 975.8754 -667.3495 979.3371 C-670.9726 982.0019 -674.5956 984.6667 -679.8982 988.5669 C-680.9757 995.0174 -680.117 995.4318 -671.3923 993.881 C-663.0928 992.4058 -657.3066 988.7844 -656.0113 980.2099 c-654.8999 972.8528 -660.6235 964.9937 -669.2294 961.4834 C-672.5307 960.1369 -676.0907 959.4245 -679.5685 958.4128 C-668.4343 948.861 -668.4343 948.861 -672.4647 942.184 C-681.44 946.9804 -690.4725 951.8074 -702.1764 958.0619 Cf-623.966 920.2586 m-620.6207 917.6641 -617.1384 914.9631 -613.4722 912.1197 C-614.7982 906.0644 -616.7782 902.3944 -623.4361 907.749 C-628.372 911.7186 -634.0596 914.7752 -638.8515 918.8914 C-640.7065 920.485 -641.0164 923.8772 -642.429 927.4616 C-633.7331 928.9332 -626.0085 929.3768 -618.9325 931.7523 c-614.4814 933.2466 -611.0023 937.6365 -607.0873 940.7275 C-610.7208 943.7063 -614.3544 946.6852 -617.9879 949.6641 C-621.1531 953.8333 -619.0651 956.1715 -613.2313 955.9473 c-606.3438 955.6826 -598.7836 950.3938 -597.3702 944.5527 c-595.078 935.0796 -597.4049 929.2272 -606.1159 925.4863 c-611.617 923.124 -617.6711 922.0497 -623.966 920.2586 Cf-1173.5637 926.812 m-1174.9853 939.8838 -1176.3314 952.2616 -1177.7406 965.2198 C-1181.5892 962.9321 -1184.7674 960.2699 -1188.4215 959.1196 c-1191.2543 958.2279 -1194.6818 959.2258 -1197.845 959.3837 C-1196.5151 961.7275 -1195.7315 964.811 -1193.7509 966.2739 c-1188.2298 970.3521 -1182.2285 973.7843 -1176.3853 977.421 c-1172.1537 980.0547 -1169.9049 978.6972 -1169.2745 973.8724 C-1167.6907 961.7514 -1165.8753 949.6585 -1164.4634 937.5182 c-1163.7374 931.2756 -1164.7991 925.8877 -1173.5637 926.812 Cf-1238.4927 913.6761 m-1243.1915 912.6001 -1245.637 912.0401 -1248.0824 911.4801 C-1248.4825 914.0883 -1249.3187 916.7247 -1249.1525 919.2963 c-1249.0045 921.5885 -1248.1625 924.0836 -1246.8921 926.0028 c-1244.4111 929.7506 -1240.7617 932.1534 -1236.9524 928.0642 c-1228.5828 919.0796 -1220.4081 909.8831 -1212.7591 900.2905 C-1211.6348 898.8807 -1213.8203 894.8316 -1214.4744 892.0037 C-1217.1313 892.7744 -1220.6729 892.7228 -1222.2886 894.4612 C-1228.5711 901.2204 -1234.242 908.5479 -1238.4927 913.6761 Cf-583.3741 922.4656 m-586.6067 923.1651 -588.6021 923.5969 -592.8464 924.5152 C-589.7976 927.5699 -587.3802 931.4472 -586.0113 931.1069 c-580.6228 929.7672 -575.5638 927.1011 -570.3825 924.9273 C-571.6153 922.062 -572.3036 918.7619 -574.1809 916.4113 C-580.329 908.7128 -586.7214 901.1834 -593.4552 893.9971 C-595.1488 892.1898 -598.6828 890.7639 -600.9932 891.1937 c-604.4389 891.8346 -607.492 893.9436 -603.5291 898.406 C-596.8503 905.9267 -590.5822 913.8123 -583.3741 922.4656 Cf-1135.7693 949.7033 m-1138.5221 954.557 -1141.0691 958.8999 -1143.4699 963.3221 c-1145.877 967.7561 -1148.1384 972.2692 -1149.7119 975.2999 C-1154.0538 975.6596 -1159.9179 975.144 -1160.2932 976.3444 C-1162.244 982.5844 -1157.6902 986.6539 -1153.1809 989.9893 c-1149.7225 992.5474 -1146.7942 992.5869 -1144.3429 987.6827 C-1139.2472 977.4878 -1133.1526 967.7956 -1127.9388 957.655 C-1124.912 951.7681 -1127.2868 949.5131 -1135.7693 949.7033 Cf-1141.6934 49.9814 m-1145.4248 41.6777 -1148.0413 35.0184 -1151.4269 28.7761 c-1152.6077 26.599 -1155.6868 25.4514 -1157.899 23.8337 C-1158.8351 26.8183 -1161.2091 30.2565 -1160.4374 32.7022 c-1158.1369 39.993 -1154.5632 46.8781 -1151.5661 53.955 c-1150.2234 57.1255 -1149.6132 60.7683 -1147.6639 63.4704 c-1145.9892 65.7919 -1142.8568 68.5319 -1140.415 68.4887 c-1136.6509 68.4222 -1133.3788 66.7141 -1133.1611 61.0144 C-1132.8083 51.7836 -1130.7741 42.6171 -1129.368 32.8545 C-1126.7593 39.4602 -1124.7618 46.0267 -1121.5587 51.9401 C-1120.1346 54.569 -1116.2787 55.8806 -1113.5265 57.7902 C-1113.0289 54.8108 -1111.3817 51.4433 -1112.2339 48.9198 C-1115.7888 38.3928 -1119.897 28.0346 -1124.2814 17.82 C-1125.2406 15.5851 -1129.0897 12.3056 -1130.0188 12.7595 C-1133.1546 14.2918 -1137.3449 16.9185 -1137.944 19.7916 c-1139.8911 29.1293 -1140.4238 38.7619 -1141.6934 49.9814 Cf*u-957.3701 -4.47933 m-957.807 2.75863 -956.684 9.31015 -950.8499 15.0633 C-943.2765 22.5316 -934.6416 21.5746 -926.1747 19.1304 C-917.5109 16.6292 -913.843 9.33433 -913.3313 -0.659172 C-912.7546 -11.9223 -915.4433 -21.5216 -926.3066 -26.5858 C-940.3007 -33.1098 -961.3663 -22.1606 -957.3701 -4.47933 Cf1 D-924.8192 -3.48612 m-924.7867 5.85972 -928.758 12.0165 -934.9983 12.295 c-941.3696 12.5793 -947.416 4.54602 -947.626 -4.48232 c-947.7942 -11.7132 -942.373 -18.5748 -936.4268 -18.6574 C-929.2737 -18.7566 -924.8523 -12.9778 -924.8192 -3.48612 Cf*U0 D-765.4516 40.0066 m-765.4516 36.5754 -765.4516 33.9519 -765.4516 30.2976 C-774.0386 31.1347 -782.5728 30.0452 -786.9829 21.7075 c-788.6633 18.5306 -788.3678 13.6071 -787.4149 9.87743 C-785.0414 0.585402 -776.5768 -2.23508 -765.381 1.91383 C-766.054 4.65762 -766.7291 7.40967 -767.4814 10.4762 C-770.1979 10.6094 -772.8494 10.7394 -776.0734 10.8975 C-776.1952 13.3694 -776.3073 15.6461 -776.4181 17.8952 C-773.1949 18.8219 -770.4427 19.682 -767.653 20.3947 C-765.1032 21.0463 -762.5125 21.5382 -759.4412 22.2094 C-758.0301 16.4014 -757.4163 10.4794 -755.1377 5.28817 C-751.6816 -2.58542 -755.821 -5.10709 -762.0237 -7.2098 C-771.8895 -10.5542 -781.7172 -12.4199 -790.6669 -5.2184 C-798.8653 1.37848 -801.494 12.5766 -797.9128 23.1699 C-794.9907 31.8136 -784.0383 39.4514 -773.6862 39.9878 C-771.2567 40.1139 -768.815 40.0066 -765.4516 40.0066 Cf*u-1026.7449 2.58058 m-1027.7478 -3.52462 -1028.6499 -9.01578 -1029.5814 -14.6862 C-1036.9015 -16.9769 -1039.9755 -14.05 -1038.8376 -6.87319 c-1036.8108 5.90916 -1034.4087 18.6319 -1031.8632 33.0854 C-1023.7833 31.4265 -1016.0691 30.7256 -1009.0275 28.1706 C-1000.4706 25.0659 -997.9357 15.1785 -1004.4254 8.80375 C-1010.0518 3.27737 -1008.0754 -2.22036 -1007.5475 -8.06574 C-1007.1958 -11.9595 -1006.5222 -15.824 -1005.9373 -20.1078 C-1014.6967 -19.9566 -1018.9406 -17.1175 -1017.8027 -8.52559 c-1017.0056 -2.50723 -1019.266 1.87603 -1026.7449 2.58058 Cf1 D-1024.5936 11.6806 m-1023.7267 10.8595 -1022.8599 10.0384 -1021.993 9.21725 C-1018.945 11.176 -1014.0027 12.5679 -1013.214 15.203 c-1011.0804 22.3316 -1018.1039 21.3269 -1022.3728 23.2137 C-1023.1408 19.2257 -1023.8672 15.4532 -1024.5936 11.6806 Cf*U0 D-685.3858 18.9385 m-691.8074 15.8449 -696.2552 12.232 -700.7473 19.8481 C-701.9626 21.9083 -706.6723 23.1899 -709.4348 22.7367 C-713.0507 22.1432 -717.1273 20.4308 -716.2972 14.791 C-715.3823 8.57676 -716.0969 3.07376 -725.6491 4.5497 C-726.4656 20.655 -727.2912 36.9394 -728.1179 53.2448 C-720.2988 57.3766 -715.0215 57.6176 -709.6672 49.4215 C-702.7594 38.8473 -693.9506 29.5151 -685.3858 18.9385 Cf-635.7623 75.058 m-628.9742 60.7194 -644.2101 64.394 -646.9324 57.8675 C-645.7877 55.7331 -644.1782 52.7322 -642.6144 49.8166 C-623.751 56.9596 -623.751 56.9596 -621.8429 49.3579 C-628.9805 45.3541 -635.9814 41.0051 -643.4127 37.5937 C-645.007 36.8617 -649.3353 38.8547 -650.3988 40.7298 C-656.5584 51.589 -662.3041 62.6999 -667.6644 73.9755 c-668.4101 75.5441 -666.9408 79.444 -665.3107 80.6186 C-660.8119 83.8606 -655.6464 86.1644 -650.8153 88.9612 C-644.7504 92.4723 -642.0265 90.1111 -641.1572 83.3189 C-645.8656 80.5348 -650.6135 77.7273 -655.3594 74.9212 C-654.272 72.716 -653.1088 70.3571 -651.7409 67.5831 C-646.6105 69.9831 -641.6518 72.3029 -635.7623 75.058 Cf-1057.6021 28.9247 m-1058.6229 25.4788 -1059.4333 22.7431 -1060.2483 19.9923 C-1054.4373 18.2333 -1049.0257 16.5953 -1043.0556 14.7881 C-1047.7815 0.996116 -1056.2519 12.264 -1062.6314 10.2336 C-1063.3899 7.24445 -1064.2215 3.9669 -1065.156 0.284305 C-1059.0996 -1.35546 -1053.3148 -2.92173 -1047.2567 -4.56199 C-1047.1288 -12.8699 -1052.1241 -13.0869 -1057.8262 -11.6164 C-1063.9218 -10.0444 -1069.9055 -8.03779 -1077.6624 -5.70143 C-1073.9375 9.27822 -1070.1914 24.3436 -1066.0938 40.822 C-1057.5702 38.4123 -1049.4895 36.3183 -1041.5832 33.6982 C-1040.3214 33.2801 -1038.7153 29.7831 -1039.2366 28.9672 c-1040.2937 27.3129 -1042.8134 25.413 -1044.5242 25.5912 c-1048.6664 26.0226 -1052.6905 27.5879 -1057.6021 28.9247 Cf-819.8981 -9.62504 m-813.707 -8.7301 -807.9584 -7.89913 -801.8264 -7.01275 C-800.1914 -13.3031 -800.3861 -17 -808.3052 -17.2417 C-815.3298 -17.4561 -822.3007 -19.4324 -829.9242 -20.7388 C-832.5605 -4.66166 -835.0418 10.4712 -837.6693 26.4947 C-827.8173 28.0499 -819.0382 29.4358 -810.274 30.8193 C-808.753 21.825 -809.1292 21.1804 -818.0144 20.5421 c-822.1117 20.2477 -826.1867 20.3188 -825.2665 14.6731 C-824.3462 9.02597 -819.9023 10.6973 -816.285 11.1476 C-814.1916 11.4083 -811.9599 12.5376 -810.0965 12.0662 C-808.4718 11.6555 -806.3613 9.67252 -806.1561 8.1556 c-805.9625 6.72492 -807.6889 4.63395 -809.108 3.51471 c-810.2135 2.64285 -812.1326 2.70154 -813.7098 2.54557 c-822.8258 1.64417 -824.0456 -0.59372 -819.8981 -9.62504 Cf-957.4873 15.0715 m-966.0125 14.3663 -972.4544 14.8676 -978.1874 13.0869 C-984.7623 11.0446 -988.6708 1.17984 -986.5286 -5.72351 c-984.3566 -12.7227 -979.2666 -16.0224 -971.7981 -15.4279 C-969.9154 -15.2781 -967.5472 -14.7724 -966.2237 -15.6581 C-964.5089 -16.8054 -962.8771 -19.096 -962.6471 -21.0624 c-962.5078 -22.2534 -964.9818 -24.8118 -966.4643 -24.9628 c-978.4441 -26.1829 -992.6943 -24.2511 -997.2671 -7.41978 C-1000.0306 2.75177 -995.6776 18.9856 -982.2902 22.259 C-976.2093 23.7458 -969.5306 23.6801 -963.2656 23.0018 C-961.272 22.786 -959.738 18.3228 -957.4873 15.0715 Cf-1097.4551 40.7172 m-1100.8397 41.8826 -1103.8024 42.9029 -1107.0435 44.019 C-1107.0435 46.6141 -1107.0435 49.2578 -1107.0435 53.8934 C-1094.8965 50.0469 -1083.3278 46.3836 -1071.3079 42.5773 C-1072.1563 39.448 -1072.8942 36.7264 -1073.8502 33.2004 C-1078.0576 34.4613 -1082.0008 35.6431 -1086.8975 37.1106 C-1090.7545 25.0073 -1094.5557 13.0796 -1098.4916 0.72864 C-1101.4462 1.55564 -1104.1557 2.3139 -1108.7074 3.58792 C-1104.9818 15.8813 -1101.3379 27.9053 -1097.4551 40.7172 Cf-691.1189 57.7398 m-703.4734 52.7777 -703.5386 52.7922 -706.4988 61.6094 C-695.8673 66.4475 -685.1755 71.313 -674.5964 76.1272 C-669.2228 69.7251 -669.2228 69.7251 -680.528 61.7816 C-676.6804 52.8181 -672.7747 43.6796 -668.833 34.5565 c-667.2306 30.8476 -665.1593 27.2386 -670.505 24.5634 c-676.1434 21.7419 -677.0355 26.6485 -678.4608 29.6112 C-682.9175 38.8752 -686.934 48.3509 -691.1189 57.7398 Cf-867.4971 -25.6403 m-868.9663 -9.26217 -870.3215 5.8453 -871.7314 21.5626 C-867.7165 21.5626 -864.9205 21.5626 -861.7749 21.5626 C-860.3694 9.59494 -858.9735 -2.28969 -857.4418 -15.3314 C-851.4788 -14.8236 -845.3548 -14.302 -838.8133 -13.745 C-838.8133 -17.163 -838.8133 -19.7946 -838.8133 -22.9838 C-847.9524 -23.8302 -857.198 -24.6865 -867.4971 -25.6403 Cf-906.8116 20.1613 m-902.8019 20.1613 -899.6504 20.1613 -895.4831 20.1613 C-895.4831 9.56032 -895.351 -0.889147 -895.534 -11.3331 C-895.6389 -17.3178 -893.833 -19.9301 -887.3811 -17.9637 C-884.1461 -16.9779 -880.5556 -17.1586 -876.5124 -16.7497 C-876.5124 -20.1679 -876.5124 -22.9845 -876.5124 -26.3096 C-885.6469 -26.3096 -894.96 -26.3096 -904.6693 -26.3096 C-905.3722 -11.0626 -906.0712 4.0988 -906.8116 20.1613 Cf-1152.0968 73.4287 m-1158.3731 60.6401 -1164.5103 47.779 -1171.1083 35.1585 C-1171.898 33.6482 -1175.7029 32.2897 -1177.1914 32.9457 c-1178.8877 33.6933 -1181.0138 37.3973 -1180.4399 38.7516 C-1175.1891 51.1434 -1169.7122 63.4743 -1163.3988 75.3427 C-1162.4779 77.0737 -1156.8026 76.2756 -1153.3273 76.6478 C-1152.9171 75.5748 -1152.5069 74.5017 -1152.0968 73.4287 Cf-757.0958 43.9488 m-749.4855 46.5215 -745.7989 44.1288 -743.9751 37.252 C-741.331 27.2814 -738.1329 17.4539 -735.0194 7.61339 C-733.8603 3.94979 -733.0157 0.399791 -737.9911 -0.573627 C-742.002 -1.35845 -744.6198 -0.559403 -745.8277 4.80713 C-748.3206 15.8815 -752.282 26.6235 -755.5807 37.5199 C-756.2319 39.6711 -756.6204 41.9018 -757.0958 43.9488 Cf*u-571.558 574.441 m-570.8852 564.5128 -569.2814 554.5442 -569.7103 544.6637 c-571.1253 512.0593 -571.0901 479.2386 -579.3812 447.3376 C-585.5147 423.7376 -593.9437 400.8368 -611.0473 382.9187 C-621.5662 371.8987 -634.6886 364.6197 -651.1879 364.0795 C-670.2351 363.456 -687.5329 366.4407 -701.2706 380.6363 C-706.5923 386.1355 -712.2866 391.7225 -715.9369 398.3083 C-727.585 419.3235 -736.6452 441.4478 -738.9979 465.6811 c-740.8871 485.1408 -742.9588 504.6207 -743.7387 524.14 C-744.5531 544.5276 -745.0699 565.0523 -743.6711 585.3762 C-741.0609 623.3047 -734.3092 660.1982 -713.1737 693.224 C-693.1667 724.4865 -653.7698 731.1941 -624.4412 715.0225 C-612.9761 708.7007 -604.8615 698.7604 -598.4383 687.497 C-584.8028 663.5867 -576.7847 637.9264 -574.3552 610.469 C-573.2944 598.4789 -571.6256 586.5426 -570.2328 574.5818 C-570.6745 574.5349 -571.1163 574.488 -571.558 574.441 Cf1 D-730.6508 543.7666 m-729.1052 522.5763 -727.7984 501.3651 -725.9568 480.2006 C-723.3014 449.6839 -713.6168 421.7574 -695.1364 396.9513 C-684.7972 383.0728 -662.4457 375.4477 -645.67 380.0357 C-625.2759 385.613 -615.0012 401.3901 -606.2606 418.2897 C-592.5763 444.7469 -587.08 473.8273 -586.3149 503.0382 C-585.405 537.7799 -583.8342 572.6557 -588.8334 607.4483 C-593.021 636.5911 -600.4567 663.9793 -618.2277 688.0626 C-637.4963 714.1755 -673.8639 715.7003 -695.0537 690.7674 C-708.3121 675.1669 -716.0728 656.3022 -720.9719 636.5855 C-728.5284 606.173 -730.5756 575.1398 -730.6508 543.7666 Cf*U0 D-658.5927 585.5738 m-652.6808 585.5738 -647.3527 585.5738 -641.4283 585.5738 C-641.4283 575.5233 -641.4283 565.8443 -641.4283 555.5896 C-636.9605 555.5896 -633.0815 555.5896 -628.2976 555.5896 C-628.2976 565.4235 -628.2976 575.3169 -628.2976 585.5757 C-622.649 585.5757 -617.8609 585.5757 -612.4902 585.5757 C-612.4902 559.9713 -612.4902 534.3512 -612.4902 508.2336 C-617.4711 508.2336 -622.4405 508.2336 -628.027 508.2336 C-628.027 518.7179 -628.027 528.9427 -628.027 539.7443 C-632.4957 539.7443 -636.3804 539.7443 -641.1585 539.7443 C-641.1585 529.3737 -641.1585 518.9408 -641.1585 508.1356 C-647.3497 508.1356 -652.6782 508.1356 -658.5927 508.1356 C-658.5927 533.7417 -658.5927 559.3578 -658.5927 585.5738 Cf-675.2094 508.0998 m-681.9143 508.0998 -687.2341 508.0998 -693.3755 508.0998 C-693.3755 529.1545 -693.3755 549.8678 -693.3755 571.1216 C-697.8878 571.1216 -701.5937 571.1216 -705.8637 571.1216 C-705.8637 576.0947 -705.8637 580.5283 -705.8637 585.4722 C-691.6972 585.4722 -677.5015 585.4722 -662.8681 585.4722 C-662.8681 581.0517 -662.8681 576.8147 -662.8681 571.7271 C-666.5652 571.4922 -670.4776 571.2436 -675.2094 570.943 C-675.2094 550.1928 -675.2094 529.4764 -675.2094 508.0998 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF