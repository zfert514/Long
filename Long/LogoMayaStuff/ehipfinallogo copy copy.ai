%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (ehipfinallogo copy copy.ai)%%CreationDate: 4/21/22 1:50 PM%%Canvassize: 16383%%BoundingBox: -158 70 621 771%%HiResBoundingBox: -157.0533 70.9852 620.7288 770.9046%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3898 298.5 420.3898%AI3_TileBox: 9.63779 64.9449 585.6378 798.9449%AI3_DocumentPreview: None%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -788 1035 1 2547 1303 18 0 0 6 45 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 116 8%%BeginData: 9070 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2CFF52FD26F827FD57FF52FD28F827FD55FF52FD2AF852FD53FF%52FD2CF852FD51FF7DFD2EF87DFD4FFF7DFD30F87DFD4DFFA8FD32F8A8FD%4BFFA8FD34F8A8FD4AFFFD35F827A8FD48FFFD37F827A8FD46FF27FD38F8%27FD45FF27FD3AF827FD2DFFA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A827FD3CF852A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DFD04%A8FD11FFA85227FD31F8272727FD38F8277DA8FD0DFF52FD2FF827277D7D%A8FFFFFF27FD3AF852FD0AFF7D27FD30F87DFD07FF27FD10F8277D5227FD%28F8A8FD07FF7DFD28F852527DA87DFD05F87DFD07FF52FD10F87DFFFFFF%A8A87D52FD25F8A8FD05FFA8FD26F87DA8FD05FF7DFD05F827FD07FF52FD%10F8A8FD07FFFD26F8A8FD04FF27FD25F827FD08FFFD05F827FD07FFA8FD%0FF827FD07FFA8FD27F8FFFFFF52FD27F8A8FD07FF27FD05F8FD07FFA8FD%0FF827FD07FF52FD27F852FFFFFD28F87DFD07FF27FD05F87DFD07FF27FD%0EF87DFD07FF52FD27F827FF7DFD28F852FD07FF52FD05F87DFD07FF52FD%0EF87DFD07FFFD29F87D52FD28F827FD07FF7DF8F8272752A8FD07FF52FD%0EF8FD07FFA8FD29F827FD29F827A8FD07FF7DA8A8FFFFFFA8FD06FF7DFD%0DF827FD07FF7DFD11F8A87D27FD15F827FD2AF8A8FD14FFA8FD0DF852FD%07FF52FD10F87DFFFFFF52FD2CF8277DFD11F87DFD15FFFD0DF87DFD07FF%27FD0FF827FD05FF7DFD2AF852FFFF52FD10F87DFD15FF27FD0CF8A8FD07%FFFD10F8A8FD07FF27FD27F87DFD04FF27FD0FF827FD15FF52FD0CF8FD07%FF7DFD0FF852FD09FF52FD24F827FD07FFFD0FF827FD0AFFA87D527DFD07%FF7DFD0BF852FD07FF7DFD0EF827FD0BFFA827FD21F852FD08FFA8FD0FF8%FD07FFA827FD05F8FD07FF7DFD0BF852FD07FF27FD0EF8A8FD0DFF7DFD1E%F8277DFD09FF27FD0FF87DFD07FFFD06F8A8FD07FFFD0BF8A8FD07FF27FD%0DF87DFD0FFFA8FD1CF827A8FD08FF7DFD11F87DFD07FF52FD05F8A8FD07%FF27FD0AF8A8FD06FFA8FD0DF827FD08FFA8A8FD07FF7DFD1AF87DFD09FF%7DF8F8F852FD0EF852FD07FF52FD05F87DFD07FF52FD09F827FD07FF7DFD%0CF827A8FD08FF52F87DFD07FF52FD18F8A8FD08FFA827F8F827FFFF27FD%0DF827FD07FF7DFD05F852FD07FF7DFD09F852FD07FF52FD0CF852FD08FF%A8F8F8F852FD06FFA8FD17F8A8FD08FFA8F8F8F852FFFFFFA8FD0EF8FD07%FFA8FD05F827FD07FF52FD09F87DFD07FF27FD0BF827FD09FFFD05F8A8FD%06FF27FD16F827FD09FFF8277DFD05FF7DFD0DF8A8FD07FFFD06F8A8FF7D%7D5227FD0BF8FD07FFA827FD0BF8FD09FF52FD05F87DFD06FF7DFD17F852%FD11FFFD0DF87DFD07FF27FD05F827FD0FF827527DA8FD05FFFD0BF8A8FD%0AFF5227F8F852FD07FF7DFD18F87DFD0EFFA8FD0EF852FFFFFFA8A87D52%FD1BF85252A852FD0AF852FD0CFFA87D7DFD08FF7DFD19F8A8FD0CFF7DF8%F8F852FFA8FD09F8277D522727FD2BF827FD18FF27FD19F827FD0AFFA827%F8F8F87DFFFFFF52FD38F87DFD17FFA8FD1BF87DFD09FF27F8F827A8FD05%FF27FD36F827FD09FF27A8FD0DFF52FD1CF8A8FD08FF52F827FD07FFA827%FD15F8272752527D527D52522752FD16F827FD07FF27F8F852FD0BFF7DFD%1EF8FD09FFA8FD09FF27FD11F827527DFD0DFFA8A85227FD13F87DFD04FF%7DFD04F8277DFD08FF7DFD1FF827FD10FFA8FD10F8277DA8FD14FFA852FD%12F852A8FFA8FD07F8277DA8FFA8FF7D27FD21F87DFD0EFF7DFD0FF852A8%FD1AFF7DFD11F8277D27FD0BF827FD25F8A8FD0BFFA852FD0EF827A8FD1E%FF52FD43F827FD0AFF7D27FD0EF87DFD21FFA852FD42F852FD08FF52FD0E%F827A8FD24FF7DFD42F87DFD06FF27FD0EF87DFD28FF27FD41F8A8FFFFFF%A8FD0FF87DFD2AFF27FD40F827FFFF7DFD0FF8A8FD2CFF52FD40F82727FD%0FF87DFD2EFF27F8F826FD4CF87DFD2DFFA8522720272626FD4AF87DFD2C%FFA852F820F826F826FD4AF852FD2CFF7C27F826202720262027FD48F827%A8FD2AFFA726F8F826F826F826F826F826FD47F87DFD29FFA852F8262027%202620272026202726FD46F827CAA7CFFD26FF5220F8262026F8262026F8%262026F826FD45F827A17CA07CA7CAFD22FF7D2020202620272026202720%26202720262026FD44F8A07C7C7CA076A0A7FD1BFFA87D52A87D26F820F8%26F826F826F826F826F826F826F826FD44F87CA0A07CA17CA17CA0A7FD18%FF7D515120262752F826202720262027202620272026F8262676A87DFD42%F8277CA07CA07CA07CA07CA0A0FD15FF76522626F8512626274BF826F826%2026F8262026F820F82776FFFFFFA827FD41F851A77CA17CA07CA17CA07C%A0A0FD12FFCA4B27F84B2727275126274B272026202720262026F82651A8%FD06FF52FD41F8767CA07CA07CA07CA07CA07CA07CA8FD10FF7D204B2720%4B26262627204B2720F826F826F8F8267DA8FD08FFA8FD40F80076A17CA1%7CA07CA17CA07CA17CA07CCAFD0DFFA8527D265252272651264B2627207C%2726202620527DFD0CFF27FD40F87C7CA07CA07CA07CA07CA07CA07CA075%A7CAFD08FFA85127F8F84B52207627262727202726262776F82651A8FD0E%FF52FD3FF827A8A77CA07CA17CA07CA17CA07CA17CA07CA7CAFD05FF7D51%F820F827202776272776204B262726272627527DA8FD10FF7DFD3FF827FF%CAA7757C7CA07CA07CA07CA07CA07CA076A0A8FFFFA127F8F826F826F826%F8524B262627202720262027F852FD12FFA8FD3FF852FFFFFFA87CA07CA0%7CA17CA07CA17CA07CA17CCFA852F8262027202620272026267D2627264B%2627264B262726FD13FFFD3FF852FD04FFCF7CA07CA07CA07CA07CA07CA0%7CCA7620F8262026F8262026F82620204B52202720272627202726267DFD%12FF27FD3EF8A8FD06FFA8A77CA07CA17CA07CA17CA85220202720272026%202720262027202751272627262726272627F852FD12FF52FD3EF87DFD07%FFA8A87C7C76A07CA076A77C2020272020F826F826F826F826F826F85127%26202620272026207DA8A8A8FD10FF7DFD3EF8FD0BFFA7A77CA07CA7A127%274B20272027202620272026202720207DA82027264B262727A77D27F852%FD10FF7DFD3EF8A8FD0CFFCA7C7C7C52F827F8272626F8262026F8262026%F82051FFFF5220272026277D26F8F8272652A8FD0EFF7DFD3EF8A8FD0EFF%A8CA262620262027202720272026F820F82620FFFFFFA126262651A726F8%F8275227F851FD0EFF7DFD3EF8A8FD10FF7DF8262020F8272726F826F826%527CF87DFD04FF51204BA8F8F8F8262620F8FD0427A852FD0AFF7DFD3EF8%A8FD10FF52202627204B27272026F852A8FFA8CFFD06FF517D2720F826F8%26F8272726F82626F87DFD09FF52FD3EF87DFD10FF52264BF8262026F8F8%27A7A8A775A0A1FD07FF27F8F826F820F826F8F8F8272720F8A8FD09FF52%FD3EF87DFD12FF52512626F84B7DCFA1A07CA07CA0A7FD05FF51F8F826F8%27F826F826F8272727F85252527DFD07FF27FD3EF852FD14FF51F852A8CA%7C7C7CA07CA07C7CA8FFFFFF7CF8F820F820F820F8F8F85120F8F8275226%F82626767DFD04FF27FD3EF852FD17FFA77CA07CA17CA07CA17CA7FFFFA8%26F827F826F827F826F8272726F827524B264B26272027277DA8FFFD40F8%FD16FFCA75A07CA07CA07CA07CA07CFFFF4BF820F826F820F826F820F826%F8F851512027202726272026F8262627FD3FF8A8FD15FFA7A07CA17CA07C%A17CA07CA0A87DF827F826F827F826F827F826F8204B7620272627262726%27262726272626FD3EF87DFD14FFA8A17CA07CA07CA07CA07CA076A752F8%F820F820F820F820F826F8F8277C2026202720262027202620272027FD3F%F827FD15FF7CA07CA17CA07CA17CA07CA17CA72720F826F827F826F827F8%207DCF2726204B2627264B2627264B26272627FD3FF8A8FD13FFA8A77CA0%7CA07CA07CA07CA07CA07CA8F820F820F826F820F8267DFFFFFF7D51F826%26272027262720272627FD40F87DFD08FFA8A8A17D52522727274B27277D%A77CA07CA17CA07CA17CA07CA0A7A8F826F826F827F826A8FD06FFA82726%20272627262726272627FD40F8FD05FF764BF820FD0BF852A1A07CA07CA0%7CA07CA07CA07CA0A752F820F8F8F827A8FD09FF7D51F826202720262027%FD41F87DFFFFFF27F8F826F827F826F827F826F827F82027CA7CA07CA17C%A07CA77CA0A0A77CA77D20F8F8207DFD0DFFA127262627264B2627FD40F8%27FFFF27F8F826F820F826F820F826F820F826F8F87DA77CA07CA07CA07C%A07CA0A1A0A07DF8277CFD11FF522726262627FD42F87DA820F826F827F8%26F827F826F827F826F827F852A1A07CA17CA07CA07CA17CA77CA1A8A8FD%14FFFD0427FD44F852F820F820F820F820F820F820F820F820F820F8A77C%A07CA07CA07CA076A07CA1A7FD15FF7DFD49F827F826F827F826F827F826%F827F826F827F8207CA77CA07CA77CA07CA77CA8FD16FFA827FD4AF826F8%20F826F820F826F820F826F820F826F8277DA07C7C7CCA7CA1A8CFFD17FF%27FD4AF826F827F826F827F826F827F826F820F8F8F82727A8CAA77CCAFF%FFCFFD18FF7DFD4CF820F820F820F820FD05F82627527DA8A8FD20FF7DFD%4EF827F820F826F827277D7DA8FD25FFA8FD50F826277D7DCFFD29FFA8FD%52F827FD2BFFA8FD55F87DFD28FF7DFD57F87DFD26FF52FD59F827FD23FF%7D27FD5CF87DFD20FF52FD5FF82752FD1BFFA852FD30F827FD33F87DA8FD%16FFA85227FD31F827FD35F8277DA8FD0FFFA8A85227FD33F8527DFD39F8%52527D7DFD04A8FFA8A87D7D2727FD36F87DA8FD7EF8FFFF52FD7CF87DFF%FFFFFD7BF827A8FFFFFFA8FD7AF8A8FD05FF7DFD78F87DFD07FFA8FD75F8%27A8FD0AFF27FD72F852A8FD0CFFA8522727FD6BF82752A8FD11FFA8A87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA8A8FD08FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au*u0 O0.749721 0.679194 0.670497 0.901457 0 0 0 Xa0 J 0 j 1 w 10 M []0 d0 XR231.7189 70.9889 m127.8261 70.9888 23.9333 70.9881 -79.9595 70.9891 C-122.4346 70.9895 -157.0436 105.6044 -157.0465 148.1421 c-157.0573 303.9813 -157.0531 459.8205 -157.0492 615.6597 c-157.0482 652.4945 -130.6022 684.4705 -94.4361 691.4192 C-89.1524 692.4344 -83.8425 692.9406 -78.452 692.9349 C-38.9927 692.8932 0.466626 692.9366 39.9258 692.8613 C42.7316 692.8559 44.6667 693.5659 46.6363 695.7406 C68.5925 719.9836 90.6938 744.0952 112.7089 768.285 C114.3116 770.046 115.9064 770.9072 118.424 770.9046 c193.971 770.8255 269.518 770.8286 345.0651 770.8925 C347.5187 770.8946 349.1786 770.1784 350.8221 768.3696 C372.9844 743.9786 395.2342 719.6672 417.3949 695.2746 C418.9474 693.5658 420.4587 692.8516 422.8012 692.8562 C462.5101 692.9346 502.2191 692.9362 541.9282 692.9055 C581.5081 692.8749 613.2638 665.9308 619.7496 626.8677 C620.485 622.4388 620.7296 617.9521 620.7288 613.4412 C620.7016 459.1004 620.7509 304.7596 620.6678 150.4189 C620.6516 120.2932 607.4043 97.1702 581.8712 81.4225 c570.4614 74.3855 557.6916 70.9843 544.1466 70.9852 C440.004 70.992 335.8615 70.9889 231.7189 70.9889 Cf1 D382.3161 456.8061 m380.7961 458.2688 379.283 459.7387 377.7551 461.1931 C323.8918 512.4656 260.4965 529.8148 188.2062 513.2919 C155.5478 505.8273 127.0155 489.7247 102.3164 467.0043 c86.9666 452.8842 73.9774 436.88 63.8292 418.6192 C63.1885 417.899 62.6082 417.1122 61.8982 416.4685 C49.4542 405.1862 44.4272 390.988 45.3276 374.448 C45.1825 374.1032 44.9959 373.7698 44.8983 373.412 C35.2202 337.9476 35.3127 302.4721 44.8621 267.0072 C50.2439 247.0206 59.0476 228.5551 69.9794 211.0523 C70.4708 209.6468 71.1758 208.2773 71.4192 206.8301 C73.1371 196.6128 78.6286 189.2978 87.988 184.8601 C89.095 184.3352 90.5803 184.0086 90.8849 182.68 C91.8264 178.5734 94.1201 176.3563 98.4841 176.6552 C106.1124 169.8525 113.7875 163.0964 122.1807 157.2389 C159.8914 130.9204 201.818 119.0881 247.6656 121.1561 C281.9893 122.7044 313.6806 132.9454 342.7446 151.155 C371.6424 169.2603 394.3624 193.3339 411.0529 223.0831 C412.8453 222.864 414.272 221.7917 415.7898 220.9755 C421.0169 218.1647 426.4423 218.5638 430.8669 222.5529 C436.0733 227.2469 439.4614 233.1332 440.8821 240.0039 C443.1928 251.1777 440.7935 261.9004 437.6116 272.5692 C436.6774 275.7014 435.0446 277.505 431.8123 277.8304 C441.0653 322.8005 436.0323 366.0509 416.2003 407.5198 C418.5686 409.3348 417.9309 411.8103 417.2899 413.9977 C415.0577 421.6144 412.8673 429.2606 410.1792 436.7219 C407.2197 444.9365 402.7703 452.3922 397.1171 459.0973 C395.6935 460.7859 394.446 461.3852 392.0636 460.3381 c388.9249 458.9587 385.9244 456.9628 382.3161 456.8061 Cf242.5403 560.48 m242.3944 561.4675 242.2787 562.4605 242.0984 563.4415 C238.6739 582.0696 235.2366 600.6952 231.8128 619.3234 C227.7356 641.5067 223.6323 663.6854 219.646 685.885 C219.1769 688.4974 218.5226 689.1717 215.6428 688.5945 c201.9604 685.8524 188.2201 683.3888 174.4672 681.0189 C172.087 680.6088 172.144 679.7208 172.5018 677.8197 C174.9682 664.717 177.1863 651.5658 179.8145 638.4966 c180.3845 635.6622 179.4772 635.1281 177.1874 634.722 c167.6172 633.025 158.0506 631.3013 148.5125 629.4348 c146.3112 629.004 145.8497 629.6798 145.4881 631.7303 C143.1507 644.9833 140.5773 658.1946 138.2481 671.4489 C137.8458 673.7385 137.2885 674.1992 134.9203 673.737 C121.1007 671.0398 107.2474 668.5091 93.3761 666.0899 C91.2343 665.7164 90.7178 665.0696 91.101 662.9988 C98.8338 621.2166 106.5306 579.4278 114.1655 537.6277 C114.5184 535.6959 115.2257 535.6049 116.9132 535.9259 C130.7458 538.557 144.583 541.1713 158.4582 543.5629 c161.1251 544.0225 161.56 544.7385 161.0479 547.3513 c158.316 561.291 155.8374 575.2802 153.234 589.2453 C152.7874 591.6407 152.6073 593.1411 156.0067 593.6318 C165.2496 594.9661 174.4583 596.6602 183.5738 598.6907 c186.9266 599.4376 187.2124 598.1089 187.6578 595.5788 C190.1424 581.4657 192.7356 567.3714 195.3621 553.2839 C195.5915 552.0533 195.2661 550.2202 197.8693 550.7252 C212.0589 553.4781 226.2816 556.0607 240.4926 558.7034 C241.5194 558.8943 242.9681 558.6087 242.5403 560.48 Cf557.8943 549.6344 m558.0254 554.1666 557.3036 558.5633 555.8778 562.8621 C551.3828 576.415 541.9615 585.9544 530.5453 593.8109 C512.2748 606.3843 493.9336 618.8551 475.6619 631.4268 c473.8521 632.672 472.916 632.9907 471.4045 630.7687 C447.7178 595.9466 423.9338 561.1904 400.0767 526.4847 C398.6158 524.3596 399.0465 523.5037 400.9498 522.2203 C412.417 514.4879 423.8443 506.6953 435.2043 498.8065 c437.1201 497.476 438.0368 497.4338 439.4349 499.5267 C445.1791 508.1258 451.2092 516.5339 456.9631 525.1267 C458.2652 527.0711 459.1022 527.1242 460.9229 525.8463 C467.3457 521.338 473.7953 516.8532 480.4191 512.6499 C489.2641 507.0369 498.8759 503.3075 509.4332 502.7392 C534.9933 501.3635 557.6522 523.3619 557.8943 549.6344 Cf-8.134 618.8962 m-8.9624 618.2998 -9.65871 617.8071 -10.3461 617.3023 C-34.3746 599.6546 -58.382 581.9781 -82.4649 564.4051 C-84.5934 562.852 -84.6485 561.9589 -83.0919 559.8491 C-58.2094 526.1229 -33.4113 492.3342 -8.67946 458.4973 C-7.1821 456.4487 -6.34246 456.1157 -4.17491 457.7196 C20.2913 475.8234 44.8228 493.8394 69.415 511.7717 C71.5132 513.3016 71.2975 514.2388 69.9393 516.0482 C63.8738 524.1278 57.8416 532.2371 52.0222 540.4941 C50.4018 542.7932 49.439 542.8636 47.2373 541.2127 c35.2625 532.2331 23.1058 523.4963 11.1299 514.5181 C8.9773 512.9043 7.94073 513.081 6.59365 515.2812 c5.16576 517.6133 3.51197 519.8389 1.72327 521.9092 C0.05215 523.8433 0.210435 524.9523 2.35357 526.4868 C11.9878 533.3852 21.4554 540.5161 31.0763 547.4336 C33.1594 548.9314 33.8493 549.879 31.9844 552.261 C26.9119 558.74 22.0788 565.4138 17.3465 572.1478 C15.8802 574.2345 14.9245 574.5274 12.8133 572.9208 C5.07192 567.0296 -2.81526 561.3295 -10.672 555.591 c-13.2788 553.687 -16.203 550.1841 -18.537 550.5185 C-20.819 550.8455 -22.4103 555.2423 -24.536 557.6484 c-26.2281 559.5637 -25.7725 560.5052 -23.8354 561.9042 c-12.1058 570.3756 -0.485133 578.9978 11.1933 587.5404 C12.6857 588.6321 13.9175 589.3199 12.2359 591.5302 C5.81721 599.9666 -0.369506 608.5794 -6.65142 617.12 C-7.08311 617.7069 -7.58512 618.2421 -8.134 618.8962 Cf342.7099 540.2526 m345.3661 539.4634 344.886 541.602 345.1663 542.8772 C354.2296 584.0953 363.2433 625.3243 372.3787 666.5264 C372.9012 668.8831 372.0157 669.2518 370.1782 669.6487 C356.6716 672.5667 343.1651 675.4889 329.6935 678.5626 C326.8916 679.202 325.9982 678.5782 325.3757 675.6646 C319.6531 648.8811 313.7265 622.1411 307.8547 595.3895 C304.7853 581.4056 301.6611 567.4333 298.7226 553.4221 C298.4996 552.3588 296.6189 550.3564 299.7222 549.6912 C314.0857 546.6121 328.4212 543.4027 342.7099 540.2526 Cf*U0 D0.285801 0.364752 0.683711 0.027222 0.717647 0.6 0.4 Xa63.8292 418.6192 m63.9525 418.6387 64.1183 418.6132 64.1932 418.684 C70.239 424.3873 76.2656 422.4367 82.9281 419.4286 C95.0978 413.9341 104.7704 405.0357 115.0917 397.0394 C130.7741 384.8896 146.1582 372.3551 161.721 360.0498 C163.6738 358.5057 164.6622 357.6041 162.1551 355.4364 C151.34 346.085 144.861 333.6459 138.3733 321.2413 C136.0374 316.7751 136.0004 316.7445 131.4599 319.0833 C109.9682 330.1536 87.6129 339.6404 67.3995 353.056 C58.8098 358.7569 51.0345 365.6162 45.3274 374.4476 C44.4272 390.988 49.4542 405.1862 61.8982 416.4685 C62.6082 417.1122 63.1885 417.899 63.8292 418.6192 Cf0.64889 0.656611 0.735866 0.826108 0.098039 0.066667 0.019608 Xa69.9794 211.0523 m71.8335 212.1936 70.982 214.1754 71.2608 215.7162 c73.3329 227.1671 80.1178 234.3062 90.5749 239.036 C98.4795 242.6114 106.7855 242.0709 114.9257 243.0439 C124.699 244.2122 134.4633 245.445 144.2338 246.6337 C155.1549 247.9622 166.1492 247.49 177.1247 247.1682 C178.925 247.1155 179.4166 246.4266 179.5936 244.7855 C180.9213 232.4735 186.8144 221.6028 190.6487 210.0801 C192.2886 205.1518 195.9776 201.4408 198.8043 196.6694 C190.4256 194.9755 182.2865 193.3567 174.1589 191.682 C150.6189 186.8314 126.9717 182.5521 103.3231 178.2751 C101.6926 177.9803 99.4338 179.1157 98.4841 176.6551 C94.1201 176.3563 91.8264 178.5734 90.8849 182.68 C90.5803 184.0086 89.095 184.3352 87.988 184.8601 C78.6286 189.2978 73.1371 196.6128 71.4192 206.8301 C71.1758 208.2773 70.4708 209.6468 69.9794 211.0523 Cf0.578363 0.678828 0.782376 0.770443 0.168627 0.098039 0.015686 Xa416.2003 407.5198 m406.6677 403.6172 397.1376 399.7086 387.6021 395.8133 C364.4802 386.3679 341.4046 376.8125 318.5371 366.7617 C317.4317 366.2759 316.2726 365.9124 314.6371 365.3059 C315.9158 371.5804 313.3188 376.1503 310.1012 380.8425 C304.7567 388.6363 300.0487 396.8649 295.0058 404.8684 C293.9797 406.497 293.75 407.35 295.8307 408.4962 C318.9288 421.2198 342.0279 433.942 364.6518 447.5083 C369.2203 450.2478 374.2226 452.2599 378.9968 454.6633 c380.1678 455.2528 381.7092 455.3251 382.3159 456.8062 C385.9244 456.9628 388.9249 458.9587 392.0636 460.3381 c394.446 461.3852 395.6935 460.7859 397.1171 459.0973 C402.7703 452.3922 407.2197 444.9365 410.1792 436.7219 C412.8673 429.2606 415.0577 421.6144 417.2899 413.9977 C417.9309 411.8103 418.5686 409.3348 416.2003 407.5198 Cf0.532738 0.667048 0.836851 0.681056 0.231373 0.156863 0.07451 Xa411.0529 223.0831 m410.5493 224.413 409.1907 224.658 408.1639 225.2745 C388.8585 236.868 368.8439 247.0858 348.2101 256.0984 C346.9763 256.6373 345.7729 257.2461 344.2754 257.9548 C350.6566 261.5628 354.6974 267.0535 358.3108 272.9357 c363.0747 280.6908 368.5255 287.9513 374.1086 295.1273 C375.4026 296.7904 376.3497 297.1212 378.342 296.2064 C393.1652 289.4002 408.8797 284.9863 424.1569 279.3923 C426.575 278.5069 429.2539 278.3331 431.8122 277.8303 C435.0446 277.505 436.6774 275.7014 437.6116 272.5692 C440.7935 261.9004 443.1928 251.1777 440.8821 240.0039 C439.4614 233.1332 436.0733 227.2469 430.8669 222.5529 C426.4423 218.5638 421.0169 218.1647 415.7898 220.9755 C414.272 221.7917 412.8453 222.864 411.0529 223.0831 Cf*u0.285801 0.364752 0.683711 0.027222 0.717647 0.6 0.4 Xa250.3528 240.5966 m250.401 237.2573 252.287 234.9256 253.8781 232.4247 C257.5594 226.6387 261.4389 220.9523 261.2631 213.5957 C261.1411 208.4958 255.7617 203.6219 250.5947 204.0586 C248.3157 204.2512 247.0079 205.3782 246.0125 207.3167 C244.0833 211.0735 242.0174 214.7601 239.4028 218.2078 C240.8613 214.773 242.3836 211.3634 243.7553 207.8943 C244.6304 205.6812 246.387 203.3228 243.4797 201.2341 c240.5314 199.1159 237.3999 197.6997 233.7563 199.3359 C232.0206 200.1153 230.7208 201.4854 229.6686 203.0844 C224.3869 211.1102 217.7065 218.1064 212.6049 226.268 C211.26 228.4197 209.4518 230.011 206.2636 230.6884 C212.3737 224.2397 216.8728 217.2693 221.9832 210.7717 C223.3542 209.0285 224.9224 207.2429 225.0386 204.8801 c225.1827 201.9466 226.1897 198.3587 223.2486 196.544 C219.2451 194.0739 214.5963 193.1597 210.0172 195.2108 C203.2998 198.2198 198.1726 202.9742 195.1279 209.7844 C191.2039 218.5613 188.7225 227.8495 185.5616 236.8969 C184.3728 240.2996 182.7561 243.6139 182.5566 247.2673 C182.4139 249.8788 180.3846 249.3268 179.0164 249.5842 c176.556 250.0471 175.6948 250.7168 176.0618 253.7018 C177.2912 263.7009 180.3667 273.1248 183.7908 282.4996 c184.3665 284.0759 185.2565 284.9588 186.779 285.5203 c191.1391 287.1282 195.028 289.5153 198.7148 292.3812 C204.3643 296.7728 211.5801 298.4546 217.3471 302.6421 C220.4031 304.8612 223.7282 305.8432 227.323 306.5111 C228.874 306.7992 229.8841 306.4972 230.9933 305.4652 c238.1747 298.7836 244.724 291.6609 247.9227 282.1 C252.843 267.3928 260.9647 254.3912 269.693 241.757 C274.0976 235.3813 274.7158 228.3254 274.3576 221.0262 C274.1508 216.8106 268.4403 212.3774 264.2562 212.6624 C262.8372 212.759 262.6198 213.5402 262.5843 214.601 c262.5258 216.3466 262.4666 218.0952 262.5022 219.8405 C262.5886 224.0802 262.1647 227.9959 257.9884 230.523 c256.1791 231.6178 255.0939 233.5878 253.9183 235.3624 C252.7525 237.1222 251.5431 238.8531 250.3528 240.5966 Cf1 D238.2482 220.424 m233.2591 231.7711 231.4568 237.2955 226.897 238.3854 C231.3514 232.6972 234.2583 226.1956 238.2482 220.424 Cf*U0 D0.64889 0.656611 0.735866 0.826108 0.098039 0.066667 0.019608 Xa313.7323 313.4592 m317.8679 312.0971 320.9298 313.6198 323.8756 315.8643 C327.0465 318.2803 330.2143 320.7231 333.5594 322.8816 C337.4057 325.3634 340.2924 325.046 343.4439 322.2576 C347.5053 318.6641 347.2201 317.1092 342.971 313.9951 C337.3701 309.8901 332.7346 304.5922 326.3203 300.5058 C329.4302 299.7598 330.9475 301.3503 332.4014 302.6924 C336.265 306.2586 340.4734 309.3773 344.7777 312.3545 C349.7538 315.7964 358.5023 314.0176 361.9174 309.0903 C362.6635 308.0138 362.0704 307.2345 361.6111 306.3576 c360.0539 303.385 357.6502 301.2909 354.7939 299.6215 C350.0692 296.86 344.9655 294.6421 340.891 290.9144 c337.0829 287.4305 334.2136 283.4012 336.5948 276.8175 C336.9705 281.2407 338.8578 284.155 340.6991 287.1203 C343.0201 290.8582 346.0612 293.4295 350.2987 294.9622 C356.6417 297.2565 361.4679 301.3746 363.6868 308.0664 C364.5469 310.6605 365.8945 313.1262 369.1939 312.4694 C372.6672 311.7779 373.5422 308.8793 373.3807 305.8567 C373.1525 301.5841 372.2952 297.2238 369.4166 293.9959 C362.8183 286.5971 358.2829 277.7624 352.1615 270.0533 C348.9573 266.0181 345.3937 262.2526 340.9483 259.6916 c334.5858 256.0262 329.3977 251.0482 324.1812 246.0462 C311.6432 234.0235 296.0832 227.5186 279.9937 221.5591 C279.5741 224.9419 279.1582 228.0272 278.8141 231.1204 C277.9462 238.9213 273.8051 245.0846 268.9053 250.8368 C265.3339 255.0295 262.3543 259.6151 259.4258 264.2564 C258.4645 265.7799 258.2583 266.8877 259.3016 268.571 C270.9746 287.4059 284.5669 304.722 300.1506 320.4646 C306.5897 326.9694 314.1486 331.6694 323.1953 333.604 C328.911 334.8263 332.7401 332.7396 335.5347 327.5971 C336.3605 326.0774 335.9063 325.7979 334.6181 325.3192 c329.549 323.4354 324.8317 320.9367 321.1737 316.8297 C319.2534 314.6739 316.1091 315.2059 313.7323 313.4592 Cf*u0.578363 0.678828 0.782376 0.770443 0.168627 0.098039 0.015686 Xa166.4385 295.9621 m165.7736 295.2375 165.0349 294.5667 164.4585 293.7774 c163.1213 291.9466 162.0335 290.0479 159.1033 291.3151 c156.3852 292.4905 154.3225 294.0115 153.9991 297.119 c153.7899 299.1288 153.9589 301.1755 154.9414 302.9597 C158.6851 309.7578 162.727 316.2493 169.5573 320.5974 C173.6419 323.1976 177.3095 326.4542 181.1557 329.4271 C182.7985 330.6969 183.8197 332.2875 183.7558 334.9983 C180.2173 329.8625 175.5486 326.6549 170.9328 323.5265 C162.4871 317.8024 157.0002 309.7939 152.3583 301.0087 C151.8403 300.0284 151.3312 298.9315 150.5183 298.2419 C148.7527 296.7442 146.7953 294.5808 144.3084 296.2167 C142.0713 297.6881 141.4832 300.3146 142.2673 302.9299 c142.8713 304.9442 143.7119 306.9019 144.6033 308.812 c145.6444 311.043 146.855 313.195 147.9121 315.2276 C147.7354 315.8311 147.6197 315.8234 147.357 315.594 C145.961 314.3749 144.9588 311.7332 142.778 312.7637 c140.7066 313.7425 140.9203 316.3537 140.9273 318.4861 c140.9337 320.432 141.7494 322.1065 142.7365 323.7157 c146.7839 330.3134 151.3929 336.508 156.12 342.6298 c159.8142 347.4139 164.936 350.2242 169.9181 353.3039 c188.9867 365.0912 209.175 374.2669 230.9331 379.8891 C232.668 380.3373 233.635 380.6754 234.0278 378.4306 C235.6502 369.1607 241.0408 361.5115 245.1398 353.3271 C247.866 347.8837 251.1179 342.7019 254.183 337.4311 c254.9348 336.1384 255.1147 335.101 254.1705 333.7215 C248.4698 325.3917 242.7992 317.0389 237.291 308.5815 C236.0101 306.6148 235.2907 307.2651 234.01 308.3698 C227.4323 314.0436 223.8053 314.1377 216.7951 309.1965 C207.5107 302.6524 197.2765 297.7176 187.4178 292.1542 c183.8295 290.1292 180.4917 287.7438 176.9482 285.6826 C171.9097 282.7519 167.5456 284.4752 165.2044 289.8492 C164.089 292.4096 166.0731 293.7494 166.8368 295.5912 C174.2857 304.6474 185.3083 309.131 194.3561 316.6382 C192.0459 317.1862 190.5071 316.5315 189.0279 315.4831 C185.4841 312.9713 181.9006 310.5154 178.3477 308.0162 C173.655 304.7153 169.3189 301.0563 166.4385 295.9621 Cf1 D150.0989 319.2944 m150.7666 320.0824 151.1205 320.3912 151.3411 320.7765 C155.7389 328.457 161.9416 334.102 169.9683 337.8952 C174.27 339.928 177.4778 343.3236 179.7307 347.6382 C173.8765 341.1423 165.8222 337.9101 158.8243 333.132 C154.1891 329.9673 151.0618 325.6163 150.0989 319.2944 Cf*U0 D0.532738 0.667048 0.836851 0.681056 0.231373 0.156863 0.07451 Xa244.6082 393.2624 m245.2927 397.9414 249.696 400.1054 254.0571 397.697 C257.7855 395.6381 261.161 393.0037 263.71 389.5538 C266.8266 385.3357 269.2213 380.6718 271.4031 375.9086 c272.661 373.1623 272.7184 370.2205 272.3263 366.6002 C274.9996 370.5091 274.3517 373.8931 272.8719 377.1028 c269.311 384.8259 265.2413 392.1502 257.9774 397.2441 C254.5528 399.6456 254.8906 400.8507 258.6536 402.8614 C265.1402 406.3274 271.5553 404.9909 275.7758 398.9163 C278.8274 394.5242 281.4602 389.8407 284.2717 385.2821 C285.7029 382.9616 287.2916 380.817 290.3438 380.0907 C289.5795 381.1036 288.9625 382.2868 288.0241 383.0983 c284.901 385.799 283.0832 389.2075 281.7367 393.0578 C279.8659 398.4072 275.0526 401.2523 271.1199 404.8383 C275.2835 410.3667 283.4212 411.5704 288.8148 407.253 c294.19 402.9503 297.2045 396.8647 300.8421 391.1959 C309.3533 377.9319 314.1197 363.1872 318.7467 348.3346 c319.6652 345.3865 322.5758 342.3368 322.0574 339.8592 C321.4993 337.1923 316.855 338.7937 314.326 337.2133 c312.2182 335.896 310.1417 334.688 308.2912 332.9265 C302.9637 327.8554 297.6253 322.7436 291.8483 318.2126 C286.88 314.3158 283.1785 309.6636 280.6608 304.0074 C279.4963 301.3913 278.6845 301.7519 276.9918 303.6432 C270.2489 311.1777 265.9009 320.136 261.3582 329.0139 C254.3362 342.737 247.6892 356.6484 240.314 370.1972 C237.2463 375.833 236.1993 382.1803 236.1998 388.6391 C236.2 390.4385 236.2466 392.1027 238.2687 392.9895 c240.3309 393.8938 242.276 394.5277 244.0343 392.478 C244.3834 391.6795 244.9377 390.9089 245.0508 390.0782 c246.7824 377.3613 255.853 368.6863 262.6455 357.5279 C261.6926 362.2876 260.4603 365.728 258.4588 368.9625 C253.5514 376.893 248.5705 384.7899 244.6082 393.2624 Cf0.749721 0.679194 0.670497 0.901457 0 0 0 Xa498.2018 543.6401 m493.8474 543.6676 490.2762 545.6954 486.8983 548.0939 c483.7775 550.3097 478.5947 551.7743 478.1131 554.915 C477.6909 557.6672 481.6338 561.1152 483.7064 564.2172 C486.6151 568.5704 489.5883 572.8804 492.508 577.2261 C493.1352 578.1596 493.5554 579.2121 494.976 578.1417 C499.6461 574.623 505.0101 572.0054 508.9827 567.5869 C512.8435 563.2929 513.943 558.3944 511.3429 553.0726 C508.6796 547.6212 504.8408 543.6288 498.2018 543.6401 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF