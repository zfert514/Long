%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (Basic head mesh_ccexpress copy.ai)%%CreationDate: 4/21/22 1:25 PM%%Canvassize: 16383%%BoundingBox: 24 -43 601 869%%HiResBoundingBox: 24.9094 -42.0165 600.3177 868.4828%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3898 298.5 420.3898%AI3_TileBox: 9.63779 64.9449 585.6378 798.9449%AI3_DocumentPreview: None%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -788 1035 1 2547 1303 26 0 0 6 45 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 84 128 8%%BeginData: 16014 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD23FFA8FFA8FFA8FFA8FFA8FD44FFA8FFFD07A8FFA8A8A8FFFD07%A8FFA8FFA8FD3AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8A8A8FD38FFFD18A87DA8A8A87DFD36FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFD09A8FD32FFFD05A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A87DA8A8A87DA8A8A87DFD04A8FD2EFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFFD13A8FD2AFFFD18A87DA87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DFD28FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFFD18A884A9FD25FFFD05A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD%06A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DA8A8FD22FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD21A8FD1EFFFD16A87DA8A8%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D7D527D7E%FD1CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD20A87D7D52525984%7EAFFD18FFFD0EA8FFFD06A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87D7D52522852527E5A847DA8A8FD14FFFD04A87D%A8A8A87DA8A8A87DFD25A87D532E535252525359847E847EA8A8FD13FFA8%7DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA87D7D52522E5228525252287E7E7E%5A7E7D7E7EFD12FF7DFD11A87D7D7DA87DFD17A87D535253525352535253%525359857E857E847EA87EFD10FF7DA87DA87DA87DA87DA87DA87DA87DA8%7DA8FD097DA8A8A87DA8A8A87DA8A8A87DFD05A87D7DFD04522E5252522E%525252287D7E7E5A847E7E7D847EFD0EFFFD04A87DA8A8A87DA8A8A87DA8%A8A87DA87D7D7DA87D7D7DA87D7D7DFD0FA8535352525253525252535252%5253525259857E847E847E847EA8A8FD0DFFA87DA87DA87DA87DA87DA87D%A87DA87DA8FD0F7DA87DA8A8A87DA8A8A87D7D2E52285252522852525228%525252285228595A7E5A7E5A7E5A7E7D84A8FD0CFF7DFD11A87DA87DA87D%A87DA87DA87DA87D7D7DA87DFD05A8535352535253525352535253525352%535253525253857E847E857E847E857EA8FD0BFFA87D7DA87DA87DA87DA8%7DA87DA87DA87DA8FD167D2E522E5252522E5252522E5252522E5252522E%522E597E847E7E5A847E7E5A847EA8FD0AFFA87DFD05A87DA8A8A87DA8A8%A87DA8A87D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D2E53525252%53525252535252525352525253FD045253847E847E847E847E847E847EFD%0AFF7D7D7DA87DA87DA87DA87DA87DA87DA87DA8FD147D52522852525228%52525228525252285252522852525228597E7E5A7E5A7E5A7E5A7E5A7E7E%FD09FFA87DFD0FA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D%5253525352535253525352535253525352535253525353847E857E847E85%7E847E857E84A9FD08FF7DA87DA87DA87DA87DA87DA87DA87DA8FD167D52%522E5252522E5252522E5252522E5252522E52525228597E7E5A847E7E5A%847E7E5A845AAFFD07FFA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D527D52525253525252535252%52535252525352525253525252847E847E847E847E847E847E84A9FD07FF%A87DA87DA87DA87DA87DA87DA87DA87DA8FD147DFD04522E522852525228%525252285252522852525228522E535A845A7E5A7E5A7E5A7E5A7E59A9FD%07FFA8A87DFD0FA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D527D%5253525352535253525352535253525352535253525252847E847E857E84%7E857E847E84A8FD07FFA87DA87DA87DA87DA87DA87DA87DA87DA8FD147D%FD06522E5252522E5252522E5252522E5252522E5252535A847E7E5A847E%7E5A847E7E5AA9FD07FF7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87D7D%7DA87D7D7DA87D7D7DA87D7D7DA87D7D527D527D52535252525352525253%525252535252525352525253527E7E847E847E847E847E847E7E7EFD06FF%A87D7DA87DA87DA87DA87DA87DA87DA8FD157D52527D5252285252522852%52522852525228525252285252522852597E5A7E5A7E5A7E5A7E5A7E5A84%A8FD06FF7DFD0FA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D527D%527D5253525352535253525352535253525352535253525352847E857E84%7E857E847E857E847EFD06FFA87D7DA87DA87DA87DA87DA87DA87DA8FD14%7D5252527D52522E5252522E5252522E5252522E5252522E5252522E5259%7E5A847E7E5A847E7E5A845A7EA8FD05FFA87DFD05A87DA8A8A87DA8A8A8%7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA87D7D527D527D52525253%525252535252525352525253525252535252527E7E847E847E847E847E84%7E847EFD06FF7DA87DA87DA87DA87DA87DA87DA8FD167D527DFD04522E52%2852525228525252285252522852525228522E5259845A7E5A7E5A7E5A7E%5A7E5A7EA8FD05FFA87DFD0DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87D7D527D527D527D525352535253525352535253525352535253525352%53527E7E847E857E847E857E847E857EAFFD05FF7DA8A8A87DA8A8A87DA8%A8A87DA8FD147D5252527D5252527D52522E5252522E5252522E5252522E%5252522E52525253847E7E5A847E7E5A847E7E5A7EA8FD04FFA8A8FD097D%A8FD077DA87DA87DA87D7D7DA87D7D7DA8FD047D527D527D527D52535252%525352525253525252535252525352525253527E7E847E847E847E847E84%7E845AA9FD04FFA85227FD0C52275227FD04527D52FD047DA8FD067D527D%5252527D52522E525252285252522852525228525252285252522852537E%5A7E5A7E5A7E5A7E5A7E5A7E7EFD04FF7D522752527D527D527D527D527D%525227522752275227522752527D52FD047DA87D7D527D527D527D525352%53525352535253525352535253525352535253527E7E857E847E857E847E%857E847EA9FD04FF7D275227FD04527D5252527D52522752275227522727%275227272752272727FD04527D5252527DFD06522E5252522E5252522E52%52522E5252522E5253845A847E7E5A847E7E5A847E7E7EFD04FF7D522752%277D527D527D527D527D2752275227522752275227522752275227522752%277D527D527D527D52525253525252535252525352525253525252535252%527D7E847E847E847E847E847E847E84FD04FFA82752272727FD09522727%2752272727522727275227272752272727522752527D5252527D52522852%52522852525228525252285252522852525253845A7E5A7E5A7E5A7E5A7E%5A7E7EFD05FF5227522752527D527DFD0452275227522752275227522752%27522752275227522752277D527D527D5253525352535253525352535253%5253525352535253527D7E847E857E847E857E847E857E84A9FD04FF5227%27522752FD067D5252275227522752275227522752275227522752275227%2727FD04527D52522E5252522E5252522E5252522E5252522EFD0452847E%7E5A847E7E5A847E7E5A845AAFFD04FFA82752275252FFA8A8A8FFA87D52%5227522752275227522752275227522752275227522752277D527D525952%5252535252525352525253525252535252525352597E847E847E847E847E%847E847E84A9FD04FFA8272752277DFD05A87D527D525227272752272727%52272727522727275227272752272727FD07522852525228525252285252%52285252522852527E5A7E5A7E5A847E7E5A7E5A7E53A9FD05FF27522752%A8FFFD04A852FD057D525227522752275227522752275227522752275227%522752527D525352535253525352535253525352535253525352597E857E%847E847E7E597E597D537DA9FD05FF7D527D7DFD05A87D52527D527D52FD%057D527D527DFD0652275227522727275227FD05522E5252522E5252522E%5252522E5252522E52527E597E595953595359535953537DFD06FFA8A87D%FD06A87D527D7D7D52FD047DA87D7D7DA87DA87DA8FD0A7D527D527D5253%52525253525252535252525352525253525252595359537D5359537D5359%537D59AFFD06FFA87DFD06A87D5252527D527D52FD187DA1525228525252%28525252285252522852525228FD04525953595359535953595359537EFD%07FF7DFD07A87D7D52FD087DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D525253525352535253525352535253525352535252527D597D53%7D537D537D537D537EA8FD07FFA87DFD05A87D7D5252527D527D52FD197D%27522E5252522E5252522E5252522E5252522E5252535359535953595359%5359537D59FD08FF7DFD06A87D527D527D52FD047DA87D7D7DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D2EFD0452535252525352525253525252%53525252535359537D5359537D5359537E5984FD07FFA8A87DFD05A85252%527D5252527D52FD177D525227522E5228525252285252522852525228FD%04525953595359535953595359595AA8FD08FF7DFD04A8FF7D7D527D527D%52FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D5228FD04%52535253525352535253525352535252527D597D537D537D537D537D597E%7EFD08FFFD07A87D5252527D5252527D52FD177D2752275228522E525252%2E5252522E5252522E52525353595359535953595359597E53A8FD09FFFD%06A8527D527D527D52FD067DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7DFD0452285252535253525252535252525352525253537D537D5359537D%5359597E597EA8FD08FFFD04A87DA85252527D5252527D527D52FD167D52%2752275227525252285252522852525228FD045259535953595359535953%7E537E7DFD09FFFD04A8FFA87D527D527D527D52FD067DA87D7D7DA87D7D%7DA87D7D7DA87D7D7DA87D7D2752525228FD045253525352535253525352%53527D597D537D537D537D597E597E59A9FD08FFA87DFD04A87D5252527D%5252527D527D52FD157D2E522752275227522E522E5252522E5252522E52%52535359535953595359537E597E597EA9FD08FFFD06A8527D527D527D52%7D52FD047DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA8FD0452285252%5228FD0452535252525352525253537D537D5359537D537E597E597E7EFD%08FFFD06A87D52527D5252527D525252FD167D5227522752275227522752%52522852525228FD0452595359535953595259597E537E53A9FD08FFFD06%A87D527D527D527D527D527D527D7DA87D7D7DA87D7D7DA87D7D7DA87DA8%7DA87D7D2852525228525252285252535253525352535253527D597D537D%537D537E7E7E597E5984FD09FF7D27275227522752527D527D527D525252%FD137D527D52522752275227522752275252522E5252522E525253535953%5953595359537E597E597E84FD0AFF522727522752275227FD04527D527D%52FD047DA8FD0A7D527D7D7D52522752285252522852525228FD04525352%525253537D537D5359537D597E597E597E59A9FD0BFF52FD042752FD0727%522752FD047D527D527D527D527D527D527D527D52522752275227522752%275227522752525228FD045259535953595359537E597E537E595A59FD0C%FF5252275227522752275227522752FD047D52FD0F7D2752275227525252%285252522852525352535253527D597D537D537D537E7E7E597E7E7E597E%A9FD0AFFA87D52272752275227522727277D7D7D527D527D527D527D527D%527D527D527D527D5227275227522752275227522752275252522E525253%535953595359537E597E597E597E597E53A8FD0BFF7D7D52272752275227%5252A8A87D527D527D7D7D527D7D7D527D7D7D527D7D7D52522752275227%5227522852285252522E5352525253537D537D5359537E7E7E597E597E59%7E597E7DFD0BFF7D7DA852272752272752A8A87D527D527D527D527D527D%527D527D527D527D52522752275227522752275227522752275228525252%2E59535953595359597E597E537E597E537E5959A8FD0AFF7DA8A8A87DA8%7D7D7DFFA87D527D7D7D52FD0F7D52522752275227522752275227525252%28525253527D597D537D537E5A847E7E597E7E7E597E7E7E59A8FD0AFFA8%7DFD08A87D527D527D527D527D527D527D527D527D527D527D5252275227%5227522752275227522752285227525252535953595359597E597E597E59%7E597E597E597E59FD0AFFFD0AA8527D527D527D527D527D7D7D527D7D7D%52FD047D52275227522752275227522752275227FD045253537D537D5359%59847E7E597E7E7E597E597E597E597EA8FD09FFA87DFD07A8527D527D52%7D527D527D527D527D527D527D527D527D27522752275227522752275227%522752275227522E5953595359537E597E597E597E597E537E597E537E53%84FD09FFA8527DA8A8A87D7D527D527D7D7D52FD0F7D5252275227522752%275227522752275227522752287D597D537D597E7E847E7E5A847E7E597E%7E7E597E7E7E59FD0AFF52272752525227522752527D527D527D527D527D%527D527D527D527D52522752275227522752275227522752275227522752%52595359537E5A7E597E597E597E597E597E597E597E595984FD08FFA87D%27522752275227522752527D7D7D527D7D7D527D7D7D52FD047D52275227%522752275227522752275227522752275253535259537E5A7E7E7E597E7E%7E5A7E597E597E597E597E5984FD09FF52FD0A2752527D527D527D527D52%7D527D527D527D27522752275227522752275227522752275227522E5352%532E53597E597E597E597E597E597E597E537E597E537E59FD09FFA85252%527DFD06522752277D52FD0B7D5252275227522752275227522752275227%522752525953595259527E7E847E7E5A847E7E5A847E7E597E7E7E597E7E%7EA8FD08FF7D7DFD06A8FD047D52522752527D527D527D527D527D525227%52275227522752275227522752275227525253525352532E52527E597E59%7E597E597E597E597E597E597E597E597EFD08FFA87DFD07A87DA87DA8FD%047D527D7D7D527DFD045227522752275227522752275227522752275252%5953535259525227527E7E597E7E7E597E7E7E5A7E597E597E597E597E59%FD08FFA8A87DFD05A8FD067D527DFD0A5227522752275227522752275227%522752275228535253525352522752277D5A7E597E597E597E597E597E59%7E537E597E535A7EFD08FF7D52527D527DFD065227522752527D527D527D%527D52522752275227522752275227522752275252595359535953595252%275253845A847E7E5A847E7E5A847E7E597E7E7E597E5984FD08FF7DFD09%2752272727FD0B5227522752275227522752275227522752275352535253%5253285227522752597E597E597E597E597E597E597E597E597E597E59A9%FD07FFA852275227522752275227FD04527D5252527DFD04522752275227%52275227522752275227522753525953595259525227525252277E7E7E59%7E7E7E597E7E7E597E597E597E597E597E84FD08FF5252FD0727FD0D5227%522752275227522752275227522752275252532E5352532E522752275227%51527E597E597E597E597E597E597E597E537E597E537EAFFD07FF7D527D%527D527D5252527D527D527D527D527D527D525227522752275227522752%275227522752525352595253FD04522752525227527E7E5A847E7E5A847E%7E5A7E7D7E597E7E7E597E59FD08FF7D7D7DA8FD047DFD0B527D52522752%27522752275227522752275227522E5352522E5252522752275227522752%277D5A7E597E597E597E597E597E597E597E597E597E7EFD07FFA8527D7D%A87DA87D7D5252527D5252527D527D525227522752275227522752275227%52285352535253FD0A5227FD0452847E7E597E7E7E597E7E7E597E597E59%7E5A7E5384FD07FFA8FD077D527DFD0A5227522752275227522752275227%5228522E522E522E522752275227522752275227522752597E597E597E59%7E597E597E537E597E597E5384A8FD08FF7D7D7DA87DA8FD047D527D527D%527D527D2752275227522752275227522752525352535253FD0C52275252%52277D7E7E5A847E7E5A847E7E5A7E7E7E595952A8FD0AFFA8FD067D527D%FD07527D52522752275227522752275227522E5352522E53525227525252%275252522752275227522752527E597E597E597E597E597E53592E527DFD%0CFFA8FD047DA87D7D527D527D527D527D52522752275227522752275228%53525352535253FD0C52275252522752275259847E7E597E7E7E597E5AA8%527DA8FD0DFFA8FD067D527D527DFD0652275227522752275227522E522E%522E52285228522752275227522752275227522752275227522759597E59%7E597E597E53A8FD11FFA8A87DA87DA87D7D527D527D527D525227522752%27522752275252535253FD165227FD0452847E7E5A847E7E59A9FD12FFA8%7DA8FD047D527D527D527D5252275227522752275227522E522E52285252%52275252522752525227525252275252522752275227522752597E597E59%7E597EA9FD13FF7D527D7D7D527D527D527D527D52522752275227522E53%52535259FD1652275252522752277DFD047E597EA9FD14FFA852FD052752%2752275227522752272727FD0B5227522752275227522752275227522752%27522752275227522752527E597E597EA8FD17FFA8525227522752275227%272752527D7D7D527D527D527D527D527DFD145227525252275252525984%7E7E84FD1AFFFD04A8FD057DA8A8FFFFFFA8FD04527D5252527D52522752%52522752525227525252275252522752525227522752275227595A7E7EFD%2AFF527D527D527D527D527DFD1652275252522752527E7EFD2AFFA87DFD%0A5227522752275227522752275227522752275227522752275227522752%53AFFD2BFF7D7D527D527D527D527DFD165227525252275227A8FD2CFF7D%527D5252527D5252527D5252275252522752525227525252275252522752%2752275227522752CAFD2CFFA852527D527D527D527DFD1852275252527D%FD2DFFA8FD0C522752275227522752275227522752275227522752275227%5227A8FD2EFF7D527D527D527D527D527DFD16522752277DFD2FFF7D5252%7D5252527DFD065227525252275252522752525227525252275227522752%A8FD2FFFA8527D527D527D527D527DFD1952FD30FF7DFD0B522752275227%522752275227522752275227522752275227A8FD31FF527D527D527D527D%527DFD16522752FD31FFA87D5252527D5252527D52522752525227525252%27525252275252522752525227527DFD32FF7D52527D527D527D527DFD17%52FD33FF7DFD0C5227522752275227522752275227522752275227A8FD33%FFA87D527D527D527D527D527DFD1352FD36FFFD05527D5252527D525227%5252522752525227525252275227527DFD37FF7D527D527D527D527D527D%FD0E52277DA8FD38FF7DFD0B5227522752275227522752275227A8FD3AFF%A8527D527D527D527D527DFD0C527DFD3CFFA852527D5252527DFD065227%525252275227527DFD3EFF527D527D527D527D527DFD0852277DFD3FFFA8%7DFD0C522752275252A8FD41FF7D52527D527D527D527D527DFD04527DFD%43FFA85252527D5252527DFD045227527DFD44FFA87D5252527D527D527D%527D5252A8FD46FF7D7D527DFD0852A8FD26FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auu0 O0.6177 0.534997 0.527489 0.250187 0.368627 0.368627 0.368627 Xa0 J 0 j 1 w 10 M []0 d0 XR453.9178 50.9985 m453.7253 47.8493 451.1994 46.6097 449.0222 45.1663 C420.7704 26.4369 392.5056 7.72729 364.2321 -10.9692 C353.0889 -18.3378 343.8376 -28.0178 333.3378 -36.1706 C331.6369 -37.4912 329.9276 -38.8011 328.2221 -40.1158 C325.9252 -40.261 325.3091 -38.9886 324.7423 -36.9028 c322.2245 -27.6368 320.4626 -18.212 318.3982 -8.84918 C315.0507 6.33258 311.4291 21.4537 308.0107 36.6201 C303.7579 55.4881 299.6541 74.3897 295.3743 93.2515 C291.3143 111.1451 287.1263 129.0098 282.9626 146.8797 C280.9885 155.3522 280.0573 164.1176 275.9946 172.0122 C275.8909 173.4504 275.0942 173.3787 273.9414 173.1494 C267.5067 171.8685 261.1583 170.2928 255.0049 167.9892 c255.0079 167.991 l253.6595 168.072 252.3111 168.153 250.9627 168.2339 C256.7144 169.7514 260.9198 174.6699 266.9198 174.9432 C270.7917 175.1195 274.4034 176.3013 278.008 177.5197 C284.2588 179.6326 290.3466 182.431 296.7444 183.8608 C307.8181 186.3356 318.4852 189.3797 327.3422 196.8992 C340.6025 208.157 355.1163 217.7754 368.7573 228.527 C376.528 234.6517 385.0286 239.8704 392 247 C393.0015 247.3301 394.0031 247.6602 395.0046 247.9902 C394.6929 244.7521 395.3131 241.7583 397.0018 238.9214 C398.9704 235.6144 399.892 231.8799 400.9803 228.2216 C404.9309 214.9413 408.669 201.5914 412.6044 188.3177 C420.3671 162.1349 427.4624 135.7701 435.0385 109.5393 C440.3647 91.0983 445.5376 72.6129 450.879 54.1763 C451.2778 52.7999 450.7439 49.955 453.9178 50.9985 Cf0.653956 0.580194 0.568231 0.366552 0.301961 0.301961 0.301961 Xa190.0078 150.9853 m173.801 146.0305 157.2034 146.4814 140.5768 147.4551 C133.2737 147.8828 125.9669 148.9711 118.6823 148.8135 C108.838 148.6005 100.5025 152.0086 92.7507 157.5291 C88.8273 160.3231 84.9815 163.226 81.1007 166.0797 C82.3043 167.832 84.1086 166.992 85.6287 167.0065 C91.0575 167.0583 96.4879 166.9416 101.9181 166.8892 C102.8503 166.6185 103.7899 166.087 104.7129 166.1146 C124.4982 166.7048 144.1735 164.3647 163.9187 163.9382 C167.7772 163.1315 172.1031 160.8181 174.7829 165.7049 C182.343 179.4919 189.696 193.3928 197.0992 207.2656 C205.4389 222.8934 213.7597 238.5314 222.0598 254.1803 C228.7361 266.7679 235.3694 279.3786 242.0217 291.979 C245.9796 300.8738 249.9682 309.7552 253.89 318.666 C266.7029 347.7787 279.4914 376.9023 292.2876 406.0217 C298.4637 403.9224 302.491 398.829 307.4017 395.0037 C322.5179 383.2283 337.4512 371.2181 352.4558 359.2996 C361.7646 351.9053 371.0472 344.4777 380.3924 337.1298 C386.8757 332.032 393.4456 327.0442 399.977 322.0072 C398.5393 317.3813 394.6584 314.5065 391.8824 310.8551 C381.3458 296.9955 370.5233 283.3522 360.0617 269.437 C352.6963 259.64 344.5219 250.4497 337.946 240.0599 C329.398 232.7334 319.7333 227.0146 310.373 220.8517 C297.8799 212.6264 285.4495 204.306 272.9922 196.0264 C270.0729 195.1671 268.0158 193.098 265.9656 191.0191 C261.1395 188.0108 256.2551 185.0908 251.5128 181.9557 C249.2491 180.4593 246.2576 179.8657 244.981 177.043 C241.7231 176.832 239.8929 174.1156 237.3582 172.6422 C226.8957 166.5608 215.3852 162.8658 204.4324 157.9108 C199.5793 155.7152 194.0536 154.8676 190.0078 150.9853 Cf0.458717 0.249241 0.041321 0 0.541176 0.666667 0.819608 Xa570.2015 705.0822 m575.6099 699.9493 574.0389 692.8997 574.8224 686.6925 C577.4638 665.765 579.5804 644.769 581.7166 623.7808 c583.2649 608.5688 584.4918 593.3242 585.9253 578.1001 C587.2177 564.3756 588.6282 550.6621 589.9052 536.9362 C590.1195 534.6331 589.9191 532.2914 589.9105 529.9674 C587.9642 529.6358 586.0167 529.3098 584.0714 528.9717 C563.1346 525.3337 542.2192 521.5655 521.2527 518.1075 C510.5341 516.3397 499.9334 513.7774 489.0496 513.052 C488.8204 518.1957 488.5219 523.3412 488.2597 528.4768 C486.6747 559.5169 485.3047 590.5699 484.1552 621.6294 C483.6265 635.915 482.9224 650.1858 482.2039 664.4613 C480.959 689.1967 480.0606 713.9498 479.0645 738.6974 C478.3895 755.4668 477.7958 772.2396 477.1658 789.0108 C478.3513 788.4361 479.7548 788.1006 480.6889 787.2498 C491.0723 777.7914 501.689 768.561 511.6445 758.6672 C528.2607 742.1541 546.3182 727.2031 562.9684 710.7318 c565.0744 708.6485 567.1066 706.0729 570.2015 705.0822 Cf0.220218 0.173342 0.178805 0 0.776471 0.776471 0.776471 Xa391.0402 856.0466 m403.3828 847.3818 415.7253 838.717 428.0676 830.0518 C427.0048 827.7415 429.2703 827.2737 430.3233 826.4588 C444.7655 815.2814 459.2732 804.1885 473.8139 793.1394 c474.9247 792.2954 475.9578 791.6154 475.9619 790.0906 C460.0385 782.224 444.1218 774.3437 428.1899 766.494 C392.5246 748.9217 356.8518 731.3645 321.1821 713.8012 C291.4754 726.1551 261.7727 738.5184 232.0601 750.858 C221.3914 755.2888 210.6991 759.6626 200.0175 764.0624 C199.5459 764.8381 198.7802 764.9928 197.9617 765.0361 C204.5401 768.1582 211.1141 771.2898 217.698 774.4004 c229.6574 780.0506 241.6158 785.7028 253.5877 791.3264 C263.0345 795.7639 272.516 800.1274 281.9545 804.5822 C294.2378 810.3797 306.4855 816.2525 318.7635 822.0613 C336.2864 830.3516 353.8184 838.6228 371.356 846.8822 C377.9037 849.9659 384.478 852.9934 391.0402 856.0466 Cf0.252415 0.199252 0.203769 0 0.74902 0.74902 0.74902 Xa197.9617 765.0361 m198.7802 764.9928 199.5459 764.8381 200.0174 764.0617 C197.0178 763.757 196.6564 761.2737 195.8902 759.1001 C192.5315 749.5721 189.2368 740.0204 185.7668 730.533 C181.6211 719.1983 177.1781 707.971 173.123 696.6048 C168.0087 682.27 163.5288 667.6992 158.0949 653.4905 C151.5317 636.3287 145.587 618.9542 139.4226 601.6564 c136.4684 593.3669 136.777 593.2569 127.9279 592.9126 C108.2964 593.3197 88.6649 593.7268 69.0334 594.1339 C64.0455 596.0158 58.87 594.7155 53.7891 594.9557 C50.7515 595.0993 49.5287 595.7611 50.476 599.1055 C52.1848 605.138 52.5993 611.4364 53.8683 617.5859 C56.3321 629.525 57.9405 641.6385 60.0303 653.6575 c61.9248 664.5538 64.0533 675.4094 65.9634 686.3031 C69.6108 707.1059 73.3576 727.8945 76.6363 748.7561 c77.3708 753.43 80.5568 758.0429 77.9237 763.0597 C78.8969 765.0253 79.952 766.9257 81.9297 768.0914 C83.7214 768.3887 85.5031 768.8572 87.3051 768.9569 C99.3729 769.624 111.2931 771.6492 123.3036 772.778 c130.0521 773.4123 136.8326 774.9262 143.6468 773.853 C161.7652 770.9997 179.8584 767.986 197.9617 765.0361 Cf0.541466 0.340368 0.13611 0 0.490196 0.592157 0.72549 Xa587.7584 524.0285 m578.4847 499.2944 569.2593 474.5421 559.92 449.8328 C554.0466 434.2933 548.0966 418.7808 541.954 403.3465 C540.759 400.3441 541.4427 397.91 542.3685 395.217 C561.3845 339.9071 580.2865 284.5577 599.5284 229.3267 C601.3444 224.1143 600.0051 221.6488 595.7325 219.4599 C591.7625 217.4261 587.8672 215.2462 583.9385 213.1306 C583.0739 214.259 582.1866 213.4837 581.3201 213.1482 c575.4799 210.8867 569.5849 208.7537 563.8208 206.3119 C557.2131 203.5129 550.1091 201.8904 543.9722 197.9765 C541.9924 196.2701 540.0125 194.5638 538.0327 192.8577 C538.1091 194.9849 539.2022 196.6153 540.5908 198.103 C541.3976 198.9675 542.5759 200.3707 541.6082 201.0782 c538.0092 203.7094 538.6841 207.9375 537.4656 211.3668 C531.4931 228.1741 526.1921 245.2244 520.0239 261.9567 C515.6105 273.9283 512.3671 286.2751 507.5831 298.1289 C503.6899 307.7753 500.671 317.7745 497.2628 327.6167 C492.1194 342.4694 486.9589 357.316 481.8451 372.1788 C480.9204 374.8665 479.3879 375.518 476.9641 374.0194 C477.2618 374.778 477.4108 375.6465 477.8791 376.2787 C486.2584 387.5925 494.7274 398.8399 503.0746 410.177 C517.2142 429.3814 531.2993 448.626 545.3739 467.878 C554.0718 479.7755 562.4382 491.9276 571.4743 503.5608 C576.8165 510.4382 580.837 518.4052 587.7584 524.0285 Cf0.55758 0.471717 0.467384 0.124239 0.454902 0.454902 0.454902 Xa275.9946 172.0122 m280.0573 164.1176 280.9885 155.3522 282.9626 146.8797 C287.1263 129.0098 291.3143 111.1451 295.3743 93.2515 C299.6541 74.3897 303.7579 55.4881 308.0107 36.6201 C311.4291 21.4537 315.0507 6.33258 318.3982 -8.84918 C320.4626 -18.212 322.2245 -27.6368 324.7423 -36.9028 c325.3091 -38.9886 325.9252 -40.261 328.222 -40.1157 C327.1752 -42.0972 325.3393 -42.0205 323.4698 -42.0147 C300.6533 -41.9435 277.8514 -41.4131 255.0522 -40.4489 C250.7783 -40.268 249.1852 -38.3865 248.0961 -34.9203 C243.4573 -20.1561 240.086 -5.07953 237.0974 10.0812 C227.9978 56.2427 219.0002 102.4242 209.8862 148.5828 C209.5193 150.4404 209.6765 152.607 207.997 154.0641 C208.5687 155.1716 209.4708 155.7551 210.6905 156.07 C223.3367 159.335 235.9542 162.7141 248.6287 165.8642 C250.8406 166.414 253.3232 165.9135 255.0079 167.991 c255.0049 167.9892 255.0049 167.9893 V262.2737 167.9094 269.0357 170.4749 275.9946 172.0122 Cf0.514183 0.31043 0.096437 0 0.505882 0.615686 0.760784 Xa476.9642 374.0194 m479.3879 375.518 480.9204 374.8665 481.8451 372.1788 C486.9589 357.316 492.1194 342.4694 497.2628 327.6167 C500.671 317.7745 503.6899 307.7753 507.5831 298.1289 C512.3671 286.2751 515.6105 273.9283 520.0239 261.9567 C526.1921 245.2244 531.4931 228.1741 537.4656 211.3668 C538.6841 207.9375 538.0092 203.7094 541.6082 201.0782 c542.5759 200.3707 541.3976 198.9675 540.5908 198.103 C539.2022 196.6153 538.1091 194.9849 538.0327 192.8577 C521.4794 171.4175 504.9287 149.9756 488.3635 128.545 C487.6637 127.6397 486.8286 126.8389 486.0565 125.9891 C485.3474 127.6666 484.5258 129.3065 483.9457 131.0277 C468.2529 177.5883 452.6833 224.1907 436.8411 270.7003 C433.0525 281.8227 430.0177 293.2371 424.9064 303.8916 C424.9462 304.5941 424.9855 305.2958 425.0248 305.9976 C426.1287 306.9847 427.4448 307.8157 428.3043 308.9828 C439.5748 324.2889 450.6744 339.7221 462.0536 354.9466 C466.881 361.4053 471.1124 368.3541 476.9642 374.0194 Cf0.12726 0.097017 0.102968 0 0.858824 0.858824 0.858824 Xa197.9617 765.0361 m179.8584 767.986 161.7652 770.9997 143.6468 773.853 C136.8326 774.9262 130.0521 773.4123 123.3036 772.778 c111.2931 771.6492 99.3729 769.624 87.3051 768.9569 C85.5031 768.8572 83.7214 768.3887 81.9297 768.0914 C83.9655 772.1146 88.4686 772.3234 91.7123 774.4687 C116.7594 791.0342 142.409 806.6518 168.07 822.2155 C189.2004 835.0314 209.5518 849.1409 231.4373 860.7124 C233.0982 861.5905 234.7729 862.0174 236.6641 862.0809 c253.0424 862.6309 269.3232 864.4107 285.48 866.9792 C304.1713 869.9506 322.5367 868.132 340.9499 864.8767 C356.8819 862.06 372.8802 859.6191 388.8431 856.9751 c389.6057 856.8488 390.3088 856.3638 391.0399 856.0462 C384.478 852.9934 377.9037 849.9659 371.356 846.8822 C353.8184 838.6228 336.2864 830.3516 318.7635 822.0613 C306.4855 816.2525 294.2378 810.3797 281.9545 804.5822 C272.516 800.1274 263.0345 795.7639 253.5877 791.3264 C241.6158 785.7028 229.6574 780.0506 217.698 774.4004 c211.1141 771.2898 204.5401 768.1582 197.9617 765.0361 Cf0.621607 0.440406 0.256626 0.019562 0.427451 0.505882 0.611765 Xa476.9641 374.0194 m471.1124 368.3541 466.881 361.4053 462.0536 354.9466 C450.6744 339.7221 439.5748 324.2889 428.3043 308.9828 C427.4448 307.8157 426.1287 306.9847 425.0247 305.9976 C419.364 308.4092 414.2441 311.7711 409.2426 315.2775 C406.3478 317.3069 402.6081 318.3814 400.9937 322.0028 C406.2255 333.4633 411.4047 344.9481 416.7018 356.3783 C423.9472 372.0125 431.3326 387.5818 438.5673 403.2209 C451.1038 430.3208 463.6688 457.4084 476.0138 484.5956 C480.3277 494.0961 485.8593 503.0404 489.0499 513.0523 C499.9334 513.7774 510.5341 516.3397 521.2527 518.1075 C542.2192 521.5655 563.1346 525.3337 584.0714 528.9717 C586.0167 529.3098 587.9642 529.6358 589.9105 529.9674 C590.2227 527.6149 588.7451 525.9109 587.7585 524.0286 C580.837 518.4052 576.8165 510.4382 571.4743 503.5608 C562.4382 491.9276 554.0718 479.7755 545.3739 467.878 C531.2993 448.626 517.2142 429.3814 503.0746 410.177 C494.7274 398.8399 486.2584 387.5925 477.8791 376.2787 C477.4108 375.6465 477.2618 374.778 476.9641 374.0194 Cf0.641901 0.563195 0.558709 0.323735 0.32549 0.32549 0.32549 Xa424.9059 303.8908 m430.0177 293.2371 433.0525 281.8227 436.8411 270.7003 C452.6833 224.1907 468.2529 177.5883 483.9457 131.0277 C484.5258 129.3065 485.3474 127.6666 486.0565 125.9891 C479.0453 109.5095 472.0555 93.0203 465.0138 76.5534 C461.3624 68.0148 457.6194 59.5156 453.9177 50.9985 C450.7439 49.955 451.2778 52.7999 450.879 54.1763 C445.5376 72.6129 440.3647 91.0983 435.0385 109.5393 C427.4624 135.7701 420.3671 162.1349 412.6044 188.3177 C408.669 201.5914 404.9309 214.9413 400.9803 228.2216 C399.892 231.8799 398.9704 235.6144 397.0018 238.9214 C395.3131 241.7583 394.6929 244.7521 395.0045 247.9904 C396.1182 249.9363 397.8858 251.5515 398.0349 253.985 C402.296 261.8566 406.5715 269.7204 410.8144 277.6019 C415.5272 286.3565 420.21 295.1271 424.9059 303.8908 Cf0.202457 0.158602 0.162722 0 0.792157 0.792157 0.792157 Xa26.2128 405.9597 m23.742 407.6609 25.418 409.5109 26.1046 411.2308 C31.7052 425.2601 38.471 438.7901 43.6512 453.0182 C45.4908 458.0707 43.8402 463.3066 45.881 468.1257 C45.8818 465.7512 45.8818 463.3774 45.8818 461.0036 C47.9007 463.4504 48.9865 465.9832 50.0244 468.5355 c57.0087 485.7116 63.9828 502.8919 70.9603 520.0709 C74.3829 528.3026 77.8055 536.5343 81.2278 544.7664 C82.1443 545.0789 83.0922 545.7317 83.9737 545.652 C96.8977 544.4827 109.8571 545.2302 122.7945 544.8534 C122.834 543.9284 122.8724 543.0027 122.9107 542.0768 C120.933 537.5164 118.8825 532.986 116.9893 528.3908 C105.0252 499.3509 92.9765 470.3448 81.2129 441.2238 C76.364 429.2202 70.8464 417.4764 66.8526 405.1316 C53.306 405.4076 39.7594 405.6837 26.2128 405.9597 Cf0.658534 0.587274 0.574456 0.388006 0.290196 0.290196 0.290196 Xa26.2128 405.9597 m39.7594 405.6837 53.306 405.4076 66.8527 405.1315 C82.9953 401.4277 99.1392 397.7307 115.2796 394.0184 C126.8545 391.3562 138.4247 388.6736 149.9969 386.0002 C149.6485 385.642 149.3001 385.2839 148.9517 384.9258 C138.1225 376.9888 127.1326 369.2592 116.5257 361.0354 C110.3802 356.2706 103.9134 353.1675 96.0634 353.5404 C91.5973 353.7525 87.1012 354.7223 82.6893 354.3959 C73.684 353.7296 67.6121 357.8824 62.917 364.9457 C56.6669 371.3105 51.067 378.3087 44.2421 384.1135 C40.7071 389.8464 35.4702 394.1013 31.1732 399.1717 C29.3589 401.3126 27.1501 403.1746 26.2128 405.9597 Cf0.37583 0.304417 0.308446 0.001495 0.647059 0.647059 0.647059 Xa101.9177 166.8885 m96.4879 166.9416 91.0575 167.0583 85.6287 167.0065 C84.1086 166.992 82.3043 167.832 81.1007 166.0797 C78.5574 167.0978 78.1078 169.1685 77.9612 171.6494 c77.658 176.7842 78.6704 181.7982 79.023 186.8698 C79.2859 190.652 79.1114 194.406 78.1355 198.0933 C79.4976 199.8584 80.0757 201.939 79.9483 204.0778 c79.3685 213.8145 81.3947 223.4445 81.0416 233.1707 c80.9525 235.6265 80.8415 238.2886 84.0987 239.1109 C92.3559 239.0249 100.6136 238.9396 108.8713 238.8542 C112.8201 237.2778 116.96 238.4018 120.9917 237.9967 C120.869 227.8768 120.6208 217.763 120.2787 207.6476 C119.8638 195.3773 118.6664 183.114 119.0447 170.8224 C119.1435 167.6146 117.777 166.8553 114.8882 166.9542 c110.5705 167.1019 106.2418 166.9265 101.9177 166.8885 Cf0.320714 0.254887 0.259617 0 0.690196 0.690196 0.690196 Xa77.9237 763.0597 m80.5568 758.0429 77.3708 753.43 76.6363 748.7561 c73.3576 727.8945 69.6108 707.1059 65.9634 686.3031 C64.0533 675.4094 61.9248 664.5538 60.0303 653.6575 c57.9405 641.6385 56.3321 629.525 53.8683 617.5859 C52.5993 611.4364 52.1848 605.138 50.476 599.1055 C49.5287 595.7611 50.7515 595.0993 53.7891 594.9557 C58.87 594.7155 64.0455 596.0158 69.0332 594.1332 C63.0111 594.0722 56.9891 594.0119 50.9672 593.9516 C48.6378 594.2597 47.4641 592.4536 46.0092 591.2033 c42.0323 587.7858 38.0855 584.3333 34.1268 580.8946 C37.5053 602.0144 40.8013 623.145 44.3715 644.2367 C48.4376 668.2581 53.102 692.1944 56.0066 716.407 C56.1041 717.2197 56.2086 718.0844 56.5559 718.8064 C63.6569 733.5679 70.7939 748.312 77.9237 763.0597 Cf0.653956 0.580194 0.568231 0.366552 0.301961 0.301961 0.301961 Xa34.1268 580.8946 m38.0855 584.3333 42.0323 587.7858 46.0092 591.2033 c47.4641 592.4536 48.6378 594.2597 50.9673 593.9518 C51.2567 593.1936 51.4214 592.3541 51.8538 591.6885 C60.6785 578.1009 69.5516 564.5447 78.3626 550.9482 c79.5976 549.0425 81.3377 547.317 81.2282 544.766 C77.8055 536.5343 74.3829 528.3026 70.9603 520.0708 C63.349 518.7521 55.7377 517.4335 48.1264 516.1149 C44.8848 530.4345 41.5515 544.7341 38.4399 559.0819 c36.8696 566.3225 34.4918 573.4133 34.1268 580.8946 Cf0.348821 0.241489 0.146426 0 0.654902 0.694118 0.760784 Xa475.9617 790.0909 m475.9578 791.6154 474.9247 792.2954 473.8139 793.1394 c459.2732 804.1885 444.7655 815.2814 430.3233 826.4588 C429.2703 827.2737 427.0048 827.7415 428.0676 830.0518 C459.3244 808.0773 490.5948 786.1222 521.8248 764.1098 C527.5297 760.0887 533.0869 755.8567 538.67 751.6658 c539.5791 750.9835 540.4016 750.0977 541.0384 749.1537 c550.527 735.0867 559.981 720.9964 569.4236 706.8984 C569.7836 706.3609 569.9452 705.6903 570.2004 705.0819 C567.1066 706.0729 565.0744 708.6485 562.9684 710.7318 c546.3182 727.2031 528.2607 742.1541 511.6445 758.6672 C501.689 768.561 491.0723 777.7914 480.6889 787.2498 C479.7548 788.1006 478.3513 788.4361 477.1651 789.0108 C476.7635 789.3708 476.3625 789.7308 475.9617 790.0909 Cf0.216648 0.168551 0.174716 0 0.780392 0.780392 0.780392 Xa60.7522 266.9828 m60.2148 269.0347 59.6774 271.0865 59.1396 273.1379 C62.5315 277.2217 62.1276 282.5705 63.8305 287.2172 C65.2366 295.1407 65.2377 295.1846 72.983 294.9919 C87.2963 294.6357 101.6082 294.2224 115.9207 293.8329 C113.1252 286.1896 108.9204 279.2266 105.3464 271.9595 C104.213 269.655 102.4112 268.8106 99.7261 268.9011 C94.1002 269.0903 88.4608 268.8792 82.8269 268.8324 C76.7112 268.9092 70.5951 269.0461 64.4799 269.0156 c63.1454 269.009 60.7912 270.0114 61.186 266.967 c60.7522 266.9828 Lf0.680934 0.55758 0.404578 0.159701 0.352941 0.388235 0.45098 Xa255.0079 167.991 m253.3232 165.9135 250.8406 166.414 248.6287 165.8642 C235.9542 162.7141 223.3367 159.335 210.6905 156.07 C209.4708 155.7551 208.5687 155.1716 207.997 154.0641 C201.8325 154.0193 196.0615 151.6758 190.0077 150.9852 C194.0536 154.8676 199.5793 155.7152 204.4324 157.9108 C215.3852 162.8658 226.8957 166.5608 237.3582 172.6422 C239.8929 174.1156 241.7231 176.832 244.9812 177.0425 C245.3154 174.4413 246.6022 173.8187 249.1677 174.498 C253.9612 175.7673 258.8644 176.6156 263.6862 177.7867 c273.1201 180.0779 282.4565 182.8431 291.9716 184.7057 C299.8731 186.2525 307.1285 189.5566 314.6561 192.0485 C322.0688 194.5023 326.7799 201.3899 332.8998 206.009 C342.5748 213.3114 352.75 220.0677 361.8171 228.2014 c363.8868 230.0581 366.5259 231.0229 368.7489 232.8671 C375.7574 238.6816 383.0223 244.3212 392 247 C385.0286 239.8704 376.528 234.6517 368.7573 228.527 C355.1163 217.7754 340.6025 208.157 327.3422 196.8992 C318.4852 189.3797 307.8181 186.3356 296.7444 183.8608 C290.3466 182.431 284.2588 179.6326 278.008 177.5197 C274.4034 176.3013 270.7917 175.1195 266.9198 174.9432 C260.9198 174.6699 256.7144 169.7514 250.9627 168.2339 C252.3111 168.153 253.6595 168.072 255.0079 167.991 Cf0.431128 0.351232 0.357305 0.010742 0.596078 0.596078 0.596078 Xa63.8303 287.2174 m62.1276 282.5705 62.5315 277.2217 59.1396 273.1379 C52.2454 299.8211 50.1447 327.1573 47.8716 354.4869 C47.0475 364.3945 45.4738 374.2398 44.2421 384.1135 C51.067 378.3087 56.6669 371.3105 62.9171 364.9458 C59.8612 364.3765 60.6772 361.4919 60.2473 359.7539 c58.3196 351.9592 56.6032 344.0912 55.3298 336.1661 C54.8132 332.9514 52.4775 329.5646 55.0823 326.2031 C53.971 325.5359 54.3114 324.6641 54.5485 323.637 C56.8771 313.5507 59.0352 303.4235 61.5013 293.3716 C62.0104 291.2967 61.153 288.525 63.8303 287.2174 Cf0.338109 0.271275 0.275273 0 0.67451 0.67451 0.67451 Xa48.1264 516.1149 m55.7377 517.4335 63.349 518.7521 70.9603 520.0708 C63.9828 502.8919 57.0087 485.7116 50.0244 468.5355 c48.9865 465.9832 47.9007 463.4504 45.8818 461.0036 C45.8818 463.3774 45.8818 465.7512 45.881 468.1257 C45.9434 484.1547 47.1164 500.131 48.1264 516.1149 Cf0.503075 0.417121 0.417121 0.057191 0.521569 0.521569 0.521569 Xa84.0991 239.1116 m80.8415 238.2886 80.9525 235.6265 81.0416 233.1707 c81.3947 223.4445 79.3685 213.8145 79.9483 204.0778 c80.0757 201.939 79.4976 199.8584 78.1355 198.0933 C72.3411 221.0565 66.5467 244.0197 60.7522 266.9828 c61.186 266.967 l66.0208 260.3195 70.6574 253.514 75.7785 247.0949 C78.1442 244.1296 79.9319 240.2994 84.0991 239.1116 Cf0.663203 0.565545 0.54406 0.317357 0.313725 0.32549 0.333333 Xa543.9722 197.9765 m550.1091 201.8904 557.2131 203.5129 563.8208 206.3119 C569.5849 208.7537 575.4799 210.8867 581.3201 213.1482 c582.1866 213.4837 583.0739 214.259 583.9385 213.1306 C580.2791 208.3566 574.9576 205.9984 569.8223 203.3378 C566.1475 201.4338 562.4868 199.4797 558.9596 197.3196 C553.1359 193.7528 549.6937 193.8216 543.9722 197.9765 Cf0.680812 0.538964 0.389075 0.13785 0.356863 0.403922 0.470588 Xa392 247 m383.0223 244.3212 375.7574 238.6816 368.7489 232.8671 C366.5259 231.0229 363.8868 230.0581 361.8171 228.2014 c352.75 220.0677 342.5748 213.3114 332.8998 206.009 C326.7799 201.3899 322.0688 194.5023 314.6561 192.0485 C307.1285 189.5566 299.8731 186.2525 291.9716 184.7057 C282.4565 182.8431 273.1201 180.0779 263.6862 177.7867 c258.8644 176.6156 253.9612 175.7673 249.1677 174.498 C246.6022 173.8187 245.3154 174.4413 244.9812 177.0425 C246.2576 179.8657 249.2491 180.4593 251.5128 181.9557 C256.2551 185.0908 261.1395 188.0108 265.966 191.0189 C269.6547 190.799 271.1702 193.6276 272.9922 196.0264 C285.4495 204.306 297.8799 212.6264 310.373 220.8517 C319.7333 227.0146 329.398 232.7334 337.9466 240.0594 C339.8782 237.0119 342.5363 239.0617 344.6165 239.452 C356.9419 241.7646 369.1755 244.5697 381.5076 246.8425 C387.6483 247.9742 393.9853 248.2028 398.0349 253.985 C397.8858 251.5515 396.1182 249.9363 395.0045 247.9904 C394.0031 247.6602 393.0015 247.3301 392 247 Cf0.680934 0.55758 0.404578 0.159701 0.352941 0.388235 0.45098 Xa275.9946 172.0122 m269.0357 170.4749 262.2737 167.9094 255.0049 167.9893 C261.1583 170.2928 267.5067 171.8685 273.9414 173.1494 C275.0942 173.3787 275.8909 173.4504 275.9946 172.0122 Cf0.486854 0.402869 0.404974 0.044129 0.537255 0.537255 0.537255 Xa292.2894 406.0218 m279.4914 376.9023 266.7029 347.7787 253.89 318.666 C249.9682 309.7552 245.9796 300.8738 242.0216 291.9792 C236.758 290.6851 231.4782 289.4536 226.2345 288.084 C213.4846 284.7539 200.7514 281.3597 188.0114 277.9913 C182.3648 277.3082 183.4193 281.941 182.5167 284.9687 c175.937 307.0389 169.3596 329.1097 162.829 351.1945 C159.5015 362.4471 156.2724 373.7289 152.9988 384.9974 C152.9993 385.3333 152.9999 385.6691 153.0005 386.0049 C162.7896 387.5497 172.5732 389.1311 182.3693 390.6304 C194.2955 392.4555 206.2297 394.2291 218.1652 395.9933 C233.2026 398.2161 248.23 400.5135 263.29 402.5725 C272.7851 403.8707 282.1596 406.2493 291.8431 405.9843 c292.2893 406.0218 292.2894 406.0218 Vf0.672602 0.581414 0.498268 0.280552 0.321569 0.333333 0.360784 Xa399.9767 322.0073 m393.4456 327.0442 386.8757 332.032 380.3924 337.1298 C371.0472 344.4777 361.7646 351.9053 352.4558 359.2996 C337.4512 371.2181 322.5179 383.2283 307.4017 395.0037 C302.491 398.829 298.4637 403.9224 292.2876 406.0217 C292.2893 406.0218 291.8431 405.9843 291.8441 405.9844 C293.5919 409.9221 295.4311 413.8218 297.071 417.8036 C309.4464 447.851 321.7825 477.9146 334.1309 507.9731 C334.7555 506.8255 335.5369 505.7352 335.9802 504.5215 c340.1781 493.029 344.3257 481.5181 348.4738 470.0074 C353.1889 456.9231 357.9918 443.8691 362.5709 430.7373 C368.3853 414.0631 373.8319 397.2592 379.7687 380.6295 C386.726 361.1414 394.1168 341.8073 400.0559 321.9683 c399.9767 322.0073 Lf0.564874 0.479499 0.474708 0.140749 0.443137 0.443137 0.443137 Xa188.0114 277.9913 m200.7514 281.3597 213.4846 284.7539 226.2345 288.084 C231.4782 289.4536 236.758 290.6851 242.0216 291.9792 C235.3694 279.3786 228.7361 266.7679 222.0598 254.1803 C213.7597 238.5314 205.4389 222.8934 197.0992 207.2656 C189.696 193.3928 182.343 179.4919 174.7829 165.7049 C172.1031 160.8181 167.7772 163.1315 163.9195 163.9388 C166.6605 163.9394 169.4007 163.9394 172.7817 163.9394 C171.6871 165.794 171.1 166.9509 170.3667 168.0063 C162.2626 179.6705 154.2145 191.3748 145.9933 202.9559 C137.6876 214.6559 130.3137 227.0224 120.9917 237.9967 C116.96 238.4018 112.8201 237.2778 108.8718 238.855 C117.613 238.5855 125.5155 239.8477 133.2157 245.2556 c145.5352 253.9078 158.9893 260.9279 171.6901 269.0653 C174.873 271.1046 179.1463 272.0615 180.8824 276.1027 C180.5718 276.7125 180.2607 277.3228 179.9494 277.9331 C180.2523 278.2587 180.5552 278.5842 180.8581 278.9098 C183.1444 277.8393 185.2705 275.5211 188.0114 277.9913 Cf0.664485 0.507195 0.332952 0.078737 0.384314 0.443137 0.529412 Xa398.0349 253.985 m393.9853 248.2028 387.6483 247.9742 381.5076 246.8425 C369.1755 244.5697 356.9419 241.7646 344.6165 239.452 C342.5363 239.0617 339.8782 237.0119 337.9466 240.0594 C344.5219 250.4497 352.6963 259.64 360.0617 269.437 C370.5233 283.3522 381.3458 296.9955 391.8824 310.8551 C394.6584 314.5065 398.5393 317.3813 399.977 322.0072 C399.9767 322.0073 400.0559 321.9683 400.0553 321.9686 C400.3674 321.9872 400.6804 321.9985 400.9937 322.0028 C402.6081 318.3814 406.3478 317.3069 409.2426 315.2775 C414.2441 311.7711 419.364 308.4092 425.0245 305.9976 C424.9855 305.2958 424.9462 304.5941 424.9064 303.8916 C420.21 295.1271 415.5272 286.3565 410.8144 277.6019 C406.5715 269.7204 402.296 261.8566 398.0349 253.985 Cf0.512871 0.428687 0.428687 0.071809 0.505882 0.505882 0.505882 Xa120.9917 237.9967 m130.3137 227.0224 137.6876 214.6559 145.9933 202.9559 C154.2145 191.3748 162.2626 179.6705 170.3667 168.0063 C171.1 166.9509 171.6871 165.794 172.7817 163.9394 C169.4007 163.9394 166.6605 163.9394 163.9195 163.9388 C144.1735 164.3647 124.4982 166.7048 104.7129 166.1146 C103.7899 166.087 102.8503 166.6185 101.9181 166.8892 C106.2418 166.9265 110.5705 167.1019 114.8882 166.9542 c117.777 166.8553 119.1435 167.6146 119.0447 170.8224 C118.6664 183.114 119.8638 195.3773 120.2787 207.6476 C120.6208 217.763 120.869 227.8768 120.9917 237.9967 Cf0.680934 0.55758 0.404578 0.159701 0.352941 0.388235 0.45098 Xa272.9922 196.0264 m271.1702 193.6276 269.6547 190.799 265.966 191.0189 C268.0158 193.098 270.0729 195.1671 272.9922 196.0264 Cf0.652949 0.541192 0.427375 0.166262 0.372549 0.396078 0.443137 Xa400.9937 322.0028 m400.6804 321.9985 400.3674 321.9872 400.0553 321.9686 C394.1168 341.8073 386.726 361.1414 379.7687 380.6295 C373.8319 397.2592 368.3853 414.0631 362.5709 430.7373 C357.9918 443.8691 353.1889 456.9231 348.4738 470.0074 C344.3257 481.5181 340.1781 493.029 335.9802 504.5215 c335.5369 505.7352 334.7555 506.8255 334.1301 507.9732 C330.7076 510.4418 326.3884 507.7467 322.9157 509.9225 C325.9246 510.6373 329.2361 508.8815 332.0677 511.0435 C334.9125 511.5277 334.0544 513.8238 333.9517 515.4143 C333.0886 528.7757 332.4661 542.148 331.2147 555.492 C330.1342 567.0138 330.0347 578.618 329.1309 590.1776 c327.4674 611.4529 326.291 632.7674 325.0306 654.0727 C324.2386 667.4609 324.1254 680.9086 322.7788 694.2358 C322.183 700.133 322.9671 706.2061 321.0259 711.9664 C321.0779 712.578 321.13 713.1896 321.1821 713.8012 C356.8518 731.3645 392.5246 748.9217 428.1899 766.494 C444.1218 774.3437 460.0385 782.224 475.9619 790.0906 C476.3625 789.7308 476.7635 789.3708 477.1651 789.0108 C477.7958 772.2396 478.3895 755.4668 479.0645 738.6974 C480.0606 713.9498 480.959 689.1967 482.2039 664.4613 C482.9224 650.1858 483.6265 635.915 484.1552 621.6294 C485.3047 590.5699 486.6747 559.5169 488.2597 528.4768 C488.5219 523.3412 488.8204 518.1957 489.0496 513.052 C485.8593 503.0404 480.3277 494.0961 476.0138 484.5956 C463.6688 457.4084 451.1038 430.3208 438.5673 403.2209 C431.3326 387.5818 423.9472 372.0125 416.7018 356.3783 C411.4047 344.9481 406.2255 333.4633 400.9937 322.0028 Cf0.383764 0.310857 0.316075 0.00238 0.639216 0.639216 0.639216 Xa321.1821 713.8012 m321.13 713.1896 321.0779 712.578 321.0256 711.9666 C315.9581 698.891 310.8335 685.837 305.835 672.7348 c293.8465 641.3108 281.8751 609.88 270.0393 578.3984 C269.0207 575.6889 267.5483 574.733 264.932 574.8907 C257.0535 575.9313 249.1702 576.937 241.2974 578.0193 C218.0104 581.2204 194.7439 584.5774 171.4361 587.6189 C159.6246 589.1602 147.8991 591.4351 135.9692 592.0318 C133.2986 592.415 130.4567 591.2346 127.9279 592.9126 C136.777 593.2569 136.4684 593.3669 139.4226 601.6564 c145.587 618.9542 151.5317 636.3287 158.0949 653.4905 C163.5288 667.6992 168.0087 682.27 173.123 696.6048 C177.1781 707.971 181.6211 719.1983 185.7668 730.533 C189.2368 740.0204 192.5315 749.5721 195.8902 759.1001 C196.6564 761.2737 197.0178 763.757 200.0174 764.0617 C210.6991 759.6626 221.3914 755.2888 232.0601 750.858 C261.7727 738.5184 291.4754 726.1551 321.1821 713.8012 Cf0.553826 0.469062 0.464027 0.119448 0.458824 0.458824 0.458824 Xa127.9279 592.9126 m130.4567 591.2346 133.2986 592.415 135.9694 592.0316 C131.955 576.3419 127.9406 560.6523 123.9262 544.9628 C123.5486 544.9261 123.171 544.8893 122.7933 544.8526 C109.8571 545.2302 96.8977 544.4827 83.9737 545.652 C83.0922 545.7317 82.1443 545.0789 81.2278 544.7664 C81.3377 547.317 79.5976 549.0425 78.3626 550.9482 c69.5516 564.5447 60.6785 578.1009 51.8538 591.6885 C51.4214 592.3541 51.2567 593.1936 50.9673 593.9518 C56.9891 594.0119 63.0111 594.0722 69.0332 594.1332 C88.6649 593.7268 108.2964 593.3197 127.9279 592.9126 Cf0.534935 0.450904 0.448829 0.098817 0.478431 0.478431 0.478431 Xa149.9969 386.0002 m138.4247 388.6736 126.8545 391.3562 115.2796 394.0184 C99.1392 397.7307 82.9953 401.4277 66.8527 405.1314 C70.8464 417.4764 76.364 429.2202 81.2129 441.2238 C92.9765 470.3448 105.0252 499.3509 116.9893 528.3908 C118.8825 532.986 120.933 537.5164 122.9111 542.0764 C126.0807 539.5728 124.4749 535.8776 125.2382 532.7737 C129.063 517.2196 130.957 501.3085 133.9244 485.5947 c136.9521 469.5619 139.3041 453.4027 142.153 437.3345 C144.5134 424.0214 147.4256 410.8008 149.5203 397.4492 c150.0957 393.7816 152.3476 389.8911 149.9969 386.0002 Cf0.477272 0.396643 0.399512 0.037751 0.545098 0.545098 0.545098 Xa149.9969 386.0002 m152.3476 389.8911 150.0957 393.7816 149.5203 397.4492 c147.4256 410.8008 144.5134 424.0214 142.153 437.3345 C139.3041 453.4027 136.9521 469.5619 133.9244 485.5947 c130.957 501.3085 129.063 517.2196 125.2382 532.7737 C124.4749 535.8776 126.0807 539.5728 122.9111 542.0764 C122.8724 543.0027 122.834 543.9284 122.7945 544.8534 C123.171 544.8893 123.5486 544.9261 123.9266 544.963 C125.5346 543.844 127.0894 542.6383 128.7584 541.6196 c140.1179 534.6856 152.0035 528.6293 163.0042 521.0955 C163.1196 520.2913 163.3844 519.4763 163.3279 518.6844 c162.5753 508.1281 162.0162 497.5499 160.9102 487.0297 C160.1324 479.632 159.3331 472.2458 158.7237 464.8279 c157.6966 452.3254 156.1352 439.8674 155.0449 427.3692 C154.1837 417.4969 153.4355 407.6218 152.2342 397.7774 c151.7613 393.9026 151.1454 389.8186 153.0005 386.0049 C152.9999 385.6691 152.9993 385.3333 152.9988 384.9974 C151.9923 384.6623 150.9857 384.3271 149.9792 383.9921 C149.6367 384.3033 149.2942 384.6146 148.9517 384.9258 C149.3001 385.2839 149.6485 385.642 149.9969 386.0002 Cf0.212833 0.16495 0.169802 0 0.784314 0.784314 0.784314 Xa148.9517 384.9258 m149.2942 384.6146 149.6367 384.3033 149.9793 383.9921 C133.9324 364.4102 117.8854 344.8282 101.8383 325.2463 C98.5478 324.075 94.9541 323.4061 92.024 321.6375 C83.4539 316.4646 75.2282 317.0747 66.6856 321.6365 c63.0436 323.5814 58.9634 324.7059 55.0823 326.2031 C52.4775 329.5646 54.8132 332.9514 55.3298 336.1661 C56.6032 344.0912 58.3196 351.9592 60.2473 359.7539 c60.6772 361.4919 59.8612 364.3765 62.9171 364.9458 C67.6121 357.8824 73.684 353.7296 82.6893 354.3959 C87.1012 354.7223 91.5973 353.7525 96.0634 353.5404 C103.9134 353.1675 110.3802 356.2706 116.5257 361.0354 C127.1326 369.2592 138.1225 376.9888 148.9517 384.9258 Cf0.658534 0.587274 0.574456 0.388006 0.290196 0.290196 0.290196 Xa180.8817 276.1033 m179.1463 272.0615 174.873 271.1046 171.6901 269.0653 C158.9893 260.9279 145.5352 253.9078 133.2157 245.2556 c125.5155 239.8477 117.613 238.5855 108.8718 238.8549 C100.6136 238.9396 92.3559 239.0249 84.0987 239.1109 C79.9319 240.2994 78.1442 244.1296 75.7785 247.0949 C70.6574 253.514 66.0208 260.3195 61.186 266.967 C60.7912 270.0114 63.1454 269.009 64.4799 269.0156 c70.5951 269.0461 76.7112 268.9092 82.8274 268.833 C83.8216 268.0308 85.0174 268.2078 86.1686 268.1191 C99.3533 267.1034 112.3685 269.1561 125.4159 270.3943 C143.9185 272.1503 162.3944 274.1868 180.8817 276.1033 Cf0.660487 0.589899 0.576684 0.395483 0.286275 0.286275 0.286275 Xa55.0823 326.2031 m58.9634 324.7059 63.0436 323.5814 66.6856 321.6365 c75.2282 317.0747 83.4539 316.4646 92.024 321.6375 C94.9541 323.4061 98.5478 324.075 101.8386 325.2458 C102.9111 324.8051 104.0609 324.494 105.0439 323.9048 C119.0101 315.5334 132.9121 307.0543 146.9156 298.7462 C158.1855 292.06 169.1531 284.8524 180.8581 278.9098 C180.5552 278.5842 180.2523 278.2587 179.9497 277.9336 C173.523 279.5053 167.0905 281.054 160.6703 282.6523 C145.7506 286.3665 130.8368 290.1046 115.9207 293.8329 C101.6082 294.2224 87.2963 294.6357 72.983 294.9919 C65.2377 295.1846 65.2366 295.1407 63.8305 287.2172 C61.153 288.525 62.0104 291.2967 61.5013 293.3716 C59.0352 303.4235 56.8771 313.5507 54.5485 323.637 C54.3114 324.6641 53.971 325.5359 55.0823 326.2031 Cf0.401984 0.327062 0.331121 0.004456 0.623529 0.623529 0.623529 Xa115.9207 293.8329 m130.8368 290.1046 145.7506 286.3665 160.6703 282.6523 C167.0905 281.054 173.523 279.5053 179.9497 277.9336 C180.2607 277.3228 180.5718 276.7125 180.8824 276.1028 C162.3944 274.1868 143.9185 272.1503 125.4159 270.3943 C112.3685 269.1561 99.3533 267.1034 86.1686 268.1191 C85.0174 268.2078 83.8216 268.0308 82.8274 268.8329 C88.4608 268.8792 94.1002 269.0903 99.7261 268.9011 C102.4112 268.8106 104.213 269.655 105.3464 271.9595 C108.9204 279.2266 113.1252 286.1896 115.9207 293.8329 Cf0.398352 0.324071 0.328099 0.003723 0.627451 0.627451 0.627451 Xa153.0005 386.0049 m151.1454 389.8186 151.7613 393.9026 152.2342 397.7774 c153.4355 407.6218 154.1837 417.4969 155.0449 427.3692 C156.1352 439.8674 157.6966 452.3254 158.7237 464.8279 c159.3331 472.2458 160.1324 479.632 160.9102 487.0297 C162.0162 497.5499 162.5753 508.1281 163.3279 518.6844 c163.3844 519.4763 163.1196 520.2913 163.0042 521.0949 C179.8987 520.0005 196.7959 518.9486 213.6865 517.7997 C227.5936 516.8536 241.4924 515.7869 255.3956 514.7834 C277.902 513.1589 300.409 511.5424 322.9157 509.9225 C326.3884 507.7467 330.7076 510.4418 334.1301 507.9732 C321.7825 477.9146 309.4464 447.851 297.071 417.8036 C295.4311 413.8218 293.5919 409.9221 291.8441 405.9844 C282.1596 406.2493 272.7851 403.8707 263.29 402.5725 C248.23 400.5135 233.2026 398.2161 218.1652 395.9933 C206.2297 394.2291 194.2955 392.4555 182.3693 390.6304 C172.5732 389.1311 162.7896 387.5497 153.0005 386.0049 Cf0.507958 0.421881 0.421912 0.064485 0.513725 0.513725 0.513725 Xa180.8581 278.9098 m169.1531 284.8524 158.1855 292.06 146.9156 298.7462 C132.9121 307.0543 119.0101 315.5334 105.0439 323.9048 C104.0609 324.494 102.9111 324.8051 101.8386 325.2458 C117.8854 344.8282 133.9324 364.4102 149.9793 383.9921 C150.9857 384.3271 151.9923 384.6623 152.9988 384.9974 C156.2724 373.7289 159.5015 362.4471 162.829 351.1945 C169.3596 329.1097 175.937 307.0389 182.5167 284.9687 c183.4193 281.941 182.3648 277.3082 188.0114 277.9913 C185.2705 275.5211 183.1444 277.8393 180.8581 278.9098 Cf0.658534 0.587274 0.574456 0.388006 0.290196 0.290196 0.290196 Xa322.9157 509.9225 m300.409 511.5424 277.902 513.1589 255.3956 514.7834 C241.4924 515.7869 227.5936 516.8536 213.6865 517.7997 C196.7959 518.9486 179.8987 520.0005 163.0042 521.0949 C152.0035 528.6293 140.1179 534.6856 128.7584 541.6196 c127.0894 542.6383 125.5346 543.844 123.9266 544.963 C127.9406 560.6523 131.955 576.3419 135.9694 592.0316 C147.8991 591.4351 159.6246 589.1602 171.4361 587.6189 C194.7439 584.5774 218.0104 581.2204 241.2974 578.0193 C249.1702 576.937 257.0535 575.9313 264.9322 574.8912 C268.2701 574.1157 270.7009 572.0455 272.9904 569.5977 c276.2801 566.0805 279.8175 562.7964 283.1817 559.347 C299.1794 542.9443 316.5366 527.9178 332.0677 511.0435 C329.2361 508.8815 325.9246 510.6373 322.9157 509.9225 Cf0.531243 0.446632 0.445136 0.094697 0.482353 0.482353 0.482353 Xa332.0677 511.0435 m316.5366 527.9178 299.1794 542.9443 283.1817 559.347 C279.8175 562.7964 276.2801 566.0805 272.9904 569.5977 c270.7009 572.0455 268.2701 574.1157 264.9322 574.8912 C267.5483 574.733 269.0207 575.6889 270.0393 578.3984 C281.8751 609.88 293.8465 641.3108 305.835 672.7348 c310.8335 685.837 315.9581 698.891 321.0256 711.9666 C322.9671 706.2061 322.183 700.133 322.7788 694.2358 C324.1254 680.9086 324.2386 667.4609 325.0306 654.0727 C326.291 632.7674 327.4674 611.4529 329.1309 590.1776 c330.0347 578.618 330.1342 567.0138 331.2147 555.492 C332.4661 542.148 333.0886 528.7757 333.9517 515.4143 C334.0544 513.8238 334.9125 511.5277 332.0677 511.0435 CfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF