%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (Frame 21 copy.ai)%%CreationDate: 4/26/22 4:31 PM%%Canvassize: 16383%%BoundingBox: 380 -2240 2750 1595%%HiResBoundingBox: 380.0001 -2239 2749.1599 1595%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1500.5 843.5 1500.5 843.5%AI3_TileBox: 1122 555.5 1856 1131.5%AI3_DocumentPreview: None%AI5_ArtSize: 3000 1687%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -851.9143 2628.3746 0.501191 2547 1303 18 0 0 6 45 0 0%AI5_OpenViewLayers: 77%%PageOrigin:1202 423.1102%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 80 128 8%%BeginData: 6154 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFF83AFFD4EFF7DA8FD4EFF7DAFFD4DFFAF84A8FD0BFFCACAA7%CAA7C9A8FD3CFF83AFFD06FFCFCFC9CAC9CACACFCFFFCAC9CAFD3BFF84A8%FFA8CAA7C9A1CAA8CACAFD05FFCFFFA8C9A7FD38FFCACAA1C9C9CACAFD07%FFCFFFCFCFCAFFCFFFA8C9CFFD30FFCACFA7CAA1C9A1CAA88384FFFFFFA8%FFA8CFA8CFA8CFA8CFA7CFA8CFA8CFA1CAA8FD2BFFCFCACAC9CAA7CFCAFD%05FFA8FFCFFFCFFFCFFFCFFFCFFFCFFFCACACFFFCFFFCFCACAFD26FFA8CF%A7C9A1CAA7CAA8FD05FFCFFFA8CFA8CFA8FFCACFA8FFCFFFA8FFA8CFA8C9%A0C9A8CFA8CFA1CFA8FD20FFCACAA7CAA7CAA7FFCFFD05FFCFFFCFFFCFFF%CFFFCAFFCFCFA8CFC9CAA7CAA7C9A1C9A1C9A0C2A1CAA8FFCFC9A8FD1FFF%CFA1CAA8CFA8FFFFFFAEFFA8CFA8CFA8CFA7CFA7CAA7C9A7C9A1C9A1C9A1%C9A7C9A1CAA7CAA7CFA8C9A0CAA8CFA8CFA1CFA8FD1EFFA1FD05FFCFFFCF%FFCACFA8CFCACFA7CFCACFCACFCACFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCACACFFFCFFFCAC9CFFD1EFFA1CFFFFFCFCFA8CFA8CFA8CFCACFA8FFCA%CFA8FFCFFFA8FFCFFFA8FFA8CFA8CFCAFFA8FFCFFFA8FFCFCFA7CFA8CFA8%CFA7CFA8FD1DFFC9FFFFCFFFCFFFCAFFCFFFA8C9A7CACFFFCFFFA8CAC9FF%CFCAA7C9CAFFCFFFCFCFA7CFA8CAC9CAA7CACAFFCAFFCFFFA7CACFFD1EFF%A1FFFFCFA8CFA8CFA8CFA8A099A0A0CFA8FFAECA99C3A8CA99A099C9A8FF%A8FFA1A0A7A799A0A0A099CFAECFA8CFA8C9A1FFA8FD1DFFCAFFFFCFFFCF%FFCFFFCFCAA0C9C9CFCFFFCACFA8C3A0FFA1C3C9C9A0FFCACFCFCAA0CAA8%CAA0C2A7CFCFCFA8FFCFFFA7CFCFFD1EFFA1FFFFCFA8CFA8CFA8FFA1A0A1%FFCFCFA7A0A1CAA0C9A8A1A0FFA1A0A8C9A0CFA7A0A7FFA8C9A0CFAECFA0%A0A8FFCFC9A7FFCFFD1EFFA1FFCFCFCAFFCFFFCFC9A0C9CFFFCFCFA0C9CA%C2A0FFA0C3CAC9A0CFA1C2CFCAA0CACFFFA0C3CAFFA8C3A0CFCFFFA7CFCF%FD1FFFC9A7FFA8CFA8CFA8CFA7A0A0C9A8FFA7A0A0CAA0A1A8C3A0CFA1A0%A8C9A0CFA7A0A7FFA8A1A0CFA8CAA0A0A8CFA8C9A8CFA8FD1FFFC9FFFFCF%FFCFFFCFFFA7C2A0CFFFCFA0C9A0C2A0FFA0C9CFC9A0CFA7C3CFCAA0CFCF%FFA0C3CAFFCAC3A0CFCFFFA7CFCFFD20FFA7CAFFCFA8CFA8CFA8FFA1A0A0%CFA7A0A0C9A0A1A8C9A0CFA1C2A8C9A0CFA7A0A7FFA8A0A0CFCFCFA0C3A8%CFA8C9A8CFCFFD20FFA1FFFFCFCAFFCFFFCFFFA0C2A7CFA0C9A8C2A0CFA0%C9CFC9A0CFA7C2A8CAA0CACFFFA0C2A8FFCFCFCAFFCFCFA1FFCFFD21FFCF%A1FFA8CFA8CFA8CFA8C9A0A7A7A0A0CAA0C9A8A1A0CFA0A0A8C9A0CFA1A0%A7FFA8A0A0CAA8CFA0A1A8FFA8C9A8FD23FFCACAFFCFFFCFFFCFFFA7C2A1%CFA0C9A8C3A1FFA0C9CFC9A0FFA7C2CACAA0CACFFFA0C3CAFFCFC9A0FFCF%CAA7FFCFFD22FFCAC9FFFFA8FFA7C9A7C3A0C9A8CFA8CAA0C9CAC9A0C9A0%A0A8CAA0C9A0C2A8CFA8C2A0CFA8A852512727F8F8F8272752527DA8FD13%FFCACFA8CACAFD06FFA8CAFFFFCFCFA0C2A0C9CFFFCFFFCAC2A0FFCAC2A0%C2A7FFA8C9A0C2A7FFCFCFC2A17627FD0EF827527DFD09FFCACAA7C9A1C9%A0C2A0C9A8FD08FFA1FFCFCFA8CAA7CAA8CFA8CFA8CFA8CFA8FFA8C9A7CF%A8CFA8CAA7CFA8FFCF7CFD05F8272727FD0DF87DA8FD04FFCAFD04A09AFD%04A0CAFD0BFFA7FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCACF%CACFA7CFA751FD04F851A77C4BFD06F8277D7D7D5252FD04F852FFFFFFA0%C2A0C3A0C9A0C2A7FD0DFFCAA7FFA8FFCACFA8FFCFCFA8CFA8CFA7CAA7C9%A1C9A1C9A1C9A7CAA727F8F8F827A8A827FD08F8FD0427522752FD05F852%A1A0A0C2A0A0A0C9CAFD0FFFCAC9CFA8CFCACAA7CAA7C9A1C9A7C9A7CAC9%CFCAFFCFFFCFFFFF7CF8F8F87DFFA8FD17F8A0A0C2A0C2A0CAFD12FFCFA7%C9A1C9A7C9A7CFA8CFA8FFAEFFA8FFCFA8A8FD04FFA8F8F8F87DFF7DFD17%F8FD06A0CFFD25FF83AFFD04FF52F8F87DFFA8FD17F8A0C2C9A0C2A1FD27%FF84A8FD04FF27F827FFFFFD17F8FD04A0C2A7FD28FF83AEFD04FFF8F827%FF52FD15F820A0A0C9A0A0A8FD29FF84A8FFFFFFA8FD19F826A0A0C2A075%7DFD09FFA8FFA8FFA8FD1CFF83AFFFFFCFC926FD16F82775C9A0C9A051F8%7D7D7DFD05527D527D7DA8A8FD1DFF84A8FFA1C2A0A04B27FD12F82676A0%C2A0C275FD06F8272752527DA8A8A8FD20FF83A7A0C2A0C3A0C9A0A04B27%FD0BF8274B76A0C9A0C9A0C27652527D7DFFFFFFA8FD24FFCACFA1FD0AA0%C9A0A075A07576757675A075A0A0C2A0C2A0A099C9A8FD2EFFA0C2A0C9A0%C3A0C9A0C3A0C9A0C3A0C9A0C9A0C9C2C9A0C9A0C3A0C3A0C2A1FD32FFA8%A1A0C2A0A0A0C2A0A0A0C2A0A0A0C2A0A0A0C2FD07A0CACAFD34FF84A8CA%CAA1C9A0C3A0C2A0C2A0C2A0C3A0A0A0C9A1C9A7CFFD38FF84A8FD05FFA8%CFA8CAA7CACA51F8F8F8A8FD3DFF83AEFD0BFFA8F8F8F8FD3FFF84A8FD0B%FFF8F8F8A8FFFFA8FFFFFF7DA8A8A87DFD04A8FD30FF83AFFD0AFF27FD0A%F827F85227527D7DA8FD31FF8484FD09FF7DFD06F82727527DA87DA8A8FD%36FF83AFFD0AFF52A8A8FD41FF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AF%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AF%FD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AF%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AF%FD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AFFD4EFF8484FD4EFF83AF%FD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AF%FD4EFF8484FD4EFF83AFFD4EFF84A8FD4EFF83AEFD4EFF84A8FD4EFF83AE%FD4EFF84A8FD4EFF83AFFD4EFF8484FD32FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Layer 2) Ln0 Au0 O0.749721 0.679194 0.670497 0.901457 0 0 0 Xa0 J 0 j 1 w 10 M []0 d0 XR1215 1550 m1206 1550 L1206 1480 L1215 1480 L1215 1550 Lf*u0.46659 0.390753 0.392523 0.030945 0.556863 0.552941 0.552941 Xa1247.5511 1570.4956 m1247.5504 1570.495 1247.5497 1570.4945 1247.5488 1570.494 c1247.5496 1570.4945 1247.5504 1570.4951 1247.5511 1570.4956 CF1247.569 1570.5076 m1247.5674 1570.5065 1247.5658 1570.5054 1247.5642 1570.5043 c1247.5658 1570.5054 1247.5674 1570.5065 1247.569 1570.5076 CF1247.5962 1570.527 m1247.593 1570.5247 1247.59 1570.5225 1247.5868 1570.5201 c1247.59 1570.5225 1247.593 1570.5247 1247.5962 1570.527 CF1 D1247.6151 1570.5415 m1247.6113 1570.5385 1247.6074 1570.5355 1247.6035 1570.5325 c1247.6074 1570.5355 1247.6113 1570.5385 1247.6151 1570.5415 CF1174.3003 1570.615 m1174.3716 1570.5452 1174.452 1570.4874 1174.5386 1570.4426 c1174.5161 1570.4552 1174.5034 1570.4624 1174.5007 1570.464 C1174.5007 1570.4633 l1174.4261 1570.5062 1174.3591 1570.5574 1174.3003 1570.615 CF1174.2844 1570.6309 m1174.2894 1570.6257 1174.2944 1570.6206 1174.2996 1570.6156 c1174.2944 1570.6207 1174.2894 1570.6257 1174.2844 1570.6309 CF0 D1174.2701 1570.6459 m1174.2731 1570.6427 1174.276 1570.6395 1174.2791 1570.6365 c1174.276 1570.6395 1174.2731 1570.6427 1174.2701 1570.6459 CF1174.2407 1570.6787 m1174.2412 1570.6781 1174.2417 1570.6775 1174.2423 1570.6768 c1174.2417 1570.6775 1174.2412 1570.6781 1174.2407 1570.6787 CF1174.106 1570.8817 m1174.1072 1570.8792 1174.1085 1570.8766 1174.1097 1570.874 c1174.1085 1570.8766 1174.1072 1570.8792 1174.106 1570.8817 CF1 D1174.0927 1570.9092 m1174.095 1570.9042 1174.0974 1570.899 1174.0999 1570.894 c1174.0974 1570.899 1174.095 1570.9042 1174.0927 1570.9092 CF1248 1571.3185 m1247.9963 1571.0194 1247.8579 1570.7333 1247.6204 1570.5455 c1247.7509 1570.6486 1247.8575 1570.7855 1247.9253 1570.9506 c1247.9746 1571.071 1247.9988 1571.1957 1248 1571.3185 CF1173.9998 1571.3301 m1173.9996 1571.1898 1174.0291 1571.048 1174.0905 1570.9141 c1174.031 1571.0443 1173.9999 1571.1864 1173.9998 1571.3301 CF0 D1248 1571.3413 m1248.0001 1571.3375 1248.0001 1571.3337 1248.0001 1571.33 c1248.0001 1571.3337 1248.0001 1571.3375 1248 1571.3413 CF1174.1138 1571.7936 m1174.113 1571.7924 1174.1124 1571.7911 1174.1118 1571.7899 c1174.1124 1571.7911 1174.113 1571.7924 1174.1138 1571.7936 CF1174.1271 1571.8182 m1174.1256 1571.8157 1174.1241 1571.8132 1174.1228 1571.8107 c1174.1241 1571.8132 1174.1256 1571.8157 1174.1271 1571.8182 CF1174.137 1571.8356 m1174.1362 1571.8345 1174.1356 1571.8333 1174.1349 1571.8322 c1174.1356 1571.8334 1174.1362 1571.8345 1174.137 1571.8356 CF1174.1498 1571.8568 m1174.1483 1571.8545 1174.1469 1571.8522 1174.1455 1571.8499 c1174.1469 1571.8522 1174.1483 1571.8545 1174.1498 1571.8568 CF1 D1174.1655 1571.8816 m1174.1627 1571.8772 1174.1598 1571.8728 1174.157 1571.8684 c1174.1599 1571.8728 1174.1627 1571.8772 1174.1655 1571.8816 CF0 D1174.1775 1571.8993 m1174.1754 1571.8962 1174.1733 1571.8932 1174.1711 1571.89 c1174.1733 1571.8932 1174.1754 1571.8962 1174.1775 1571.8993 CF1174.1913 1571.9187 m1174.1886 1571.915 1174.186 1571.9115 1174.1835 1571.9078 c1174.186 1571.9115 1174.1886 1571.915 1174.1913 1571.9187 CF1174.2057 1571.938 m1174.204 1571.9358 1174.2023 1571.9335 1174.2006 1571.9313 c1174.2023 1571.9335 1174.204 1571.9358 1174.2057 1571.938 CF1174.2185 1571.9545 m1174.2174 1571.953 1174.2163 1571.9515 1174.2151 1571.9502 c1174.2163 1571.9515 1174.2174 1571.953 1174.2185 1571.9545 CF1 D1174.2335 1571.9728 m1174.2333 1571.9724 1174.2329 1571.9722 1174.2327 1571.9718 c1174.233 1571.9722 1174.2333 1571.9724 1174.2335 1571.9728 CF1235.2645 1576.4224 m1235.4478 1575.6991 1235.598 1574.9631 1235.7141 1574.2161 c1238.5063 1573.4092 1241.3669 1572.4534 1244.2917 1571.3297 c1245.0634 1571.6262 1245.8401 1571.9346 1246.6204 1572.2548 c1246.7446 1572.3058 1246.8733 1572.33 1246.9998 1572.33 c1247.1252 1572.33 1247.2485 1572.3062 1247.3636 1572.2612 c1243.2098 1573.9652 1239.1707 1575.3361 1235.2645 1576.4224 CF1186.8818 1576.9724 m1179.339 1574.882 1174.9296 1572.4382 1174.53 1572.2128 c1174.6748 1572.2896 1174.8368 1572.3301 1175.001 1572.3301 c1175.1704 1572.3301 1175.3422 1572.287 1175.4994 1572.1962 C1175.5291 1572.1797 L1175.635 1572.1212 l1175.7306 1572.0688 1175.8772 1571.9897 1176.0726 1571.8885 c1176.3516 1571.7445 1176.7301 1571.5546 1177.2046 1571.33 c1178.9811 1572.1703 1182.1028 1573.4969 1186.3746 1574.7473 c1186.509 1575.5016 1186.6787 1576.2437 1186.8818 1576.9724 CF*U0 D0.451118 0.081636 0.360418 0 0.560784 0.756863 0.682353 Xa1211 1545.9996 m1224.8099 1545.9996 1235.9998 1556.9692 1235.9998 1570.4998 c1235.9998 1584.0309 1224.8099 1594.9998 1211 1594.9998 c1197.1902 1594.9998 1186.0004 1584.0309 1186.0004 1570.4998 c1186.0004 1556.9692 1197.1902 1545.9996 1211 1545.9996 CF1230 1512 m1193 1512 L1193 -2239 L1230 -2239 L1230 1512 Lf0.039734 0.023194 0.166049 0 0.952941 0.941176 0.843137 Xa1918.33 1299.2579 m1872.6 841.033 l1872.3101 838.366 1872.02 835.699 1871.52 833.032 c1862.14 774.285 1814.53 728.441 1754.73 721.738 C1622.9399 706.961 L1604.5 704.366 l1623.51 707.119 1593.5 702.866 v1579.4301 700.92 1571 699.866 1570.5 699.866 c1570 699.866 1550.6899 698.5 1550.5 698.5 c1550.3101 698.5 1542.8 698.024 1542.5 697.866 c1535 696.866 1534.58 697.086 V1396.01 681.52 L818.722 616.71 l781.789 612.53 745.578 623.99 718.023 647.0601 c714.705 649.8 711.531 652.76 708.501 655.85 c705.544 658.88 702.73 662.05 699.989 665.37 c696.094 670.27 692.415 675.46 689.169 680.94 C484.886 1023.833 l437.421 1103.556 483.804 1206.1279 575.125 1223.068 C1761.15 1443.566 l1771.04 1445.4399 1780.85 1446.089 1790.37 1445.801 c1794.62 1445.657 1798.8101 1445.296 1802.92 1444.792 c1807.25 1444.215 1811.5 1443.422 1815.76 1442.485 c1878.4399 1427.924 1925.1899 1368.601 1918.33 1299.33 C1918.33 1299.2579 Lf0.06598 0.446754 0.645472 0 0.909804 0.607843 0.403922 Xa821.377 803.486 m774.19 756.666 704.059 789.563 Y704.059 843.308 l718.128 817.626 755.07 826.283 v806.514 838.258 786.384 918.624 742.516 963.423 c641.72 1066.5129 717.551 1151.7839 751.318 1159.72 c793.743 1169.6749 819.934 1159.359 Y819.934 1100.203 l788.476 1120.98 768.851 1101.502 v727.797 1060.7419 786.023 1001.875 808.174 978.573 c862.504 921.221 866.4 848.214 821.377 803.558 C821.377 803.486 Lf1032.0601 1155.3199 m1032.0601 782.783 L973.691 782.783 L973.691 944.596 L940.14 944.596 L940.14 846.123 L881.77 846.123 L881.77 1091.908 L940.14 1091.908 L940.14 993.435 L973.691 993.435 L973.691 1155.3199 L1032.0601 1155.3199 Lf*u1221.53 1036.4299 m1221.53 905.854 l1221.53 826.066 1209.7 778.236 1147.5 778.236 c1077.23 778.236 1073.55 843.38 1073.55 905.854 C1073.55 1036.4299 l1073.6899 1049.271 1063.16 1160.585 1146.42 1164.048 c1208.61 1161.9559 1223.26 1115.3519 1221.46 1036.4299 C1221.53 1036.4299 Lf1 D1170.16 1034.9149 m1169.4399 1073.006 l1169.4399 1100.131 1161.5699 1112.755 1146.49 1112.323 c1127.23 1112.323 1125.78 1073.006 Y1125.0601 1034.9149 L1125.0601 907.297 L1125.78 869.207 l1125.78 844.534 1131.63 829.89 1147.5 829.89 c1164.17 829.89 1169.65 844.606 1169.4399 869.207 C1170.16 907.297 L1170.16 1034.9149 Lf*U0 D1408.55 1155.3199 m1408.55 902.97 l1409.92 798.365 1370.59 778.238 1334.52 778.238 c1275.21 778.238 1260.49 831.19 1260.49 902.97 C1260.49 1091.908 L1311.86 1091.908 L1311.86 904.485 l1311.86 876.783 1311.29 828.881 1334.45 828.881 c1359.7 828.881 1356.96 876.494 1356.96 904.485 C1356.96 1155.3199 L1408.4 1155.3199 L1408.55 1155.3199 Lf1614.76 1155.3199 m1604.8 1106.481 L1551.84 1106.481 L1550.3199 782.711 L1491.16 782.711 L1492.67 1106.481 L1435.17 1106.481 L1445.13 1155.3199 L1614.6801 1155.3199 L1614.76 1155.3199 Lf*u1637.12 938.534 m1637.12 1091.762 L1695.42 1091.762 L1695.42 938.534 L1637.12 938.534 Lf1637.77 845.111 m1637.77 902.102 L1694.77 902.102 L1694.77 845.111 L1637.77 845.111 Lf*U1668.1801 1273.447 m1754 1292.447 L1666.37 1298.588 L1687.65 1332.109 L1657.72 1306.0289 L1638.8199 1392 L1632.62 1304.223 L1599.23 1325.535 L1625.1899 1295.553 L711 1215.434 L1627.0699 1270.412 L1605.72 1236.891 L1635.65 1262.9709 L1654.62 1177 L1660.8199 1264.777 L1694.21 1243.465 L1668.1801 1273.447 Lf*u1 D1815.47 1442.89 m1811.65 1447.361 1807.54 1451.687 1803.14 1455.725 c1770.1 1486.0809 1725.8101 1498.771 1681.66 1490.551 C495.657 1270.1279 l449.636 1261.547 412.127 1232.129 392.795 1189.443 c373.464 1146.757 376.133 1099.24 400.153 1058.933 C604.505 715.932 l628.742 675.26 671.589 649.8101 717.898 647.22 c720.567 647.0699 723.308 647 725.977 647 c731.171 647 736.436 647.29 741.702 647.87 C1435.33 725.81 L1644.88 749.388 l1656.5 750.5 1696.52 756.076 1698 756.5 c1715.5 761.5 1714.5 760.5 1725.3101 767.27 c1755.1 782.412 1778.97 807.793 1792.1 838.654 c1797.51 851.416 1801.12 865.116 1802.5601 879.393 C1848.29 1337.762 l1852.11 1376.41 1840.36 1413.832 1815.62 1442.89 C1815.47 1442.89 Lf0 D1832.42 1339.276 m1786.6899 880.907 l1785.25 865.909 1781.0601 851.705 1774.64 838.726 c1756.1801 800.943 1719.3199 773.616 1675.8199 768.712 C1457.33 744.125 L739.899 663.51 l726.338 662 712.849 662.72 699.865 665.46 c666.251 672.6 636.244 693.435 618.066 723.936 C413.642 1067.0809 l392.363 1102.845 389.982 1145.098 407.15 1182.953 c424.317 1220.88 457.571 1246.9819 498.542 1254.553 C1684.55 1475.121 l1692.34 1476.563 1700.2 1477.2839 1707.92 1477.2839 c1738 1477.2839 1767 1466.54 1790.08 1446.2791 c1790.87 1445.558 1791.67 1444.9089 1792.39 1444.188 c1821.75 1417.2209 1836.3199 1379.078 1832.35 1339.42 C1832.42 1339.276 Lf*U2749.1599 827.192 m2667.77 803.385 2514.24 709.674 2345.47 573.25 c2335.73 565.39 2326.21 557.74 2316.8301 550.46 c2257.3799 503.49 2204.3401 465.6899 2153.9099 435.03 c2020.65 353.8 1905.71 322.71 1738.53 306.6899 c1724.25 305.3199 1709.6 304.1 1694.52 302.9399 c1669.92 301.0699 1646.1801 299.62 1623.3101 298.76 c1262.84 284.4 1115 386.1899 Y1366.16 511 l1366.66 510.35 1367.8199 509.1899 v1381.67 494.4 1488.96 394.78 1837.24 427.8199 c2094.46 452.2 2238.47 605.79 2303.48 700.223 c2333.5701 743.869 2346.99 775.106 2346.99 775.539 c2455 814.423 2734.8 825.388 2749.1599 827.408 C2749.1599 827.192 Lf0.749721 0.679194 0.670497 0.901457 0 0 0 Xa2150.3 217.89 m1553.03 143.8 l1540.33 142.21 1531.53 156.21 1538.46 167.03 C1623.3101 298.61 l1646.1801 299.48 1669.92 300.92 1694.52 302.8 c1709.6 303.95 1724.25 305.1801 1738.53 306.55 C1664.4399 231.52 l1658.23 225.24 1662.7 214.71 1671.51 214.78 C2150.23 217.89 L2150.3 217.89 Lf2721.0901 508.98 m2153.98 435.03 l2204.4199 465.6899 2257.3799 503.5699 2316.8999 550.46 C2297.1299 510.13 l2293.3101 502.27 2299.22 493.11 2307.95 493.47 C2721.0901 508.98 Lf*u1 D1894.74 838.589 m1868.05 841.691 1841.5699 843.495 1815.45 843.928 c1812.63 843.928 1809.8199 844 1807.01 844 c1804.05 844 1801.09 844 1798.13 844 c1757.08 843.784 1717.11 839.96 1679.08 832.241 c1590.7 814.278 1526.77 784.484 1480.74 749.351 c1476.7 746.321 1472.87 743.219 1469.12 740.117 c1465.51 737.087 1462.05 734.057 1458.66 730.955 c1443.15 716.743 1430.09 701.882 1419.1899 686.88 c1371.79 621.3 1365.15 551.3199 1367.8199 509.05 c1367.96 508.9 1368.11 508.76 1368.25 508.54 C1368.4 508.4 l1368.83 507.97 1369.34 507.46 1369.91 506.8101 c1370.5601 506.16 1371.36 505.4399 1372.22 504.65 c1372.87 504.0699 1373.52 503.42 1374.3101 502.77 c1375.3199 501.91 1376.41 501.04 1377.5601 500.03 c1378.14 499.53 1378.79 499.02 1379.4399 498.52 c1380.09 498.01 1380.74 497.4301 1381.38 496.9301 c1382.11 496.35 1382.83 495.85 1383.55 495.27 c1384.13 494.84 1384.78 494.33 1385.42 493.9 c1386.0699 493.39 1386.72 492.96 1387.45 492.46 c1388.3101 491.8101 1389.25 491.16 1390.1899 490.58 c1391.12 489.9301 1392.14 489.28 1393.15 488.63 c1393.65 488.34 1394.16 487.98 1394.66 487.62 c1395.67 486.97 1396.75 486.25 1397.84 485.6 c1400.58 483.87 1403.54 482.14 1406.71 480.34 c1408.08 479.54 1409.45 478.8199 1410.89 478.03 c1411.54 477.67 1412.1899 477.3101 1412.84 476.95 C1412.99 476.95 l1413.78 476.4399 1414.5 476.08 1415.3 475.65 c1416.52 475 1417.75 474.35 1418.98 473.77 c1421.5 472.47 1424.1 471.25 1426.77 469.95 c1428.14 469.3 1429.51 468.65 1430.95 468 c1433.77 466.7 1436.65 465.47 1439.6801 464.1801 c1441.2 463.53 1442.71 462.88 1444.3 462.23 c1445.89 461.58 1447.48 460.9301 1449.13 460.28 c1449.9301 459.99 1450.72 459.63 1451.59 459.34 c1453.1801 458.77 1454.76 458.12 1456.35 457.54 C1456.64 457.47 l1458.37 456.8199 1460.1 456.17 1461.83 455.59 c1463.5699 454.9399 1465.4399 454.29 1467.24 453.72 c1468.11 453.4301 1469.05 453.0699 1469.99 452.78 c1470.92 452.49 1471.86 452.13 1472.73 451.84 c1474.6 451.26 1476.55 450.61 1478.5 450.04 c1479.73 449.6801 1480.95 449.24 1482.1801 448.88 c1482.9 448.67 1483.62 448.45 1484.42 448.23 c1485.9301 447.8 1487.45 447.3 1489.03 446.86 c1490.55 446.4301 1492.14 446 1493.72 445.5601 c1495.8199 444.99 1497.91 444.41 1500.15 443.83 c1502.3101 443.26 1504.48 442.6801 1506.71 442.17 c1510.03 441.3101 1513.49 440.51 1516.96 439.72 c1518.11 439.4301 1519.27 439.14 1520.42 438.9301 c1522.8 438.42 1525.1801 437.92 1527.5601 437.34 c1528.79 437.05 1530.02 436.83 1531.24 436.62 c1536.15 435.61 1541.2 434.6 1546.4 433.73 c1548.99 433.23 1551.59 432.79 1554.26 432.36 c1555.5601 432.15 1556.9301 431.9301 1558.3 431.71 c1560.75 431.35 1563.21 430.92 1565.73 430.5601 c1565.95 430.5601 1566.24 430.49 1566.45 430.49 c1567.8199 430.27 1569.2 430.05 1570.64 429.91 c1572.01 429.6899 1573.45 429.55 1574.9 429.33 c1576.27 429.12 1577.71 428.97 1579.15 428.76 c1581.89 428.39 1584.71 428.03 1587.59 427.67 C1587.88 427.67 l1591.85 427.17 1595.8199 426.74 1599.9301 426.3 c1600.22 426.3 1600.58 426.23 1600.9399 426.23 c1601.23 426.23 1601.52 426.16 1601.8101 426.16 C1605.99 425.8 l1607.51 425.65 1609.09 425.51 1610.61 425.36 c1612.2 425.22 1613.71 425.08 1615.3 424.9301 c1616.89 424.79 1618.4 424.64 1620.0601 424.5699 c1621.65 424.4301 1623.3101 424.28 1624.9 424.21 c1629.73 423.85 1634.64 423.49 1639.6899 423.2 c1641.35 423.13 1643.01 422.98 1644.74 422.91 c1646.4 422.84 1648.13 422.7 1649.86 422.62 c1656.71 422.26 1663.64 421.97 1670.86 421.76 c1674.39 421.6899 1678 421.54 1681.6801 421.47 c1685.14 421.47 1688.61 421.4 1692.0699 421.3199 c1698.42 421.25 1704.91 421.25 1711.55 421.3199 c1716.1 421.3199 1720.64 421.4 1725.33 421.47 c1725.6899 421.47 1726.12 421.47 1726.5601 421.47 c1727.28 421.47 1728 421.47 1728.72 421.47 c1729.52 421.47 1730.24 421.47 1731.03 421.47 c1734.86 421.47 1738.75 421.61 1742.72 421.76 c1745.39 421.83 1748.0601 421.9 1750.8 422.05 c1761.55 422.41 1772.66 422.98 1783.99 423.71 c1795.39 424.4301 1807.01 425.22 1818.98 426.23 c1824.97 426.74 1831.03 427.24 1837.17 427.8199 c1841.21 428.1801 1845.17 428.61 1849.14 429.12 c1853.11 429.55 1857.08 430.05 1860.98 430.5601 c1864.87 431.0601 1868.77 431.5699 1872.66 432.15 c1875.77 432.58 1878.8 433.08 1881.83 433.59 c1882.48 433.66 1883.13 433.8 1883.78 433.88 c1884.14 433.88 1884.5 433.95 1884.86 434.09 c1888.1801 434.67 1891.5699 435.25 1894.89 435.8199 c1895.1801 435.8199 1895.46 435.9 1895.75 435.97 c1899.4301 436.62 1903.04 437.34 1906.65 438.0601 c1914.01 439.5 1921.29 441.09 1928.4399 442.75 c1935.58 444.41 1942.65 446.21 1949.58 448.09 c1956.5 449.96 1963.36 451.91 1970.14 454 c1973.53 455.01 1976.85 456.1 1980.17 457.1801 c1986.8101 459.34 1993.37 461.58 1999.8 463.96 c2002.3199 464.83 2004.77 465.76 2007.23 466.7 c2007.52 466.77 2007.73 466.92 2008.02 466.99 c2010.1899 467.78 2012.28 468.58 2014.37 469.4399 c2016.75 470.38 2019.2 471.3199 2021.51 472.26 c2023.89 473.1899 2026.28 474.2 2028.58 475.21 c2030.97 476.22 2033.27 477.16 2035.58 478.17 c2036.8101 478.6801 2038.04 479.25 2039.26 479.76 c2041.5699 480.77 2043.88 481.85 2046.12 482.86 c2048.5701 483.9399 2050.95 485.1 2053.3301 486.1801 C2053.55 486.25 l2056.0701 487.41 2058.6699 488.7 2061.1201 489.9301 c2061.3401 490 2061.49 490.15 2061.7 490.22 c2061.99 490.36 2062.21 490.51 2062.5 490.58 c2064.8 491.73 2067.1101 492.8199 2069.3501 494.04 c2069.49 494.04 2069.6399 494.11 2069.71 494.26 C2069.9299 494.33 l2071.1499 494.98 2072.3799 495.5601 2073.53 496.21 c2075.27 497.0699 2077 498.01 2078.6599 498.88 c2078.8 498.95 2078.95 499.02 2079.0901 499.09 c2080.8201 500.03 2082.55 500.97 2084.29 501.91 c2086.1599 502.92 2088.04 503.9301 2089.8401 504.9399 c2090.1299 505.08 2090.4199 505.22 2090.71 505.4399 c2095.47 508.11 2100.1599 510.78 2104.78 513.59 c2109.47 516.33 2114.0801 519.15 2118.5601 522.03 c2119.21 522.47 2119.8601 522.83 2120.51 523.26 c2122.8101 524.78 2125.1201 526.22 2127.4299 527.73 c2127.6499 527.88 2127.8601 528.02 2128.0801 528.17 c2130.46 529.75 2132.77 531.27 2135.1499 532.85 c2137.6101 534.51 2139.99 536.17 2142.3701 537.83 c2144.6001 539.42 2146.8401 540.9301 2149.01 542.52 c2151.8201 544.54 2154.5601 546.5601 2157.3701 548.58 c2159.3201 550.02 2161.27 551.54 2163.22 552.98 c2165.46 554.71 2167.6899 556.45 2169.8601 558.1 c2172.0901 559.84 2174.26 561.5699 2176.4199 563.3 c2178.5901 565.03 2180.6799 566.76 2182.77 568.49 c2184.8601 570.22 2186.96 571.96 2189.05 573.76 c2191.1399 575.49 2193.1599 577.29 2195.1799 579.03 c2203.26 586.02 2210.98 593.09 2218.3401 600.16 c2220.4399 602.1801 2222.53 604.2 2224.6201 606.29 c2226.1399 607.8101 2227.6499 609.3199 2229.0901 610.77 c2230.8301 612.5 2232.5601 614.3 2234.29 616.03 c2235.8799 617.6899 2237.3899 619.28 2238.98 620.87 c2239.1201 621.01 2239.27 621.16 2239.3401 621.3 c2241 623.03 2242.6599 624.83 2244.25 626.5699 c2245.8301 628.3 2247.49 630.03 2249.0801 631.76 c2250.3799 633.2 2251.6799 634.65 2252.98 636.09 c2253.48 636.59 2253.9099 637.1 2254.3501 637.6 c2257.23 640.85 2260.05 644.1 2262.72 647.27 c2264.1599 649 2265.6001 650.73 2267.05 652.39 c2271.3 657.4399 2275.3401 662.49 2279.24 667.4 c2279.3799 667.61 2279.53 667.76 2279.6699 667.9 c2282.1201 671.01 2284.51 674.11 2286.74 677.14 c2287.97 678.72 2289.1201 680.31 2290.28 681.9 c2291.4299 683.49 2292.5901 685 2293.74 686.59 c2294.8999 688.175 2295.98 689.69 2297.0601 691.205 c2298.1399 692.72 2299.22 694.235 2300.3101 695.75 c2301.3899 697.265 2302.3999 698.708 2303.4099 700.222 c2180.8999 771.065 2035.01 822.502 1894.6 838.734 C1894.74 838.589 Lf0 D1575.47 657.59 m1517.61 601.97 1493.72 538.55 y1460.17 537.54 1442.35 571.23 v1438.8199 572.97 1472.9399 645.3199 1557.8 702.531 c1568.4 709.673 1579.73 716.526 1591.92 723.019 c1617.6801 736.726 1643.73 746.97 1668.26 754.617 c1679.37 758.08 1690.1899 760.965 1700.51 763.418 c1718.33 767.675 1734.64 770.56 1748.71 772.508 c1778.72 776.764 1798.28 776.764 1799.0699 776.764 c1797.63 776.476 1724.1 761.398 1646.1801 712.414 c1622.4399 697.481 1598.2 679.37 1575.54 657.59 C1575.47 657.59 Lf1899.0699 718.691 m1953.04 751.299 l2062.78 754.833 2164.3701 700.15 v2162.1399 700.8 2008.67 734.417 1899.0699 718.691 Cf*U1779.08 129.37 m1779.08 128.83 l1780.2747 128.8292 1781.4153 129.3437 1782.457 130.2415 c1784.2823 131.8179 1785.901 134.5726 1787.366 138.3013 c1791.7405 149.48 1794.6261 169.5188 1794.6299 192.42 c1794.6293 209.8658 1792.9485 225.659 1790.219 237.1275 c1788.8524 242.8634 1787.2281 247.5168 1785.3932 250.7798 c1784.474 252.4114 1783.5023 253.6986 1782.457 254.5985 c1781.4153 255.4963 1780.2747 256.0108 1779.08 256.01 c1777.8851 256.0108 1776.7445 255.4963 1775.7028 254.5985 c1773.8774 253.0221 1772.2589 250.2674 1770.7938 246.5387 c1766.4194 235.36 1763.5337 215.3213 1763.5299 192.42 c1763.5305 174.9743 1765.2114 159.181 1767.9408 147.7124 c1769.3074 141.9766 1770.9316 137.3232 1772.7667 134.0601 c1773.6858 132.4286 1774.6575 131.1414 1775.7028 130.2415 c1776.7445 129.3437 1777.8851 128.8292 1779.08 128.83 C1779.08 129.37 L1779.08 129.91 l1778.2021 129.9108 1777.3195 130.2785 1776.4069 131.0605 c1774.8123 132.4239 1773.2228 135.0517 1771.7994 138.6953 c1767.5085 149.6337 1764.6061 169.62 1764.6099 192.42 c1764.6093 209.7943 1766.2885 225.526 1768.9915 236.8774 c1770.3412 242.5516 1771.9513 247.1319 1773.7079 250.2501 c1774.5845 251.8093 1775.4979 252.9995 1776.4069 253.7795 c1777.3195 254.5615 1778.2021 254.9292 1779.08 254.93 c1779.9576 254.9292 1780.8405 254.5615 1781.7531 253.7795 c1783.3475 252.4161 1784.9371 249.7883 1786.3605 246.1447 c1790.6512 235.2063 1793.5537 215.22 1793.5499 192.42 c1793.5505 175.0457 1791.8713 159.314 1789.1683 147.9626 c1787.8186 142.2884 1786.2085 137.7081 1784.452 134.5899 c1783.5753 133.0308 1782.662 131.8405 1781.7531 131.0605 c1780.8405 130.2785 1779.9576 129.9108 1779.08 129.91 C1779.08 129.37 Lf1899.72 158.01 m1899.72 157.635 l1900.5529 157.6345 1901.3478 157.994 1902.0737 158.6213 c1903.3457 159.7228 1904.4736 161.6478 1905.4945 164.254 c1908.5426 172.0672 1910.5524 186.0753 1910.5549 202.09 c1910.5546 214.2847 1909.384 225.326 1907.4823 233.3441 c1906.5303 237.3542 1905.3984 240.6077 1904.1198 242.8888 c1903.4792 244.0294 1902.8022 244.9293 1902.0737 245.5583 c1901.3479 246.1859 1900.5529 246.5456 1899.72 246.545 c1898.887 246.5456 1898.0919 246.1859 1897.3661 245.5583 c1896.094 244.4564 1894.9662 242.5307 1893.9453 239.9238 c1890.8972 232.1084 1888.8876 218.0982 1888.885 202.09 c1888.8854 189.8903 1890.0559 178.849 1891.9575 170.8322 c1892.9097 166.8227 1894.0414 163.5702 1895.3201 161.2898 c1895.9606 160.1496 1896.6377 159.2501 1897.3661 158.6213 c1898.092 157.994 1898.887 157.6345 1899.72 157.635 C1899.72 158.01 L1899.72 158.385 l1899.1078 158.3856 1898.4922 158.6426 1897.8558 159.1894 c1896.7439 160.1426 1895.6359 161.9797 1894.6439 164.5268 c1891.6536 172.1734 1889.6323 186.1453 1889.6349 202.09 c1889.6345 214.2353 1890.804 225.2341 1892.6873 233.171 c1893.6277 237.1384 1894.7498 240.3412 1895.9741 242.5219 c1896.5852 243.6122 1897.222 244.4447 1897.8558 244.9903 c1898.4922 245.5373 1899.1079 245.7945 1899.72 245.7951 c1900.3319 245.7945 1900.9476 245.5373 1901.584 244.9903 c1902.6959 244.0367 1903.804 242.1988 1904.7959 239.6509 c1907.7863 232.0021 1909.8076 218.0281 1909.8051 202.09 c1909.8054 189.9397 1908.636 178.941 1906.7526 171.0053 c1905.8121 167.0386 1904.6902 163.8367 1903.4657 161.6568 c1902.8546 160.5669 1902.2179 159.7347 1901.5841 159.1894 c1900.9476 158.6426 1900.332 158.3856 1899.72 158.385 C1899.72 158.01 Lf2004.34 183.1899 m2004.34 182.97 l2004.8285 182.9696 2005.2948 183.1809 2005.7203 183.5494 c2007.2001 184.8428 2008.4022 188.073 2009.2875 192.5688 c2010.1648 197.0622 2010.6898 202.8113 2010.6899 209.08 c2010.6897 216.2494 2010.0043 222.7369 2008.8903 227.4469 c2008.3325 229.8026 2007.6693 231.7133 2006.9198 233.0529 c2006.5444 233.7228 2006.1475 234.2512 2005.7203 234.6205 c2005.2948 234.9891 2004.8285 235.2003 2004.34 235.2 c2003.8513 235.2003 2003.385 234.9891 2002.9595 234.6205 c2001.4797 233.3271 2000.2776 230.0965 1999.3923 225.5994 c1998.515 221.1046 1997.99 215.3531 1997.9899 209.08 c1997.9901 201.9156 1998.6755 195.4306 1999.7896 190.7218 c2000.3473 188.3668 2001.0105 186.4563 2001.76 185.1169 c2002.1354 184.4471 2002.5323 183.9187 2002.9595 183.5494 c2003.385 183.1809 2003.8513 182.9696 2004.34 182.97 C2004.34 183.1899 L2004.34 183.4099 l2003.9811 183.4103 2003.6201 183.5612 2003.2469 183.8824 c2001.9312 185.0029 2000.6866 188.1985 1999.8242 192.6532 c1998.9537 197.1102 1998.4298 202.8362 1998.4299 209.08 c1998.4297 216.2206 1999.1143 222.6831 2000.2178 227.3456 c2000.7687 229.6762 2001.4261 231.5573 2002.1439 232.838 c2002.5021 233.4783 2002.8754 233.9672 2003.2469 234.2875 c2003.6201 234.6087 2003.9811 234.7597 2004.34 234.76 c2004.6987 234.7597 2005.0597 234.6087 2005.4329 234.2875 c2006.7487 233.167 2007.9932 229.9711 2008.8556 225.5151 c2009.7261 221.0566 2010.25 215.3281 2010.2499 209.08 c2010.2501 201.9444 2009.5656 195.4844 2008.462 190.8232 c2007.9111 188.4932 2007.2537 186.6124 2006.5359 185.3318 c2006.1777 184.6916 2005.8044 184.2027 2005.4329 183.8824 c2005.0597 183.5612 2004.6987 183.4103 2004.34 183.4099 C2004.34 183.1899 Lf2401.6799 436.91 m2401.6799 436.4651 l2402.6997 436.4643 2403.6833 436.8499 2404.5935 437.5381 c2406.1882 438.746 2407.6111 440.869 2408.8938 443.7358 c2412.7266 452.3322 2415.2512 467.7215 2415.2549 485.3101 c2415.2544 498.7135 2413.7832 510.8452 2411.3931 519.6591 c2410.1963 524.0671 2408.7734 527.6455 2407.1646 530.1565 c2406.3589 531.4118 2405.5061 532.4027 2404.5935 533.0919 c2403.6833 533.7802 2402.6997 534.1658 2401.6799 534.165 c2400.6599 534.1658 2399.6763 533.7802 2398.7661 533.0919 c2397.1714 531.884 2395.7485 529.7609 2394.4658 526.8939 c2390.6331 518.2966 2388.1086 502.9051 2388.105 485.3101 c2388.1055 471.9116 2389.5767 459.7824 2391.9666 450.9698 c2393.1633 446.5624 2394.5862 442.9843 2396.1951 440.4734 c2397.0007 439.2182 2397.8535 438.2273 2398.7661 437.5381 c2399.6763 436.8499 2400.6599 436.4643 2401.6799 436.4651 C2401.6799 436.91 L2401.6799 437.355 l2400.8872 437.3558 2400.1011 437.6474 2399.302 438.2486 c2397.9055 439.2974 2396.5222 441.3062 2395.2786 444.0986 c2391.5313 452.4799 2388.9912 467.8154 2388.9949 485.3101 c2388.9944 498.6466 2390.4631 510.7199 2392.8257 519.426 c2394.0051 523.778 2395.4116 527.2883 2396.9443 529.676 c2397.7095 530.8701 2398.5054 531.7811 2399.302 532.3814 c2400.1011 532.9827 2400.887 533.2742 2401.6799 533.275 c2402.4724 533.2742 2403.2585 532.9827 2404.0576 532.3814 c2405.4541 531.3326 2406.8374 529.3237 2408.0813 526.5311 c2411.8284 518.149 2414.3687 502.8113 2414.365 485.3101 c2414.3655 471.9785 2412.8965 459.9077 2410.5342 451.2028 c2409.3545 446.8514 2407.948 443.3415 2406.4153 440.9539 c2405.6501 439.7599 2404.8542 438.8489 2404.0576 438.2486 c2403.2585 437.6474 2402.4724 437.3558 2401.6799 437.355 C2401.6799 436.91 Lf2507.6001 458.84 m2507.6001 458.53 l2508.3118 458.5294 2508.998 458.799 2509.6333 459.2802 c2511.844 460.9712 2513.6477 465.2068 2514.9709 471.085 c2516.2839 476.9619 2517.0696 484.4774 2517.0698 492.67 c2517.0693 502.0383 2516.0437 510.5186 2514.3767 516.6797 c2513.542 519.7612 2512.5493 522.2626 2511.427 524.0179 c2510.865 524.8954 2510.2698 525.5881 2509.6333 526.0699 c2508.998 526.551 2508.3118 526.8206 2507.6001 526.8201 c2506.8882 526.8206 2506.2019 526.551 2505.5667 526.0699 c2503.3557 524.3787 2501.552 520.1429 2500.2288 514.2633 c2498.9158 508.3849 2498.1301 500.867 2498.1299 492.67 c2498.1304 483.3068 2499.156 474.829 2500.8232 468.669 c2501.658 465.5883 2502.6504 463.0871 2503.7729 461.3319 c2504.335 460.4545 2504.9299 459.7619 2505.5667 459.2802 c2506.2019 458.799 2506.8882 458.5294 2507.6001 458.53 C2507.6001 458.84 L2507.6001 459.15 l2507.0466 459.1505 2506.498 459.3544 2505.9404 459.7747 c2503.9768 461.2389 2502.1238 465.4021 2500.8337 471.2202 c2499.5334 477.0395 2498.7495 484.5177 2498.7498 492.67 c2498.7493 501.9918 2499.7737 510.4315 2501.4216 516.5178 c2502.2444 519.5602 2503.2256 522.0143 2504.2952 523.6837 c2504.8291 524.5186 2505.3845 525.1555 2505.9404 525.5753 c2506.498 525.9957 2507.0466 526.1995 2507.6001 526.2 c2508.1533 526.1995 2508.7017 525.9957 2509.2593 525.5753 c2511.2231 524.1111 2513.0759 519.9476 2514.366 514.1281 c2515.6663 508.3074 2516.4502 500.8268 2516.45 492.67 c2516.4504 483.3533 2515.426 474.9161 2513.7781 468.831 c2512.9553 465.7892 2511.9741 463.3354 2510.9048 461.6662 c2510.3708 460.8314 2509.8154 460.1945 2509.2593 459.7747 c2508.7017 459.3544 2508.1533 459.1505 2507.6001 459.15 C2507.6001 458.84 Lf2599.52 478.24 m2599.52 478.06 l2600.3655 478.064 2601.1172 478.6783 2601.7778 479.7027 c2603.7566 482.7847 2605.1055 489.8438 2605.1099 498.08 c2605.1096 503.5736 2604.5042 508.5455 2603.5198 512.1574 c2603.0269 513.9638 2602.4407 515.4302 2601.7778 516.4589 c2601.1172 517.4825 2600.3652 518.0961 2599.52 518.1001 c2598.6746 518.0961 2597.9226 517.4825 2597.262 516.4589 c2595.2832 513.3792 2593.9343 506.3237 2593.9299 498.08 c2593.9302 492.5914 2594.5356 487.6195 2595.52 484.0064 c2596.0129 482.1994 2596.5991 480.7321 2597.262 479.7027 c2597.9226 478.6783 2598.6743 478.064 2599.52 478.06 C2599.52 478.24 L2599.52 478.42 l2598.8704 478.416 2598.1985 478.913 2597.5645 479.8977 c2595.6592 482.8429 2594.2856 489.8912 2594.29 498.08 c2594.2898 503.5464 2594.8943 508.4946 2595.8674 512.0627 c2596.3533 513.8464 2596.9326 515.285 2597.5645 516.2638 c2598.1985 517.2476 2598.8704 517.7441 2599.52 517.7401 c2600.1694 517.7441 2600.8413 517.2476 2601.4753 516.2638 c2603.3806 513.3209 2604.7542 506.2764 2604.7498 498.08 c2604.75 492.6186 2604.1455 487.6705 2603.1724 484.1011 c2602.6865 482.3168 2602.1072 480.8773 2601.4753 479.8977 c2600.8413 478.913 2600.1694 478.416 2599.52 478.42 C2599.52 478.24 Lf*u1 D0.46659 0.390753 0.392523 0.030945 0.556863 0.552941 0.552941 Xa1174.2996 1570.6156 m1174.2998 1570.6154 1174.3 1570.6151 1174.3003 1570.615 c1174.3 1570.6152 1174.2998 1570.6154 1174.2996 1570.6156 CF1174.2791 1570.6365 m1174.2808 1570.6346 1174.2826 1570.6327 1174.2844 1570.6309 c1174.2826 1570.6327 1174.2808 1570.6346 1174.2791 1570.6365 CF1174.2423 1570.6768 m1174.2513 1570.6663 1174.2606 1570.656 1174.2701 1570.6459 c1174.2606 1570.656 1174.2513 1570.6663 1174.2423 1570.6768 CF1174.1097 1570.874 m1174.1453 1570.8046 1174.1891 1570.7389 1174.2407 1570.6787 c1174.2009 1570.7251 1174.1649 1570.7759 1174.1333 1570.8308 c1174.125 1570.8451 1174.1172 1570.8595 1174.1097 1570.874 CF1174.0999 1570.894 m1174.1018 1570.8899 1174.1039 1570.8859 1174.106 1570.8817 c1174.1039 1570.8859 1174.1018 1570.8899 1174.0999 1570.894 CF0 D1174.0905 1570.9141 m1174.0912 1570.9125 1174.0919 1570.9108 1174.0927 1570.9092 c1174.0919 1570.9108 1174.0912 1570.9125 1174.0905 1570.9141 CF1 D1177.2046 1571.33 m1176.2306 1570.8691 1175.6609 1570.5552 1175.5283 1570.4805 C1175.4994 1570.464 L1175.4994 1570.4633 l1175.3422 1570.3728 1175.1705 1570.3297 1175.0011 1570.3297 c1174.8401 1570.3297 1174.6812 1570.3687 1174.5386 1570.4426 c1174.9799 1570.1941 1179.2236 1567.8551 1186.4586 1565.8054 c1186.3171 1566.5205 1186.2073 1567.2469 1186.1306 1567.9828 c1185.6112 1568.1367 1185.1088 1568.2919 1184.6245 1568.4468 c1181.6686 1569.3923 1179.3748 1570.3373 1177.8263 1571.0414 c1177.6035 1571.1427 1177.3962 1571.2391 1177.2046 1571.33 CF1174.1118 1571.7899 m1174.0359 1571.6434 1173.9996 1571.4857 1173.9998 1571.3301 c1173.9999 1571.4901 1174.0385 1571.6481 1174.1118 1571.7899 CF1174.1228 1571.8107 m1174.1198 1571.8051 1174.1167 1571.7993 1174.1138 1571.7936 c1174.1167 1571.7993 1174.1198 1571.8051 1174.1228 1571.8107 CF1174.1349 1571.8322 m1174.1344 1571.8313 1174.1338 1571.8303 1174.1333 1571.8293 c1174.1311 1571.8257 1174.1292 1571.8219 1174.1271 1571.8182 c1174.1296 1571.8229 1174.1322 1571.8275 1174.1349 1571.8322 CF0 D1174.1455 1571.8499 m1174.1426 1571.8451 1174.1398 1571.8403 1174.137 1571.8356 c1174.1398 1571.8403 1174.1426 1571.8451 1174.1455 1571.8499 CF1 D1174.157 1571.8684 m1174.1545 1571.8646 1174.1521 1571.8607 1174.1498 1571.8568 c1174.1521 1571.8607 1174.1545 1571.8646 1174.157 1571.8684 CF0 D1174.1711 1571.89 m1174.1693 1571.8872 1174.1675 1571.8844 1174.1655 1571.8816 c1174.1675 1571.8844 1174.1693 1571.8872 1174.1711 1571.89 CF1174.1835 1571.9078 m1174.1815 1571.9049 1174.1796 1571.9022 1174.1775 1571.8993 c1174.1794 1571.9021 1174.1815 1571.905 1174.1835 1571.9078 CF1 D1174.2006 1571.9313 m1174.1974 1571.9271 1174.1943 1571.9229 1174.1913 1571.9187 c1174.1943 1571.9229 1174.1974 1571.9271 1174.2006 1571.9313 CF0 D1174.2151 1571.9502 m1174.2119 1571.9462 1174.2089 1571.942 1174.2057 1571.938 c1174.2087 1571.942 1174.2119 1571.9462 1174.2151 1571.9502 CF1174.2327 1571.9718 m1174.2279 1571.9661 1174.2231 1571.9603 1174.2185 1571.9545 c1174.2231 1571.9603 1174.2279 1571.9661 1174.2327 1571.9718 CF1 D1174.53 1572.2128 m1174.4186 1572.1537 1174.3175 1572.073 1174.2335 1571.9728 c1174.3068 1572.0601 1174.3962 1572.1361 1174.5007 1572.1962 c1174.5031 1572.1975 1174.5128 1572.2031 1174.53 1572.2128 CF*U0 D0.595514 0.517845 0.509728 0.205814 0.4 0.396078 0.396078 Xa1175.001 1572.3301 m1174.8368 1572.3301 1174.6748 1572.2896 1174.53 1572.2128 c1174.5128 1572.2031 1174.5031 1572.1975 1174.5007 1572.1962 c1174.3962 1572.1361 1174.3068 1572.0601 1174.2335 1571.9728 c1174.2333 1571.9724 1174.233 1571.9722 1174.2327 1571.9718 c1174.2279 1571.9661 1174.2231 1571.9603 1174.2185 1571.9545 c1174.2174 1571.953 1174.2163 1571.9515 1174.2151 1571.9502 c1174.2119 1571.9462 1174.2087 1571.942 1174.2057 1571.938 c1174.204 1571.9358 1174.2023 1571.9335 1174.2006 1571.9313 c1174.1974 1571.9271 1174.1943 1571.9229 1174.1913 1571.9187 c1174.1886 1571.915 1174.186 1571.9115 1174.1835 1571.9078 c1174.1815 1571.905 1174.1794 1571.9021 1174.1775 1571.8993 c1174.1754 1571.8962 1174.1733 1571.8932 1174.1711 1571.89 c1174.1693 1571.8872 1174.1675 1571.8844 1174.1655 1571.8816 c1174.1627 1571.8772 1174.1599 1571.8728 1174.157 1571.8684 c1174.1545 1571.8646 1174.1521 1571.8607 1174.1498 1571.8568 c1174.1483 1571.8545 1174.1469 1571.8522 1174.1455 1571.8499 c1174.1426 1571.8451 1174.1398 1571.8403 1174.137 1571.8356 c1174.1362 1571.8345 1174.1356 1571.8334 1174.1349 1571.8322 c1174.1322 1571.8275 1174.1296 1571.8229 1174.1271 1571.8182 c1174.1256 1571.8157 1174.1241 1571.8132 1174.1228 1571.8107 c1174.1198 1571.8051 1174.1167 1571.7993 1174.1138 1571.7936 c1174.113 1571.7924 1174.1124 1571.7911 1174.1118 1571.7899 c1174.0385 1571.6481 1173.9999 1571.4901 1173.9998 1571.3301 c1173.9999 1571.1864 1174.031 1571.0443 1174.0905 1570.9141 c1174.0912 1570.9125 1174.0919 1570.9108 1174.0927 1570.9092 c1174.095 1570.9042 1174.0974 1570.899 1174.0999 1570.894 c1174.1018 1570.8899 1174.1039 1570.8859 1174.106 1570.8817 c1174.1072 1570.8792 1174.1085 1570.8766 1174.1097 1570.874 c1174.1172 1570.8595 1174.125 1570.8451 1174.1333 1570.8308 c1174.1649 1570.7759 1174.2009 1570.7251 1174.2407 1570.6787 c1174.2412 1570.6781 1174.2417 1570.6775 1174.2423 1570.6768 c1174.2513 1570.6663 1174.2606 1570.656 1174.2701 1570.6459 c1174.2731 1570.6427 1174.276 1570.6395 1174.2791 1570.6365 c1174.2808 1570.6346 1174.2826 1570.6327 1174.2844 1570.6309 c1174.2894 1570.6257 1174.2944 1570.6207 1174.2996 1570.6156 c1174.2998 1570.6154 1174.3 1570.6152 1174.3003 1570.615 c1174.3591 1570.5574 1174.4261 1570.5062 1174.5007 1570.4633 C1174.5007 1570.464 l1174.5034 1570.4624 1174.5161 1570.4552 1174.5386 1570.4426 c1174.6812 1570.3687 1174.8401 1570.3297 1175.0011 1570.3297 c1175.1705 1570.3297 1175.3422 1570.3728 1175.4994 1570.4633 C1175.4994 1570.464 L1175.5283 1570.4805 l1175.6609 1570.5552 1176.2306 1570.8691 1177.2046 1571.33 c1176.7301 1571.5546 1176.3516 1571.7445 1176.0726 1571.8885 c1175.8772 1571.9897 1175.7306 1572.0688 1175.635 1572.1212 C1175.5291 1572.1797 L1175.4994 1572.1962 l1175.3422 1572.287 1175.1704 1572.3301 1175.001 1572.3301 CF*u1 D0.46659 0.390753 0.392523 0.030945 0.556863 0.552941 0.552941 Xa1247.5642 1570.5043 m1247.5598 1570.5013 1247.5555 1570.4984 1247.5511 1570.4956 c1247.5555 1570.4984 1247.5599 1570.5013 1247.5642 1570.5043 CF0 D1247.5868 1570.5201 m1247.5809 1570.5159 1247.575 1570.5117 1247.569 1570.5076 c1247.575 1570.5117 1247.5809 1570.516 1247.5868 1570.5201 CF1247.6035 1570.5325 m1247.6011 1570.5306 1247.5986 1570.5288 1247.5962 1570.527 c1247.5986 1570.5288 1247.6011 1570.5306 1247.6035 1570.5325 CF1247.6204 1570.5455 m1247.6187 1570.5442 1247.6168 1570.5428 1247.6151 1570.5415 c1247.6168 1570.5428 1247.6187 1570.5442 1247.6204 1570.5455 CF1 D1244.2917 1571.3297 m1241.4382 1570.2334 1238.6454 1569.2969 1235.9178 1568.5024 c1235.8578 1567.7727 1235.7653 1567.0529 1235.6414 1566.3425 c1239.4355 1567.4132 1243.3533 1568.7524 1247.3795 1570.4048 c1247.4398 1570.4296 1247.4963 1570.4596 1247.5488 1570.494 c1247.3867 1570.3878 1247.1957 1570.3298 1246.9994 1570.3298 c1246.873 1570.3298 1246.7445 1570.3539 1246.6204 1570.4048 c1245.8401 1570.7249 1245.0634 1571.0332 1244.2917 1571.3297 CF1248.0001 1571.33 m1248.0001 1571.3262 1248.0001 1571.3224 1248 1571.3185 c1248.0001 1571.3223 1248.0001 1571.3262 1248.0001 1571.33 CF1247.3636 1572.2612 m1247.3688 1572.2592 1247.3744 1572.2568 1247.3795 1572.2548 c1247.7622 1572.0979 1247.9952 1571.7305 1248 1571.3413 c1247.9988 1571.4642 1247.9746 1571.589 1247.9253 1571.7096 c1247.8171 1571.9729 1247.6094 1572.1653 1247.3636 1572.2612 CF*U0 D0.595514 0.517845 0.509728 0.205814 0.4 0.396078 0.396078 Xa1246.9998 1572.33 m1246.8733 1572.33 1246.7446 1572.3058 1246.6204 1572.2548 c1245.8401 1571.9346 1245.0634 1571.6262 1244.2917 1571.3297 c1245.0634 1571.0332 1245.8401 1570.7249 1246.6204 1570.4048 c1246.7445 1570.3539 1246.873 1570.3298 1246.9994 1570.3298 c1247.1957 1570.3298 1247.3867 1570.3878 1247.5488 1570.494 c1247.5497 1570.4945 1247.5504 1570.495 1247.5511 1570.4956 c1247.5555 1570.4984 1247.5598 1570.5013 1247.5642 1570.5043 c1247.5658 1570.5054 1247.5674 1570.5065 1247.569 1570.5076 c1247.575 1570.5117 1247.5809 1570.5159 1247.5868 1570.5201 c1247.59 1570.5225 1247.593 1570.5247 1247.5962 1570.527 c1247.5986 1570.5288 1247.6011 1570.5306 1247.6035 1570.5325 c1247.6074 1570.5355 1247.6113 1570.5385 1247.6151 1570.5415 c1247.6168 1570.5428 1247.6187 1570.5442 1247.6204 1570.5455 c1247.8579 1570.7333 1247.9963 1571.0194 1248 1571.3185 c1248.0001 1571.3224 1248.0001 1571.3262 1248.0001 1571.33 c1248.0001 1571.3337 1248.0001 1571.3375 1248 1571.3413 c1247.9952 1571.7305 1247.7622 1572.0979 1247.3795 1572.2548 c1247.3744 1572.2568 1247.3688 1572.2592 1247.3636 1572.2612 c1247.2485 1572.3062 1247.1252 1572.33 1246.9998 1572.33 CF0.615991 0.419684 0.512535 0.135348 0.403922 0.466667 0.443137 Xa1235.9178 1568.5024 m1226.2474 1565.6859 1217.4044 1564.6593 1209.6401 1564.6588 c1199.957 1564.6588 1191.952 1566.2573 1186.1306 1567.9828 c1186.2073 1567.2469 1186.3171 1566.5205 1186.4586 1565.8054 c1192.3488 1564.1368 1200.2212 1562.66 1209.6401 1562.6588 c1217.3556 1562.6583 1226.1072 1563.6521 1235.6414 1566.3425 c1235.7653 1567.0529 1235.8578 1567.7727 1235.9178 1568.5024 CFULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF