%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 26.2.1
%%For: (Zachary Fertig) ()
%%Title: (MindSpaceLogo copy.ai)
%%CreationDate: 5/1/2022 1:58 PM
%%Canvassize: 16383
%%BoundingBox: 111 147 503 642
%%HiResBoundingBox: 111.815 147.502 503 641.0819
%%DocumentProcessColors: Cyan Magenta Yellow
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 0 0 612 792
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -646 874 1 1593 940 26 0 0 46 87 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 51 1 51 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 104 128 8
%%BeginData: 17098 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0EFFAF847E305AFD5FFFA9A95A5A2F302F5A2FAFFD5EFF852F54
%2F5A545A2F5AA9FD5EFFA8842F302F5A2F542FA9FD2AFF597E84FD33FFAF
%5A5A305A305AA8FD0DFFA9FD15FFAF7EA9FF847EFFFF5A30547E84AFFD31
%FF845A2F542FA9FD0DFF7E2FA9FD12FF845A2FA9FFA92F7EFFFF54302F54
%2F5A5AA9A9FD2FFFA95430A8FD0DFF84302F7EA9FD0FFF7E5A2F5AA9FF7E
%5A3085FFFF5A5A2F5A305A2F5A5AA9A8FD2EFF84FD0EFFA92F542F5A84FD
%0CFFA92F302F542FAFFF842F5A2F84FFFF53302F5A2F542F542F54538484
%FD3AFFA95A305A3030A8FD0AFF852F5A545A305AA9FF845A545A2FA9FFFF
%545A545A305A545A305A305A548584FD37FFAF2F302F5A7EFD09FFA85A2F
%542F5A2F5A2FAFFF7E2F5A2F542FA9FFAF2F5A2F5A2F5A2F5A2F5A2F542F
%542F5A5AFD35FFA95AA9AFFD09FFA95A2F5A545A2F5A545AA8FF7E5A2F5A
%545A2FFFFFFF305A545A2F5A545A2F5A545A2F5A30305AFD41FF7E2F542F
%5A2F542F5A2FA9FF842F542F5A2F302FAFFFA92F542F542F5A2F542F5A2F
%542F5A2F7EA8AFFD3FFFAF7E2F5A545A305A545AA9FF7E5A305A545A305A
%5AFFFFFF545A305A545A305A545A305A545AA9855AFD24FFA95A2F85FD0C
%FF847EA8FD0AFFA92F5A2F5A2F5A2FA9FF842F5A2F5A2F5A2F5454FFFFAF
%2F542F5A2F5A2F5A2F5A2F5A5AFF2F5AA8FD22FFA85A305A2FA9FD0BFFAF
%2F5A7EFD0BFF5A5A305A2F5AA9FF7E5A545A2F5A545A2F5A5AFFFFAF305A
%2F5A545A2F5A545A2FFF845A2FA9FD21FFA8542F5A2F542F84FD0AFFA85A
%2F3053A9FD0AFF7E5A2F542FAFFF842F5A2F542F5A2F542F305AFFFFA92F
%542F5A2F542F5A2F7EA85A2F3053FD21FF852F5A545A305A3085FD0AFF5A
%5A305A307EAFFD09FFA97E2F5AA9FF845A545A305A545A305A545A5AFFFF
%A92F5A545A305A545AA9A9305A305AA9FD21FF842F542F5A2F5A2F84FD09
%FFA92F5A2F5A2F5A7EFD0AFF8453AFFFA92F5A2F5A2F5A2F5A2F5A2F305A
%FFFFA92F5A2F5A2F5A5AFF535A2F5A2F84FD23FF845A305A2F5A3085FD08
%FFA95A305A2F5A30545AFD0DFFA85A2F5A545A2F5A545A2F5A54547EFFFF
%A92F5A545A2FFFA8542F5A545A54FD24FFA9A95A542F5A2F84FD08FF5A54
%2F542F5A2F302FA9FD0BFFA92F542F5A2F542F5A2F542F5A2F307EFFFF84
%2F5A2F5AA85A2F542F5A2F3084FD26FFA985545A2FA9FD07FFA9305A305A
%545A305A3084FD0AFFAF5A305A545A305A545A305A545A305AA8FFFFA930
%30A8FF305A305A545A2F85FD29FF7E5A2FA9FD07FF7E2F542F5A2F5A2F5A
%2F5AA8FD09FF5A542F5A2F5A2F5A2F5A2F5A2F5A2F5AA8FFFFA97EFF7E54
%2F5A2F5A2F542FFD2BFFA9A8FD08FFA95A5A2F5A305A2F5A305A84FD08FF
%85305A2F5A545A2F5A545A2F5A545A2F5AA9FD04FF842F5A545A2F5A545A
%84FD12FF8484A8FD10FFA95AA9A8FD0DFFAFAF84A97E5A2F5A2F305AFD07
%FFA8542F542F542F542F542F542F5A2F542F5AA8FFFFFF5A302F5A2F542F
%5A2F5AFD12FFAF2F5A7EFD0FFF84302F5A5AA9A8FD11FFAFAF8485A8FD07
%FFA87E5A7E5A7E5A7E5A7EFD065A545AAFFFFF7E2F5A545A305A545A30FD
%13FF5A2F542F5A84FD0DFF5A302F5A2F542F7E7EAFFD1CFFA9FFA8AFA8FF
%A9AFA8FFA8FFFFFFA9FFFFFF7E302F5A2F5A2F5A2F307EFD12FFA95A2F5A
%305A54A9AFFD0BFF5A542F5A545A2F5A305A7EFD17FFA9845A5A545A545A
%545A545A545A5AA9FD04FFA9FF545A2F5A545A2F5A305AFD13FF7E302F30
%2F3029305AAFFD0AFF5A302F5A2F542F5A2F3053FD13FF84FFFF5A2F5A2F
%542F5A2F542F5A2F542F542FA9FFFFA8305AA95A302F5A2F542F5A2FA9FD
%13FFA8A984A984A98485A9FD0BFF5A5A545A305A545A305AA9FD10FFAF5A
%5AFFFF545A545A305A545A305A545A305A545A84FF5AA9545A5AA97E5A30
%5A305A545A7EFD28FF5A542F5A2F5A2F5A2FA9FD0EFFA87E2F305AFFFF7E
%2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F8484307E5A2F5A2F84845A2F5A2F5A
%2F5AA8FD28FF7E5A305A2F5A545A7EFD0EFF5A2F5A3085FFFFA85A2F5A54
%5A2F5A545A2F5A545A2F5A84A92F845A5A2F5A307EA885305A2F5A30A9FD
%21FF7E85FD06FF7E542F5A2F5A2F5AFD0EFF2F542F5AA8AFA8FF2F542F5A
%2F542F5A2F542F5A2F542F845A3053842F542F5A2F5A84A92F302F545AFD
%09FF85A9FD13FFA984545A2F84FD06FFA85A2F5A545A5AFD0EFF5A305A7E
%FF7E85FF7E2F5A545A305A545A305A545A305A7E5A2F5A7E5A305A545A30
%5A7EFF5A5A305AA9FD08FF7E305484A8FD0EFFA95A5A2F542F5A2F84FD06
%FFA85A2F5A2F5AA8FD0DFF54302FFFFF842FAFA8302F5A2F5A2F5A2F5A2F
%5A2F5A2F8454542F8454542F5A2F5A2F545AA9845A2F84FD09FF5A5A305A
%5AA9FD0BFF7E2F5A2F5A545A2F5A30A9FD06FFAF5A2F5A30AFFD0DFF5A2F
%A9FFFF84545AFF5A5A2F5A545A2F5A545A2F5A305A7E5A545A7E7E305A2F
%5A545A2F5A30A9A87E7EFD0AFF2F542F302984FD0AFF847E2F302F542F54
%2F5A2FA8FD07FF7E2F3084FD0DFF2F7EFFFFFF852F307E842F542F5A2F54
%2F5A2F542F545A7E2F5A2F7E5A542F542F5A2F542F5A2F7EA8FD0CFF5454
%2F7EAFFD0DFF84855A5A305A305A2FAFFD07FFA95485FD0DFF85FD04FFA9
%5A2F85A95A305A545A305A545A305A30855A5A545A5AA9305A305A545A30
%5A545A2F85FD0DFF7E84AFFD11FFA9A97E845A5A5AFD1DFF847EA8FF5A30
%2F5A2F5A2F5A2F5A2F5AA85A2F5A2F5AA85A2F5A2F5A2F5A2F5A2F542FFD
%49FFA92F542F5A305A2F5A30305AFF54542F5A30FFA85A2F5A2F5A305A2F
%5A305AAFFD49FFA95A7E5A847E7E5A847EFFFFA95A7E5A85FFFF84A984A9
%84A984A97EA9A8FD89FFCAC9C3C9C3C9C3C9A0CAFFFFA1C9C3C9C3C9C3C9
%A0CAFFFFC9C9C3C9C3C9C3C9A0CFFFCFC2C9C3C9C3C9C3C9C3C9C3C9C3C9
%C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9CAFD23FFC9CAFFC1C2C1C2BBC2C1
%C2BBCAFFC9BBC2C1C2C1C2C1C1C9FFCAC2BBC2C1C2BBC2C1C1C2FFC9C1BB
%C2C1C2BBC2C1C2BBC2C1C2BBC2C1C2BBC2C1C2BBC2C1C2BBC2C1C2BBC2C2
%FD21FFC999C2CACF99C29FC299C29FC299CFFFC999C29FC299C1C2FFCAC2
%99C299C29FC299C299C2FFC999C299C29FC299C29FC299C29FC299C29FC2
%99C29FC299C29FC299C29FC299C19FCFFD1EFFCAC1C2C1C2FFCFC1C2C1C2
%C2C2C1C2C2FFFFC9C1C2C1C2C2FFFFC9C1C2C1C2C2C2C1C2C2C2C3FFC9C2
%C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1FD
%04C2FD1EFFC1C29FC2BBC2CFC9BBC29FC2C1C29FC2C2FFCFC2C1C299CFFF
%C999C2C1C29FC2C1C29FC2BBC9FFCABBC29FC2C1C29FC2C1C29FC2C1C29F
%C2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C1CAFD1CFFC9C2C2C2C1C2C1
%C9FFC9C1C2C1C2C2C2C1C2C9FFCAC2C1CAFFCFC1C2C1C2C2C2C1C2C2C2C1
%C2C3FFC9C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2
%C2C1C2C2C2C1C2C1CAFD1CFFC999C29FC299C2A0FFCAC299C299C29FC299
%C2CAFFA7C9FFFF9FC29FC299C29FC299C29FC299C9FFC999C299C199C299
%C199C299C199C299C199C299C199C299C199C299C299C29FC299C2C3FD15
%FFCFC2C9C2C9C9FFC9C2C2C2C1C2C1C9FFFFCAC2C1C2C2C2C1C2C1C8FD04
%FFFD04C2C1C2C2C2C1C2C2C2C1C2C3FFCAC9C2C9C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C2C9C2C8C1C2C2C2C1C2C1C9FFCAC2C9C2C9C9FD
%0EFF9FC2C1C199C2CFCA99C2C1C29FC2C2FFFFFFC3C19FC2C1C29FC2BBC9
%FFFFC9C19FC2C1C29FC2C1C29FC2C1C299C9FD1DFFC299C2C1C29FC2C9FF
%9FC2BBC199C1C3FD0CFFCAC2C1FD04C2FFC9C2C1C2C2C2C1C9FD04FFC2C2
%C1C2C2C2C1C2C1CFCAC2C1C2C1C2C2C2C1C2C2C2C1FD04C2FD1DFFC2C2C1
%C2C2C2C1CAFFC2C1C2C2C2C1C2CFFD0BFFCA99C299C29FC2CACA99C299C2
%9FC1A0FD05FFA0C199C29FC299C29FC299C29FC299C29FC299C29FC299C2
%99C9FD1DFFC299C299C29FC1A1FF9FC299C29FC299CFFD0BFFCAC2C1FD04
%C2FFC9C2C1C2C2C2C1C9FD05FFCFC1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2
%C9C9C1C2C1C2C2C2C3FD1DFFC2C2C1C2C2C2C1CAFFC2C1C2C2C2C1C2CAFD
%0BFFCABBC29FC2C1C2CACABBC29FC2C1C2A0FD06FFC999C2C1C29FC2C1C2
%9FC2C1C29FC2C2FFC3C2C1C29FC2BBC9FD1DFFC2C1C29FC2C1C1C3FFC2C2
%9FC2C1C299CFFD0BFFC9C2C2C2C1C2C2FFC9C2C2C2C1C2C1C2FD07FFC9BB
%C2C2C2C1C2C2C2C1FD04C2FFFFC9BBC2C2C2C1C2C3FD1DFFFD04C2C1C2C1
%CAFFC2C1C2C1C2C1C2CAFD0BFFCA99C29FC299C2CFC999C29FC299C2A0FD
%08FFC299C29FC299C29FC299C2A0FFFFFFC2C199C29FC299C9FD1DFFC299
%C29FC299C2C9FF9FC29FC299C299CAFD0BFFC9C2C2C2C1C2C2FFC9C2C2C2
%C1C2C1C9FD08FFCAC2C1C2C1C2C2C2C1C2C2FD04FFC9C1C2C2C2C1C2C3FD
%1DFFFD04C2C1C2C1CAFFC2C1C2C1C2C2C2CAFD0BFFCA99C2C1C299C2CFCA
%99C2C1C29FC2C2FD09FFC9C2C1C29FC2C1C19FFD05FFC9C19FC2C1C299C9
%FD1DFFC299C2C1C29FC2C9FF9FC2C1C29FC2C1CAFD0BFFCAC2C1FD04C2FF
%C9C2C1C2C2C2C1C9FD0AFFC3C2C2C2C1C2C1CFFD05FFCAC1C2C1FD04C2FD
%1DFFC2C2C1C2C2C2C1CAFFC2C1C2C2C2C1C2CAFD0BFFCA99C299C29FC2CA
%CA99C299C29FC1A0FD0BFFA0C19FC299CAFD06FFA1C19FC299C299C9FD1D
%FFC299C299C29FC1A1FF9FC299C29FC299CFFD0BFFCAC2C1FD04C2FFC9C2
%C1C2C2C2C1C9FD0CFFC2C2C1CFFD07FFCAC1C2C1C2C2C2C3FD1DFFC2C2C1
%C2C2C2C1CAFFC2C1C2C2C2C1C2CAFD0BFFCABBC29FC2C1C2CACABBC29FC2
%C1C2A0FD0CFFCFC1C9FD08FFC3C2C1C29FC2BBC9FD1DFFC2C1C29FC2C1C1
%C3FFC2C29FC2C1C299CFFD0BFFC9C2C2C2C1C2C2FFC9C2C2C2C1C2C1C2FD
%17FFC9C1C2C2C2C1C2C3FD1DFFFD04C2C1C2C1CAFFC2C1C2C1C2C1C2CAFD
%0BFFCA99C29FC299C2CFC999C29FC299C2A0FD17FFC2C199C29FC299C9FD
%1DFFC299C29FC299C2C9FF9FC29FC299C299CAFD0BFFC9C2C2C2C1C2C2FF
%C9C2C2C2C1C2C1C9FD17FFC9C1C2C2C2C1C2C2FD1DFFFD04C2C1C2C1CAFF
%C2C1C2C1C2C2C2CAFD0BFFCA99C2C1C299C2CFCA99C2C1C29FC2C2FD17FF
%C2C199C2C1C299C2FD1DFFC299C2C1C29FC2C9FF9FC2C1C29FC2C1CAFD0B
%FFCAC2C1FD04C2FFC9C2C1C2C2C2C1C9FD17FFCFC2C2C2C9C2C2C9FD1DFF
%C2C2C1C2C2C2C1CAFFC2C1C2C2C2C1C2CAFD0BFFCA99C299C299C2CACA99
%C299C29FC29FFD0BFFCAFFFFFFCAFFFFFFCAFD05FFCFFFCAFFCAFD05FFCA
%FFFFFFCAFFFFFFCFFFFFFFCFFD0BFFCAC299C299C29FC1A1FF99C299C29F
%C299CFFD0CFFC2C1C2C1C2C2FFC9C2C1C2C2C2C1C2C2C9C2C9C3C9C2C9C3
%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2
%C9C2C9C2C9C2C9C2C9C2C8C2C9C3C9C2C9C3C9C2C9C2C2C1C2C2C2C1CAFF
%C2C1C2C1C2BBC9FD0DFFCAC9C9CAC9CAFFCABBC29FC2C1C29FC2BBC199C2
%BBC199C2C1C299C2C1C299C2C1C299C2C1C299C2C1C299C2C1C299C2C1C2
%99C2C1C299C2C1C299C2C1C299C2C1C299C2BBC199C2BBC199C2C1C29FC2
%C1C1C3FFC9C3A0C9C9CAFD15FFC9C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1
%C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2
%C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C1C9FD
%1CFFC999C29FC299C29FC299C29FC299C29FC299C29FC299C29FC299C29F
%C299C29FC299C29FC299C29FC299C29FC299C29FC299C29FC299C29FC299
%C29FC299C29FC299C29FC299C29FC299C2CAFD1CFFCAC2C2C2C1C2C2C2C1
%C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2
%C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1
%C2C2C2C1C2C2FD1EFFA0C1C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C29F
%C2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1
%C29FC2C1C29FC2C1C29FC2C1C29FC2C1C29FC2C1C299CFFD1FFFC2C2C1C2
%C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2
%C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2C1C2C2C2
%C1C2C2C2C1C2C1CFFD21FFA0C299C199C199C199C199C199C199C199C199
%C199C199C199C199C199C199C199C199C199C199C199C299C199C299C199
%C299C199C299C199C299C199C299C199C299C2A0FD24FFCFCAFD05C9CAC9
%CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9
%CFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCFFD8D
%FFA8AFA9AFA8AFA9AFA8AFA9AFFD2EFFA9AFA8AFA9AFA8AFA9AFA8FD22FF
%5A542F5A2F542F5A2F542F5A2F84FF7E2F5A2F5A2F5A2F5AA8845AA9A97E
%53AF845A2F5A2F5A53FFA85A5AFF845A7EA92F5A2F5A2F5A2F5A5AFF5354
%2F542F5A2F542F5A2F542F7EAFFD1EFF5A5A305A545A305A545A305A545A
%30FF7E5A305A545A305A3084545A7EFF2F5484A92F5A545A305AA8A92F5A
%FF7E2F5A5A5A305A545A305A3085A85A545A305A545A305A545A305A3085
%FD1DFFA85A2F5A2F5A2F5A2F5A2F5A2F5A2F307EAF2F5A2F5A2F5A2F5A84
%5A2F5AA95A2FA9A8542F5A2F5A2FFF7E305AFF545453A92F5A2F5A2F5A2F
%5AA97E2F5A2F5A2F5A2F5A2F5A2F5A2F3053FD1EFFA87E305A2F5A545A2F
%5A545A2F5A305AAF7E305A2F5A545A7EFF545A54FF5A5484FF5A5A2F5A30
%5AFFA92F7EA85A305AFF7E305A2F5A545A5AFF545A2F5A545A2F5A545A2F
%5A305A5AAFFD1DFFA8A8A8AF7E5A2F542F542F5A2F542F5A2FA97E302F54
%2F5A2FA9FF5A2F54847E2FA9FF842F542F545AFF7E307EA92F545AFF8454
%2F542F5A2FA97E302F542F5A2F542F5A2F302F84A8AFA8FD1EFF5A5A7EAF
%A9AF5A5A2F5A545A305A545A5AFF545A305A3084FFFFA85A2FA97E5AA8FF
%A95A305A3085FFA930A97E5A30FFFFFF5A5A305A305AA97E305A305A545A
%305A547EA8FFA9842F85FD1EFFA92F542F5A7EFFA8842F542F5A2F5A2F54
%A87E2F5A2F5AA8A984FF5A305A852FAFFFFF54542F5AA8FF8430845A2F85
%FF847EA92F542F547EA92F5A2F5A2F5A2F5A7EAFA884535A2F54A8FD1FFF
%5A2F5A30542F85A8FF847E305A2F5A3085A85A2F5484A92F545AFF5A5A84
%5AFFFFFF852F305AFFFFFF54A95485A97E303084852F302FFF7E5A2F5A30
%5A5AA9A9A95A5A305A2F5A5AFD20FF7E302F5A2F542F545384A8AF7E5A2F
%305AFF847EA8A92F5A2F3053FF84A95AFFFFFFA87E5AFFFFFFA984A8A9A8
%5A2F5A2F5AA8A95AA9FF5A2F302F84A8A97E5A2F302F5A2F542FA9FD21FF
%545A545A305A545A2F5A5AAFFFA95AAFFD04FF7E30305A305A5AFD10FF7E
%2F5A305A2FA9FD04FFA87EA8FFA87E2F5A545A305A545A2F7EFD22FF842F
%5A2F5A2F5A2F5A2F5A2F7EA9FD05FFA9AF84845A5A2F3084FFFFFF84847E
%847EAFFD05FFA92F5A2F5A7EA9A8FFA9FD05FF54542F5A2F5A2F5A2F5A2F
%307EFD22FFA95A2F5A545A2F5A545A2F5A305AA9FFFF842F5A5AA9A8FFAF
%A984FFFFA92F5A305A2F5A3084A9FFFFFFA9A9A9FFA9AF847E2F5A84FFFF
%FF545A2F5A545A2F5A545A2F5A5AFD24FF5A302F5A2F542F5A2F542F5A2F
%5AFFFF5A302F542F542F5A5A847EAF7E302F5A2F542F5A2F547EFF84847E
%7E545A2F302F542F84FFFF2F542F542F5A2F542F5A2F542F84FD24FFAF2F
%5A545A305A545A305A545A2FAFFFA92F5A545A305A305A2F3084FF545A54
%5A305A545A2F85FF7E2F5A305A305A545A305AA9FF845A545A305A545A30
%5A545A305AAFFD25FF5A2F5A2F5A2F5A2F5A2F5A2F307EFFA8542F5A2F5A
%2F5A2F5A2FA9FFA92F5A2F5A2F5A2F5AFFFF84302F5A2F5A2F5A2F542FFF
%FF7E2F5A2F5A2F5A2F5A2F5A2F305AFD26FFA85A2F5A545A2F5A545A2F5A
%30A9FFFF5A5A2F5A545A2F5A305AA97E847E2F5A545A2F5AAF855AFF545A
%2F5A545A2F5A307EFFFF7E542F5A545A2F5A545A2F5A30AFFD27FF54542F
%5A2F542F5A2F542F5AA9A9847E2F542F5A2F542F547E842F5A7E5A2F5A2F
%30A8A92F307E7E2F542F5A2F542F547EA9A8FF2F542F5A2F542F5A2F542F
%7EFD28FFA92F5A545A305A545A305A7EFF5AA9845A305A545A305A54A954
%5A3084845A545A7EFF5A5A307E845A305A545A305A30A97E85FF842F5A54
%5A305A545A305AA9FD28FFA95A2F5A2F5A2F5A2F542FFFFF5A5AA92F5A2F
%5A2F5A2F8584302F5A2FA95A305AFF84542F5A2FA95A302F5A2F5A2F5AA8
%5A53FFA8302F5A2F5A2F5A2F5454FD2AFF7E542F5A545A2F5A307EFFA92F
%5AA85A545A2F5A305AFFA92F5A2F5A84FF7EFFFF7E2F5A545484FF5A5A2F
%5A545A54AF545AA8FF5A5A2F5A545A2F5A30A9FD2BFF2F542F5A2F542F54
%A8FF54542FA9535A2F542F5AA9FFA85A2F302F5AFD04FF53302F5454FFFF
%FF53302F5A2F5A845A2F7EFFA92F542F5A2F542F5AA9FD2BFF842F5A545A
%305A5AFFA95A545AA8852F5A5AA9FD04FFAFA9A8AFA9FD04FFAFA8AFA8FD
%05FF7E5A30307EA9305A54FFFF5A2F5A545A305A84FD2CFFA8542F5A2F5A
%2FA9FF842F5A2FA9A8A9A8AF84845A5A2F5A5A7E7EFFFFA97EFFFF845A7E
%5A5A537E7EA9A8AF84FF84542F307EFF7E302F5A2F542FFD2EFF5A5A2F5A
%305AFFFF54542F85FFFFFFA954542F5A305A2F5454FFFF85305454FFA95A
%2F5A305A2F5A305A84FFFFFF5A5A2F5AFFFF5A5A2F5A3084FD2EFFA92F54
%2F307EFFA8845AA9FD04FF2F542F542F5A2F305AFFAF5A2F5A2F302FFFA9
%5A2F5A2F542F5A2F5AFD04FF84847EFFFF842F542F5AA8FD2FFF5A2F5A5A
%FD04FFA97E855A84FFFF305A305A305A84FFA95A2F5A545A545A54FFFFA9
%545A305A305AA9FF5A5A5AA9A9FFFFFFAF5A305A5AFD30FF7E302F85FFFF
%7E5A2F302F5A2F5AFFA92F302F7EA8FFA8302F302F542F302F305AFFFFA9
%5A302F5AA8FF2F542F542F5A5484FFFF5A302FA9FD31FF7E7EFFFF5A542F
%5A545A2F5A305AFFA95AA97E5AA9FF84A984A97EA984A9A8FFFFA954A984
%7EA9FF5A5A2F5A545A2F5A2F5AA9FF5A84FD34FFAF2F542F542F5A2F542F
%5A2F5AFFFF7E302FA9FFA9A8AFA9FFFFFFA8A9A8FF7E302F84FFFF2F542F
%542F5A2F542F5A2F5AA8FD36FF7E5A545A305A545A305A545A2F7EFF842F
%5AA8852F5A305AAFFF305A2F5AA9A92F5A7EFF545A545A305A545A305A54
%5A2FA9FD36FF842F5A2F5A2F5A2F5A2F5A2F5A2F5A845A2FA97E302F5A2F
%FFA8542F5A2FA97E305AA954302F5A2F5A2F5A2F5A2F5A2F3084FD37FF85
%2F5A305A2F5A545A2F5A545A2F5AA984A8A9305A2F5AFFFF2F5A545A84A9
%7EAF545A545A2F5A545A2F5A305A2F5A84FD36FFAFFFFFFF847E2F302F5A
%2F542F5A2F5A2F5AA9FF5A542F305AFFFF5A2F5A2F84FFFF2F302F5A2F54
%2F5A2F302F5A5AA9FD39FF8485A8FFFFFF847E545A2F5A545A305A54FFFF
%85305A30FFFFFFA85A545A84FFA95A2F5A545A305A305A5AA9FFFFFFAF7E
%A9FD36FFAF2F302F7E84FFFFFF845A2F5A2F545AFFFFFF7E542F84FD04FF
%7E302FA9FFFFA85A2F5A2F5A5AA9A9FFA8A95A5A2F5AA9FD37FFA92F5A2F
%5A305A7EFFFFFFA8A9A9AF7E7EA9842FA9FFAF7E7E7EAF7E307EAF5AA9A8
%A9A8AFAFFFA8855A5A2F5A305484FD39FF7E2F5A2F5A2F302F5A5A847E7E
%2F302FA9A8A9A87E2F302F302FA984AF7E302F5A5A847E7E2F302F5A2F54
%2F305AFD3BFF5A2F5A545A305A545A2F5A305A305A84FFA85A305A305A54
%5A5AFFFFA92F5A545A2F5A305A305A545A305A5AFD3CFFA85A2F5A2F5A2F
%5A2F5A2F5A2F5A2FA984302F5A2F5A2F5A2F5AA8FF7E302F5A2F5A2F5A2F
%5A2F5A2F3053FD3EFFA95A2F5A545A2F5A545A2F5A545484AF305A2F5A54
%5A2F5A30A9FFA9305A2F5A545A2F5A545A2F5A5AFD40FFA85A2F5A2F542F
%5A2F542F5A2F84FFFF5A542F5A2F542F545AFF7E542F542F5A2F542F5A2F
%302FFD42FFA95A305A305A545A305A545A84A97EAFA8855A5A2F5A305AFF
%A9305A305A545A305A545A5AFD44FFA97E2F542F5A2F5A2F5A2F845A302F
%5A5AA97E5A2F5A2FA97E5A2F5A2F5A2F5A2F545AFD47FF85305A2F5A545A
%2F5A847E2F5A305A2F7E7EA95A5AA9A92F5A545A2F5A305A7EFD49FFA92F
%542F5A2F542F855A542F5A2F542F5453A9A8FF7E302F5A2F542F5AA8FD4B
%FFAF545A545A305A847E2F5A545A305A305AA8FFFFA92F5A545A2F5AAFFD
%4DFFA92F5A2F5A2F855A542F5A2F5A5A847E7E2F8484302F5A2F5AA8FD4F
%FFAF305A3054847E2F5A5A857E7E545A2F54A8A92F5A2F5AAFFD52FF5A5A
%5AFF7E5AA8A95A5A2F5A2F5A84FFA87E2F5AA8FD22FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 O
0.005737 0.113741 0.143526 0 0.988235 0.890196 0.827451 Xa
0 J 0 j 1 w 10 M []0 d0 XR
503 382.0282 m
502.5788 381.9782 l
502.1546 381.9789 502.1544 381.9789 V
502.1629 402.6386 502.1715 423.2984 502.1802 443.9581 C
502.4569 443.9902 502.7301 443.9719 503 443.9032 C
503 423.2782 503 402.6532 503 382.0282 C
f
0.152316 0.080537 0.011048 0 0.827451 0.866667 0.933333 Xa
345.0444 148.3677 m
345.0225 148.0795 345.0077 147.7909 345 147.502 C
337.3333 147.502 329.6667 147.502 322 147.502 C
321.9644 147.7629 321.9438 148.025 321.9384 148.2883 C
329.6404 148.3148 337.3424 148.3412 345.0444 148.3677 C
f
0.405737 0.24036 0.014893 0 0.584314 0.682353 0.843137 Xa
296 147.502 m
296.0382 147.8139 296.0062 148.1184 295.9042 148.4158 C
297.6536 148.3946 299.4029 148.3733 301.1522 148.352 C
301.0473 148.0783 300.9965 147.795 301 147.502 C
299.3333 147.502 297.6667 147.502 296 147.502 C
f
0.388342 0.230381 0.018036 0 0.6 0.694118 0.847059 Xa
366.0707 148.4365 m
365.9779 148.1302 365.9544 147.8187 366 147.502 C
364.3333 147.502 362.6667 147.502 361 147.502 C
360.9883 147.7885 360.9376 148.068 360.8482 148.3407 C
362.5891 148.3728 364.3299 148.4046 366.0707 148.4365 C
f
0.001617 0.502312 0.741939 0 0.964706 0.580392 0.32549 Xa
327.7308 377.9068 m
364.0634 377.9068 400.3963 377.9773 436.7281 377.8113 C
440.9326 377.792 441.9998 378.9814 441.9612 383.0972 c
441.7582 404.7178 441.7411 426.3427 441.9715 447.9627 C
442.0176 452.2936 440.5885 453.1201 436.5863 453.1005 C
405.0877 452.9457 373.5876 453.098 342.0893 452.9158 C
337.8528 452.8913 336.6792 454.1408 336.9148 458.2136 c
337.2504 464.0157 337.2765 469.8691 336.9088 475.6673 c
336.6364 479.9621 337.7899 481.3008 342.3363 481.2685 C
373.0007 481.0504 403.6675 481.1548 434.3335 481.1548 C
438.5001 481.1548 442.6669 481.1836 446.8332 481.1492 c
459.4135 481.0455 468.9263 471.5844 468.9891 459.0076 C
469.132 430.4028 469.2459 401.7977 469.315 373.1927 C
469.3495 358.9116 457.2961 346.9937 442.9337 346.9645 C
412.4365 346.9025 381.9316 347.2482 351.444 346.6752 c
305.1254 345.8047 258.806 346.5003 212.4904 345.9589 C
207.5755 345.9014 202.8339 346.7178 198.481 348.9834 C
190.3216 353.2302 185.6113 359.6494 185.6408 369.2376 C
185.7304 398.3446 185.686 427.452 185.665 456.5593 C
185.6591 464.6554 189.8444 470.6952 195.1766 476.1788 c
196.9828 478.0362 198.6608 478.1823 200.5407 475.9386 c
204.0635 471.7339 207.7288 467.6362 211.5296 463.6802 c
213.4003 461.7332 213.3301 459.5315 213.3296 457.206 c
213.3251 432.5896 213.4364 407.9722 213.2244 383.3577 c
213.187 379.0045 214.2634 377.7751 218.7337 377.7988 C
255.0653 377.9909 291.3983 377.9068 327.7308 377.9068 C
f
302.6734 442.3944 m
294.4473 433.1683 287.1811 425.0177 279.9135 416.8682 c
275.9277 412.3988 271.8099 408.0378 268.0015 403.4225 C
265.758 400.7037 264.5843 401.0429 262.546 403.7532 C
245.4528 426.4822 228.1842 449.0797 211.0428 471.7728 c
208.9805 474.5031 204.5015 477.8553 205.6967 480.0366 c
207.2727 482.9129 212.3196 480.9583 215.8501 481.0906 c
222.0069 481.3213 228.1898 480.9321 234.3397 481.2414 c
237.82 481.4165 239.8538 480.0138 241.7416 477.366 c
249.2713 466.805 257.0226 456.4007 264.4983 445.8024 c
266.5547 442.887 267.5748 442.9262 269.6539 445.8176 C
277.5176 456.7535 285.6845 467.472 293.5973 478.3735 c
295.0262 480.3422 296.4972 481.226 298.9327 481.1973 c
308.0963 481.0893 317.2631 481.0727 326.4262 481.2007 c
329.2229 481.2397 330.1856 480.3281 330.1784 477.4929 C
330.1017 447.2267 330.0978 416.9602 330.1852 386.6941 c
330.1938 383.7296 329.0189 383.053 326.3376 383.1121 C
320.0086 383.2515 313.6639 383.3757 307.3462 383.0743 C
303.5303 382.8922 302.5566 384.1951 302.5938 387.883 C
302.7715 405.4976 302.6734 423.1151 302.6734 442.3944 C
f
0.708309 0.473091 0 0 0.329412 0.490196 0.745098 Xa
338.0085 627.1804 m
362.8374 599.5577 386.8718 572.819 411.7553 545.1355 C
401.0859 545.1355 391.5096 544.785 381.9705 545.2304 C
371.651 545.7122 361.3314 545.7588 351.0456 545.3365 c
346.0874 545.1329 343.5758 547.0327 341.8496 551.0811 C
339.0061 557.7499 338.1068 564.8456 337.5948 571.9598 c
336.2987 589.9687 336.5801 607.9706 338.0085 627.1804 C
f
404.3627 278.9774 m
404.6729 283.8214 406.2794 287.7339 409.2845 291.0598 C
413.3635 295.5742 418.2396 298.9718 423.8994 301.1911 c
437.9663 306.7072 452.0441 312.1963 466.1534 317.6031 C
467.3773 318.0721 468.8766 319.6705 470.1268 318.1237 c
471.0494 316.9822 469.7598 315.6643 469.2505 314.4982 C
457.5696 287.7532 445.8745 261.0144 434.1756 234.2772 C
433.1738 231.9877 432.2507 229.4993 429.2549 229.261 C
426.4391 229.0369 424.9966 231.165 424.0594 233.2462 C
417.5926 247.6064 411.2571 262.0256 404.9204 276.4437 C
404.5308 277.3303 404.4902 278.3696 404.3627 278.9774 C
f
190.4239 319.6537 m
203.1599 314.7118 214.5693 310.3237 225.9461 305.8531 C
231.3553 303.7275 236.7982 301.6471 242.0491 299.1724 c
246.7517 296.9561 250.8359 293.745 253.8787 289.4448 c
257.4695 284.37 258.5312 279.0877 255.7821 273.0903 c
250.3206 261.1757 245.1698 249.1193 239.8854 237.1238 C
239.4843 236.2133 239.1185 235.2746 238.6047 234.4288 c
237.1605 232.0519 236.0512 228.9375 232.6196 229.1986 c
229.5319 229.4335 228.5374 232.3293 227.4785 234.7447 C
216.9536 258.7533 206.4657 282.778 195.9735 306.8008 C
194.3209 310.5846 192.6991 314.3817 190.4239 319.6537 C
f
376.8427 488.6682 m
372.3495 488.668 367.8459 488.8535 363.3664 488.6061 c
360.0991 488.4257 358.1108 489.5879 356.635 492.4799 c
350.6384 504.2303 347.3923 516.975 343.2977 529.3917 c
341.4191 535.0882 346.1414 540.4266 352.7634 540.6341 c
365.8891 541.0453 379.0261 541.3082 392.1572 541.262 c
400.4112 541.2329 404.466 536.8807 405.0834 528.572 C
405.9646 516.7116 402.8708 505.5385 399.1164 494.5118 C
397.7596 490.5269 394.8198 488.43 390.3206 488.6256 c
385.8358 488.8206 381.336 488.6683 376.8427 488.6682 C
f
345.7798 629.8731 m
355.766 626.9206 365.7549 623.9771 375.7379 621.0136 c
390.852 616.5269 405.9521 611.9933 421.0832 607.5642 c
423.6101 606.8246 426.2762 606.572 428.8553 605.9936 c
435.7405 604.4496 437.6592 600.7159 434.6909 594.3542 c
430.7649 585.9403 426.6839 577.5986 422.7042 569.2094 c
421.3569 566.3693 420.3696 563.3273 418.7632 560.6491 c
416.5588 556.9743 414.1494 556.94 411.1773 560.0685 C
389.3487 583.0458 367.514 606.0174 345.6812 628.9908 C
345.7141 629.2849 345.7469 629.579 345.7798 629.8731 C
f
0.001617 0.502312 0.741939 0 0.964706 0.580392 0.32549 Xa
502.1802 443.9581 m
502.1715 423.2984 502.1629 402.6386 502.1544 381.9789 C
500.2101 375.559 497.1787 373.0623 490.7209 373.0887 C
485.7553 373.109 479.3631 371.0225 476.2087 373.8687 C
472.9747 376.7867 475.2116 383.2787 475.1817 388.1914 C
475.0575 408.631 475.2315 429.0727 475.0402 449.5113 C
475.0036 453.4113 476.1533 454.9962 480.0436 454.7519 c
482.5293 454.5959 485.0369 454.7424 487.5331 454.809 c
496.4316 455.0467 499.7879 452.5704 502.1802 443.9581 C
f
0.708309 0.473091 0 0 0.329412 0.490196 0.745098 Xa
423.1071 550.7295 m
423.7881 560.9965 428.2823 571.1375 433.4514 581.0276 C
435.2955 584.5562 437.3747 587.9156 438.1122 591.9388 c
438.4167 593.5999 438.706 596.0712 440.9891 595.978 c
443.074 595.8929 443.4203 593.5367 444.0244 591.8556 c
447.5016 582.1792 450.8704 572.4633 454.4215 562.8143 c
460.8354 545.3868 466.4948 527.6848 473.5527 510.4904 c
474.1376 509.0654 475.4553 507.1969 473.8108 505.9468 c
472.3158 504.8104 470.6037 506.0674 469.258 507.0124 c
455.6535 516.5654 442.0168 526.0746 428.5251 535.7845 c
423.9023 539.1115 423.1201 544.2963 423.1071 550.7295 C
f
301.1522 148.352 m
299.4029 148.3733 297.6536 148.3946 295.9042 148.4158 C
294.022 148.7866 292.382 149.8556 291.2654 151.2001 C
280.2423 164.4727 265.0221 173.1938 253.5626 185.9967 C
248.8923 191.2146 244.3164 196.4697 240.7454 202.5069 c
239.784 204.1324 238.3508 205.6447 238.5904 208.3619 C
249.9296 205.1457 261.1743 202.3388 272.1496 198.7186 C
280.4706 195.9739 288.4466 194.6556 296.5835 198.8233 c
297.0217 199.0478 297.5207 199.1646 298.0015 199.2944 C
306.0715 201.4721 306.1448 201.4138 306.145 192.919 C
306.1451 180.7837 306.0607 168.6475 306.1931 156.5137 C
306.2362 152.5627 304.9761 149.7565 301.1522 148.352 C
f
366.0707 148.4365 m
364.3299 148.4046 362.5891 148.3728 360.8482 148.3407 C
357.3267 149.683 355.7799 152.1506 355.8119 155.9901 C
355.9242 169.4468 355.9919 182.9072 355.7707 196.3613 c
355.706 200.2962 357.3105 200.9517 360.5201 200.1458 C
363.0981 199.4984 365.8734 199.2002 368.1858 198.0166 c
374.1362 194.9712 379.7908 195.7615 385.9046 197.6853 C
398.2348 201.565 410.7498 204.8601 424.2049 208.6853 C
421.074 201.1719 416.7104 195.5188 412.0382 190.1256 c
406.2617 183.4575 399.7881 177.4793 393.0886 171.7279 C
385.9233 165.5766 377.8881 160.3923 372.1443 152.6287 c
370.7263 150.7122 368.5712 149.148 366.0707 148.4365 C
f
0.001709 0.495918 0.743099 0 0.964706 0.584314 0.32549 Xa
179.8705 414.1874 m
179.8703 402.0718 179.7857 389.9552 179.9299 377.8414 c
179.9659 374.8247 179.0717 373.7233 175.9849 373.8422 c
172.6838 373.9693 169.3634 373.4497 166.0483 373.393 C
158.5014 373.2639 156.1662 375.4984 156.1463 383.0389 c
156.0953 402.4569 156.1271 421.8751 156.1313 441.2932 c
156.1319 444.1051 155.945 446.9208 156.946 449.6571 c
158.1589 452.9727 160.3304 454.8818 163.9761 454.8799 c
167.8011 454.8779 171.6414 454.6689 175.4464 454.9437 c
178.9106 455.194 180.0114 454.0705 179.9506 450.5327 C
179.7421 438.4208 179.8706 426.303 179.8705 414.1874 C
f
0.708309 0.473091 0 0 0.329412 0.490196 0.745098 Xa
221.2159 337.2636 m
227.2139 337.2635 233.2139 337.169 239.2093 337.2936 C
243.9425 337.392 246.7985 335.8502 248.3206 330.8395 c
250.2409 324.5182 253.3053 318.5431 255.8753 312.4183 C
256.1964 311.6531 256.5825 310.9066 256.819 310.1159 c
257.8125 306.7935 259.5487 302.9881 256.7625 300.2404 c
253.9026 297.42 250.5577 300.0508 247.5457 301.2773 C
230.4538 308.2374 213.3751 315.23 196.2606 322.134 C
190.1767 324.5883 189.5276 328.1629 194.2163 332.8776 c
197.3206 335.9992 200.6156 337.7102 205.2285 337.3578 c
210.529 336.9528 215.8844 337.2638 221.2159 337.2636 C
f
403.9863 305.9963 m
404.2249 306.824 404.6487 308.7734 405.3438 310.6212 c
408.2045 318.2264 411.9767 325.465 414.3801 333.2632 c
415.21 335.956 417.5858 337.1457 420.2346 337.1656 c
433.7313 337.2669 447.2353 337.476 460.7227 337.118 C
465.0861 337.0021 468.0361 333.3888 469.9808 329.6918 c
471.6014 326.611 470.7537 324.1284 467.0582 322.6481 C
448.5357 315.2284 430.0905 307.6171 411.5955 300.1285 C
406.1356 297.9178 403.6551 299.5103 403.9863 305.9963 C
f
269.4331 239.3708 m
271.3637 239.792 273.6963 238.3669 275.9662 236.0391 C
283.7475 228.0595 291.5826 220.1229 299.6566 212.4415 c
302.742 209.5061 302.1145 207.1436 299.3599 205.1008 C
293.8251 200.9962 287.5503 198.7459 280.702 201.003 C
269.3428 204.7467 258.1135 208.8835 246.8368 212.8754 c
242.9644 214.2462 239.0815 216.0382 238.4034 220.4957 c
237.729 224.9295 240.8614 227.8778 244.1192 230.3246 C
251.201 235.6436 259.1485 238.7412 269.4331 239.3708 C
f
393.8897 239.2738 m
403.3125 238.7589 411.7282 235.4312 418.9458 229.4515 c
426.0549 223.5617 425.0377 216.7415 416.4646 213.4875 C
404.5176 208.9529 392.5126 204.4918 380.2942 200.78 C
373.7984 198.8066 367.4661 201.1634 362.1987 205.4765 C
359.8352 207.4118 359.3345 209.4996 362.0239 212.0926 C
370.5172 220.2811 378.8314 228.658 387.0844 237.0893 C
389.0843 239.1324 391.3096 239.4797 393.8897 239.2738 C
f
449.7142 489.666 m
445.0609 489.1675 439.4094 490.3909 433.8011 488.9873 c
431.2847 488.3576 429.9507 490.495 428.7771 492.3271 c
425.9684 496.7116 424.339 501.6158 423.1276 506.5978 C
420.9771 515.4421 419.1054 524.3554 417.231 533.2637 C
416.9083 534.7977 416.2791 536.7444 417.9246 537.8842 c
419.6569 539.084 421.0739 537.5499 422.3311 536.634 C
436.686 526.1763 450.9897 515.6487 465.3393 505.1838 c
466.7109 504.1835 467.8483 503.0499 468.7665 501.6442 c
470.5175 498.9636 472.3615 496.1572 470.8741 492.8916 c
469.2788 489.3892 465.7924 489.695 462.6341 489.6728 c
458.6449 489.6448 454.6554 489.666 449.7142 489.666 C
f
265.1649 500.0154 m
265.356 498.6028 264.0789 498.0317 261.7435 498.6605 c
259.4287 499.2838 257.4471 500.553 255.6851 502.0473 C
240.9709 514.5261 225.9794 526.7116 213.0163 541.0917 C
211.243 543.0588 209.6613 545.2202 208.1863 547.4219 c
207.6 548.2971 206.8494 549.4881 207.78 550.6442 c
208.7302 551.8249 209.8779 551.1616 210.9853 550.8588 c
221.5669 547.966 232.1225 544.9727 242.7418 542.2241 C
262.8864 537.0101 258.7472 536.1846 261.6907 521.4147 c
263.02 514.7447 263.8878 507.9831 265.1649 500.0154 C
f
391.6215 294.2014 m
397.2703 294.2345 398.1007 292.8537 397.0376 287.8858 c
394.6136 276.5586 392.3445 265.1932 390.327 253.7878 C
389.786 250.7298 388.5107 250.0481 385.7473 250.2773 C
376.4808 251.0456 369.4741 255.5998 364.1919 262.9789 C
359.5846 269.4153 356.9862 276.7402 355.2914 284.3993 c
354.9549 285.92 354.2248 287.8889 356.9477 288.1175 C
368.2116 289.063 379.3425 290.7204 390.1634 294.1154 C
390.7757 294.3076 391.4838 294.1953 391.6215 294.2014 C
f
270.4407 294.2331 m
272.1117 294.3941 274.1496 293.6142 276.1965 292.9439 C
285.0985 290.0288 294.3554 289.1702 303.5936 288.2148 C
305.4351 288.0244 307.4687 288.2709 306.8088 285.322 C
304.3466 274.3185 300.6365 263.9589 291.6353 256.3949 c
286.9003 252.416 281.3813 250.4241 275.1745 250.2787 C
273.2698 250.2341 272.2664 250.6806 271.8002 252.8516 C
269.1599 265.148 267.4842 277.6296 264.429 289.8539 C
263.4173 293.9018 266.8907 294.189 270.4407 294.2331 C
f
327.9948 626.2339 m
327.9948 608.0759 327.9766 591.0436 328.0096 574.0113 c
328.0166 570.4329 326.1101 571.7792 324.5355 572.6236 c
316.1675 577.1112 308.6416 582.8631 300.944 588.3586 c
298.6574 589.991 296.2997 591.528 293.9306 593.0402 c
290.3777 595.3079 290.012 597.5506 292.7815 600.7486 c
293.3231 601.374 293.8898 602.0135 294.5575 602.489 c
305.3553 610.1798 316.1713 617.8451 327.9948 626.2339 C
f
250.0916 591.1823 m
273.8189 577.8858 295.8288 563.8466 315.377 545.7839 C
306.5045 547.1883 297.6286 548.5717 288.7608 550.0053 c
283.679 550.8268 278.6385 551.9945 273.5294 552.5364 c
265.0365 553.4372 259.2889 556.3727 256.7357 565.7755 c
254.5448 573.8446 250.7659 581.4899 250.0916 591.1823 C
f
327.3157 296.194 m
334.2564 296.9116 340.363 292.594 346.6505 288.937 C
349.0521 287.5401 349.377 285.4158 347.5597 283.0376 c
342.3125 276.1707 337.0594 269.305 331.9893 262.3084 C
330.3124 259.9944 329.0934 260.1071 327.3861 262.08 c
320.7085 269.7966 315.8721 278.7443 310.65 287.4023 C
308.8133 290.4475 310.6511 293.1978 314.1095 294.2915 c
318.0903 295.5503 322.1744 296.2935 327.3157 296.194 C
f
351.0884 172.3263 m
351.1793 167.3797 349.5809 165.1989 346.2741 166.934 C
335.3901 172.6445 323.5099 176.2008 312.9354 182.5591 c
309.273 184.7613 308.7714 186.5936 312.387 189.5023 c
317.7302 193.8007 323.1012 197.9332 329.8287 199.8092 c
335.6119 201.4219 340.587 200.0614 343.3875 195.2683 C
347.7805 187.7496 348.8733 179.0593 351.0884 172.3263 C
f
393.0153 336.2313 m
397.5025 336.2279 401.9931 336.334 406.4754 336.1873 c
409.0785 336.1021 411.6187 335.1043 409.712 331.9412 c
406.4113 326.4656 405.1312 320.2676 402.7354 314.4807 c
402.356 313.5644 402.1216 312.5832 401.6919 311.6936 C
399.8731 307.9284 398.0945 303.8125 393.2572 303.4428 C
388.6386 303.0899 385.9157 306.641 384.0467 310.057 c
380.6364 316.2901 377.7274 322.8176 374.9502 329.3662 c
373.3891 333.0474 375.433 335.9589 379.5565 336.1802 C
384.0308 336.4203 388.528 336.2346 393.0153 336.2313 C
f
269.216 336.2647 m
273.2045 336.2633 277.1956 336.3568 281.1807 336.2408 c
286.7269 336.0794 288.7059 333.0942 286.5232 328.1055 c
284.0673 322.4922 281.4629 316.9423 278.8407 311.4038 C
278.282 310.2238 277.4496 309.1435 276.6047 308.1327 c
270.7008 301.0688 264.9628 301.6874 261.0201 310.1311 C
258.7162 315.0651 257.1399 320.3374 255.2335 325.4565 c
254.9445 326.2326 254.6458 327.0051 254.3419 327.7755 C
250.9929 336.2653 250.9924 336.2651 260.7406 336.2659 c
263.5658 336.2662 266.3909 336.266 269.216 336.2647 C
f
228.0494 555.1086 m
226.4939 555.6199 224.366 556.1166 222.4104 556.9951 c
209.9707 562.5834 197.5598 568.2361 185.1602 573.9126 c
181.3021 575.6789 180.5186 578.4757 183.4704 581.6499 c
186.2758 584.6666 189.549 587.3047 192.8668 589.7744 c
195.405 591.6637 198.1626 591.4713 200.5204 589.0512 c
210.2683 579.0457 220.0334 569.0569 229.7627 559.0335 c
230.6419 558.1277 231.9324 557.1797 231.2499 555.6733 c
230.74 554.5478 229.5686 554.9004 228.0494 555.1086 C
f
223.7062 494.9015 m
210.0777 497.5351 195.8613 499.2733 182.4982 504.6465 c
181.1192 505.201 179.4457 505.867 179.4894 507.5503 c
179.5291 509.0775 181.3098 509.2474 182.4801 509.762 C
189.3156 512.7671 196.1662 515.7381 203.0057 518.734 c
206.6313 520.3222 209.2245 519.9272 211.9526 516.3664 c
216.3763 510.5924 221.6686 505.4842 226.5421 500.0484 c
227.4782 499.0043 229.4638 498.113 228.5998 496.4761 c
227.7929 494.9473 225.7396 495.1112 223.7062 494.9015 C
f
309.1982 164.3577 m
309.1982 167.6733 309.1982 170.9889 309.1983 174.3045 c
309.1983 176.9228 310.4824 178.063 313.0056 177.2435 C
322.6276 174.1184 332.3927 171.3022 341.2462 166.2594 C
345.8077 163.6614 345.6902 162.0324 341.0811 159.5295 c
336.8337 157.223 332.2806 155.6652 327.6513 154.3047 C
324.0074 153.2337 320.481 152.0644 317.1825 149.925 C
312.3017 146.7592 309.2625 148.6387 309.1649 154.4122 c
309.1088 157.7264 309.1547 161.0423 309.1547 164.3574 C
309.1692 164.3575 309.1837 164.3576 309.1982 164.3577 C
f
330.5852 336.0227 m
346.6172 336.2528 344.9969 335.4561 342.2198 321.8402 C
341.2233 316.9545 340.1936 312.0693 337.7148 307.6996 C
336.2291 305.0806 334.2411 302.5238 330.7706 302.8841 c
327.3699 303.2371 325.8233 305.8363 324.8746 308.8747 c
322.6541 315.9866 320.3408 323.0697 318.1376 330.1869 c
316.8264 334.423 318.0166 335.935 322.6048 336.0143 C
325.2642 336.0604 327.925 336.0227 330.5852 336.0227 C
f
412.3857 488.5521 m
411.0575 488.5521 409.678 488.7849 408.4109 488.507 c
405.0327 487.7663 403.9239 489.6729 403.3492 492.4231 c
402.7539 495.2724 403.3582 498.0456 403.9197 500.8001 C
405.7695 509.8749 407.6297 518.9484 409.6237 527.9921 C
410.0337 529.8518 410.5102 532.466 412.8362 532.4786 c
415.2158 532.4915 415.5736 529.8018 415.9757 527.9856 c
418.0854 518.458 420.7676 508.9713 421.8098 499.3154 C
423.081 487.5378 422.0119 488.1283 412.3857 488.5521 C
f
184.9791 623.6857 m
184.9373 620.1739 185.656 615.7578 183.3637 613.5814 c
179.9593 610.349 177.5728 615.545 174.7633 616.7876 c
167.0248 620.2102 159.6124 624.421 152.7293 629.4323 c
151.6793 630.1967 150.1752 630.9873 150.2686 632.3603 c
150.3863 634.0905 152.3414 633.7329 153.4765 634.0655 c
160.9734 636.262 168.5053 638.3427 176.0472 640.3826 c
182.3108 642.0767 183.8153 640.8945 184.081 634.6055 c
184.235 630.9595 184.6703 627.3253 184.9791 623.6857 C
f
341.6772 249.6477 m
354.6685 251.3501 366.6634 252.7417 378.2307 247.6205 C
384.9941 244.626 385.1505 243.3887 380.482 237.951 C
371.5315 227.5257 371.5144 227.5004 360.1505 235.1706 C
353.9712 239.3414 348.0263 243.823 341.6772 249.6477 C
f
320.336 249.555 m
311.9504 242.3486 304.2042 236.2006 295.5177 231.2897 c
291.7279 229.1471 288.5365 228.8568 285.7082 232.9367 c
283.9286 235.5039 281.7072 237.799 279.4866 240.0195 C
277.2264 242.2795 277.7267 243.8607 280.1133 245.5808 c
285.4655 249.4383 291.7001 250.3209 297.9745 250.9564 c
305.0909 251.6773 312.1254 250.7194 320.336 249.555 C
f
0.001678 0.496071 0.736385 0 0.964706 0.584314 0.329412 Xa
247.0664 481.5005 m
259.9333 481.5005 271.2321 481.4964 282.5309 481.5037 c
285.0505 481.5053 285.4832 480.5808 284.0266 478.5302 c
279.3077 471.8872 274.6279 465.2164 269.959 458.5382 C
268.8094 456.8938 267.7282 456.1473 266.1366 458.1138 C
260.0972 465.5754 254.008 472.9969 247.0664 481.5005 C
f
0.703975 0.46772 0 0 0.333333 0.494118 0.74902 Xa
328.5 230.6911 m
323.3372 230.6911 318.1743 230.6744 313.0117 230.7062 c
312.0636 230.7121 310.8589 230.359 310.3051 231.4315 c
309.6382 232.723 310.6378 233.7554 311.4561 234.44 C
316.9356 239.0236 322.3376 243.7272 328.0965 247.94 C
331.5019 250.4312 335.2104 249.1887 338.1589 246.5596 C
341.6301 243.4643 344.8836 240.1225 348.1715 236.8278 c
349.2179 235.7792 350.4211 234.5542 349.7636 232.913 c
349.1306 231.3329 347.4381 230.9585 345.974 230.9312 C
340.1512 230.8224 334.3252 230.8864 328.5004 230.8864 C
328.5002 230.8213 328.5001 230.7562 328.5 230.6911 C
f
0.70489 0.474281 0 0 0.333333 0.490196 0.74902 Xa
351.8615 210.2469 m
351.8607 206.2774 351.7487 202.3038 351.8983 198.34 c
352.006 195.4875 350.9705 195.3882 348.7081 196.4026 c
340.275 200.1835 332.6746 214.2472 334.1725 223.375 c
334.3598 224.5161 334.6837 225.234 335.8969 225.3088 c
336.3926 225.3393 336.8914 225.3182 337.3873 225.3474 C
351.8623 226.2004 351.8623 226.2009 351.8615 210.2469 C
f
310.1383 210.1606 m
310.1382 210.9921 310.0783 211.8286 310.1483 212.6542 c
310.4948 216.7421 308.2223 222.5995 311.0657 224.5213 c
314.8714 227.0935 320.7186 225.1383 325.6842 225.324 C
327.0915 225.3766 327.5706 224.7602 327.7286 223.2521 c
328.7327 213.6696 322.6154 201.6722 314.2958 196.9573 C
311.4964 195.3708 309.7845 194.8694 310.0861 199.1886 c
310.3403 202.8295 310.1384 206.502 310.1383 210.1606 C
f
316.3307 498.2326 m
316.3307 505.9026 316.429 513.1761 316.2812 520.4446 c
316.2238 523.2714 317.2454 525.0431 319.6717 526.452 c
324.5349 529.276 329.266 532.3266 334.0667 535.2929 C
336.8797 527.7028 326.486 505.8796 316.3307 498.2326 C
f
0.708309 0.473091 0 0 0.329412 0.490196 0.745098 Xa
177.2747 531.6352 m
168.0074 531.6352 158.74 531.6146 149.4728 531.6504 c
147.2904 531.6588 145.793 533.0584 144.4689 534.5812 c
140.3902 539.2722 138.3015 544.9279 135.8228 551.683 C
150.4361 545.0808 164.6626 540.4181 177.8394 533.4176 C
177.6512 532.8235 177.4629 532.2293 177.2747 531.6352 C
f
346.9026 254.304 m
338.0697 254.3056 338.0356 254.4207 340.6481 262.7963 c
342.2526 267.9404 344.6369 272.6035 348.2134 276.6533 c
350.0301 278.7103 351.5911 279.0093 353.2701 276.3977 c
355.4309 273.0366 357.5746 269.6762 358.6439 265.7959 c
360.5155 259.0042 357.4815 254.8213 350.3928 254.3157 c
349.235 254.2331 348.0663 254.304 346.9026 254.304 C
f
315.3599 254.3079 m
313.871 254.3129 312.3684 254.1825 310.8955 254.3355 c
304.5209 254.9979 301.7028 258.6468 303.1335 264.8578 c
303.7525 267.5451 304.9797 270.1668 306.3276 272.5991 C
310.4127 279.9711 311.788 279.9707 316.6335 272.815 C
319.3502 268.8033 320.767 264.2592 322.2038 259.6648 c
323.4509 255.6772 322.4567 254.0756 318.3375 254.295 c
317.3476 254.3478 316.3526 254.3029 315.3599 254.3079 C
f
0.70489 0.474281 0 0 0.333333 0.490196 0.74902 Xa
299.5235 292.3233 m
292.7035 293.6889 285.8719 295.0003 279.0686 296.4446 c
275.9883 297.0985 274.6862 298.231 276.6454 301.8195 c
283.188 313.8026 284.7687 314.2198 295.1788 305.1414 C
298.2184 302.4907 300.7366 299.4201 301.9129 295.4889 c
302.4846 293.5786 302.6932 291.6483 299.5235 292.3233 C
f
361.6446 292.4977 m
359.4981 292.087 359.6443 293.2759 359.8738 294.8094 c
360.7263 300.5038 371.8208 311.2506 377.4549 311.8527 c
378.7036 311.9861 379.3755 311.3385 379.8726 310.5306 c
381.9485 307.157 383.9439 303.7337 385.9413 300.3125 C
387.2432 298.0826 385.7383 297.5255 383.9866 296.9526 C
376.7125 294.573 369.1296 293.7618 361.6446 292.4977 C
f
0.707454 0.47364 0 0 0.329412 0.490196 0.74902 Xa
245.8944 599.9489 m
242.3482 600.2117 240.2698 601.5709 239.9351 604.7441 C
239.3968 609.8474 238.9858 614.964 238.4931 620.0724 c
238.2379 622.7179 239.6046 622.9535 241.5131 622.0171 c
247.9651 618.8518 253.6422 614.5228 259.1163 609.9418 c
260.6848 608.6292 261.2907 606.3648 259.1301 605.3747 c
254.6611 603.3267 250.3569 600.7336 245.8944 599.9489 C
f
0.703975 0.46772 0 0 0.333333 0.494118 0.74902 Xa
356.6597 303.0181 m
358.8136 313.4293 360.7966 323.0966 362.8201 332.7555 c
363.6424 336.6809 366.8127 334.4828 368.922 334.94 c
370.7861 335.3441 371.762 334.5899 372.257 332.444 C
374.8252 321.3101 368.1407 307.9083 356.6597 303.0181 C
f
0.70489 0.474281 0 0 0.333333 0.490196 0.74902 Xa
305.2058 303.215 m
294.1686 306.9854 286.6524 321.9404 289.6549 332.6663 C
290.3877 335.2843 292.0012 335.1542 293.7436 334.9307 c
295.6156 334.6905 298.3495 336.3003 299.0476 332.9689 C
301.1041 323.155 303.1154 313.3316 305.2058 303.215 C
f
398.3641 275.6051 m
402.6065 264.4943 406.2429 254.7042 410.1101 245.0059 c
411.2619 242.1175 410.3693 241.6351 407.6744 241.6349 c
396.6019 241.634 392.0906 247.2265 394.6043 257.8329 c
395.9019 263.308 396.9435 268.8435 398.3641 275.6051 C
f
263.5004 275.4277 m
265.1716 267.7439 266.9164 261.2279 267.948 254.6012 c
269.2673 246.1258 260.5198 239.0762 252.4823 241.6969 C
250.6647 242.2896 251.2109 243.2065 251.6395 244.3282 c
255.4712 254.3549 259.2912 264.3861 263.5004 275.4277 C
f
111.815 516.8922 m
120.9545 513.3839 129.1339 510.3165 137.2526 507.0967 C
141.1938 505.5337 141.44 503.3258 138.199 500.5897 c
130.6304 494.2 127.8638 494.4056 121.6501 502.0333 c
118.0989 506.3926 114.8535 510.9754 111.815 516.8922 C
f
0.700465 0.468605 0 0 0.337255 0.494118 0.74902 Xa
351.6392 300.9481 m
348.1514 311.323 347.9663 322.0451 348.1989 332.7783 C
348.2932 337.126 351.9016 334.827 353.9295 335.1776 c
355.4794 335.4455 358.0983 335.9858 357.7833 332.9638 c
356.6597 322.1824 356.1266 311.2756 351.6392 300.9481 C
f
310.2328 299.8988 m
306.834 307.8011 306.1858 315.2112 305.1391 322.5148 c
304.6699 325.7893 304.5311 329.1097 304.1265 332.3952 c
303.7958 335.0807 305.375 335.6994 307.3969 335.2052 c
309.5941 334.6681 313.0378 337.2804 313.8347 332.936 c
314.7764 327.802 312.593 306.4906 310.2328 299.8988 C
f
0.686061 0.448524 0 0 0.34902 0.505882 0.752941 Xa
337.3351 520.1113 m
342.5388 514.1144 346.7424 507.9056 349.4965 500.8274 c
350.174 499.0864 349.5872 498.2005 347.8834 497.4134 c
341.6488 494.5334 337.3375 497.1491 337.3354 503.9624 c
337.3337 509.3454 337.3351 514.7284 337.3351 520.1113 C
f
0.70489 0.474281 0 0 0.333333 0.490196 0.74902 Xa
345.0444 148.3677 m
337.3424 148.3412 329.6404 148.3148 321.9384 148.2883 C
320.7564 149.4131 321.9965 149.4938 322.6111 149.7839 C
331.1459 153.8116 340.2421 156.2825 349.1517 159.266 C
351.8031 160.1538 352.8274 159.116 352.3631 156.308 c
351.652 152.008 348.755 149.8458 345.0444 148.3677 C
f
0.703975 0.46772 0 0 0.333333 0.494118 0.74902 Xa
306.1428 213.7122 m
303.3708 213.6784 301.7714 215.2509 300.0782 216.4592 c
296.9171 218.7151 293.3665 221.4958 294.4827 225.6137 c
295.5731 229.6362 300.1593 230.7823 303.7391 232.4066 c
305.3874 233.1545 306.1716 232.3824 306.1581 230.5753 c
306.1162 224.9836 306.1428 219.3914 306.1428 213.7122 C
f
355.8518 213.243 m
355.8518 219.2689 355.8267 224.6945 355.8739 230.1195 c
355.8828 231.1488 355.4937 232.9493 357.3148 232.5549 C
361.271 231.6982 365.056 229.8338 367.1915 226.4746 c
369.0696 223.5202 366.5421 220.8235 364.4676 218.7042 C
362.2856 216.4752 359.6889 214.7156 355.8518 213.243 C
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
