%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (image001 copy.ai)%%CreationDate: 4/20/22 11:14 AM%%Canvassize: 16383%%BoundingBox: -466 176 2342 936%%HiResBoundingBox: -465.2334 176.8094 2341.586 935.1134%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 960.5 539.5 960.5 539.5%AI3_TileBox: 582 252 1316 828%AI3_DocumentPreview: None%AI5_ArtSize: 1920 1080%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1204.3612 1766.5955 0.501191 2547 1303 18 0 0 6 45 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 36 8%%BeginData: 6654 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2FFF7D7D5252527DA8FD2AFFA87DA87DA8A8A8FD14FF9AB59AFD%2FFF7DFD07F827FD2AFF27FD06F8A8FD12FFCABC8CBCCAFD2DFF7DFD08F8%27FD2AFF52FD06F8A8FD11FF9AB593B593B599FD2BFF7DFD09F827A8FD29%FF27FD06F8A8FD11FF9A8C9393938C93FD2BFFFD0BF8FD2AFF52FD05F827%A8FD11FFC3C393B593C3C3FD2AFF7DFD07F8527D527DFD2AFF27FD06F8A8%FD13FFBC8C99FD2CFF52FD06F87DFD2EFF52FD06F8A8FD13FFC3C3C3FD06%FF7D522727275252A8A8FD09FFA87D52522727275252A8A8FD09FF27FD06%F8FD0BFFA87D5252272727527DFD0CFFA85252272727527DA8FD06FF27FD%06F8A8FD05FFA8FD067D52A8FFFFFFCAA1CAA1CAA1C3FFFF7DFD09F82752%FD06FFA82727FD09F8277DFD05FF7D7D7D27FD05F82752A87DFD07FF5227%FD08F827A8FD08FFA852FD09F8277DFD04FF52FD06F8A8FD05FFFD08F8A8%FFFFFF9AB593B593B593FF52FD0CF87DFFFFFFA827FD0EF852FD04FF27FD%0CF852FD04FF7DFD0DF852FD06FFA8FD0CF827FD04FF27FD06F8A8FD04FF%FD08F87DFD04FFBC92FD05937DFD0DF8A8FFFFFF7DFD10F8A8FFFFFF27FD%0CF87DFFFFFF7DFD0FF87DFD05FF27FD0CF827FD04FF52FD06F8A8FFFFFF%27FD07F87DFD05FF9AB593B593B593FD07F8275252FD04F87DFFFFFF7DFD%05F827522727FD07F852FFFFA827FD0CF852FFFFA8FD07F8525252FD07F8%A8FFFFFF7DFD07F8275227F8F8F852FD04FF27FD06F8A8FFFF52FD07F852%FD06FF9A8CFD0593FD06F827A8FFFFFFA852F8A8FFFFFFA8F8F8F87DA8FD%04FF7DFD06F827FFFFFF27FD0CF87DFFFF27FD06F8A8FD04FF27FD05F827%FFFFFF52FD06F87DFD04FF7D2727FD04FF52FD05F827A8FF7DFD07F827FD%07FF9AB593B593BB93FD07F8A8FD05FFA8A8FFFFFF7DF852FD08FFFD06F8%27FFFFFFA87DA827FD06F87D7DA8A8FFA8FD06F852FD06FFFD06F8A8FFFF%52FD06F852FD05FFA8A8FD04FF27FD06F8FFA8FD08F8FD08FFBC8CFD0593%27FD07F852A8FD08FF7D52FD08FFA8FD06F827FD06FF52FD06F8A8FD04FF%7DFD06F8A8FD06FF27FD05F87DFFFF7DFD07F8277DFD09FF52FD05F827A8%27FD07F8FD09FF9A9393B593B59352FD09F827A8FD0CFFA8A85227FD07F8%27A8FD05FF27FD06F8A8FD04FF52FD06F852525227525252FD06F852FFFF%FFFD0AF852FD07FF27FD06F827FD07F8A8FD09FFBC8CFD0593FF52FD0AF8%52FD09FFA85227FD0AF827FD06FF52FD05F827A8FD04FF52FD13F852FFFF%FFA8FD0BF8A8FD05FF52FD0DF852FD0AFF9AB593BB93B593FFFF52FD0AF8%27A8FD05FF7D27FD07F827FD05F827FD06FF27FD06F8A8FD04FF27FD13F8%27FD04FFA8FD0BF87DFD04FF27FD0EF8A8FD09FFBC92FD0593FFFFFFA852%FD09F852FD04FF7DFD06F8277DFF27FD05F827FD06FF52FD06F8A8FD04FF%52FD06F8275227522752275227522752277DFD06FF7D27FD09F8A8FFFFFF%52FD05F82752FD08F8A8FD08FF9AB593B593B593FD05FFA852FD08F8FFFF%FF7DFD06F852FFFFFF27FD05F827FD06FF27FD06F8A8FD04FF52FD06F852%FD15FFA827FD07F852FFFFFF27FD06F8FF52FD08F8FD08FF9A8CFD0593FD%07FFA827FD06F8A8FFFF27FD05F852FD04FF27FD05F827FD06FF52FD06F8%A8FD04FFA8FD07F8A8FD0AFFA8FFFFFFA8FD07FF52FD06F852FFFFFF52FD%05F827A8FF27FD07F827FD07FF9AB593B593BB9327277DFD05FF27FD06F8%A8FFFFFD06F852FD04FF27FD05F827FD06FF27FD06F8A8FD05FF27FD07F8%A8FD06FFA8A827F8A8FFFFA8F87DA8FD04FFA8FD06F827FFFFFF27FD06F8%A8FFFFFD08F827FD06FFBC8CFD059352F8F8277D7D7D27FD07F8A8FFFFFD%06F827A8FFA852FD07F852527DFFFFFF52FD06F8A8FD05FF7DFD08F82752%7D7D7D2727F8F8F8A8FFFFA8F8F827527D7D7D27FD06F852FFFFFF52FD06%F8A8FFFFFFFD08F852FD05FF9A9393B593B59327FD0DF827FFFFFFFD07F8%2727FD0BF852FFFFFF27FD06F8A8FD06FF52FD11F8A8FFFFA8FD0EF87DFF%FFFF27FD06F8A8FFFFFF7DFD08F87DFD04FFBC8CFD059327FD0DF8A8FFFF%FF7DFD13F87DFFFFFF52FD05F827A8FD07FF52FD10F8FFFFFF7DFD0DF852%FD04FF52FD06F8A8FD04FF7DFD08F8A8FFFFFF9AB593BB93B5935227FD0B%F8A8FD05FF52FD08F8277DFD08F87DFFFFFF27FD06F8A8FD08FF7D27FD0C%F827A8FD04FF27FD0BF852FD05FF27FD06F8A8FD05FF52FD08F8A8FFFFBC%92FD0593FFFFA852522727F82727527DFD08FF842727F8272752A8FFFFA8%2727F8272E7DA8FD04FF7D525252595259AFFD0AFFA852522727F827272E%5284AFFD07FFA87D52522727F827277DA8FD06FF7D525952525259FD07FF%7D5252525952522E84FFFF9AB593B593B593A8CACACFCACAA1CAA1CACACF%CACAA1CAA8CAA1CACACAA1CAA1CACACAA8CACACAA1CAA1CACACAA1CAA8FD%09CAA1CAA8CAA1CAA8CAA1CACACAA7CAA1CAA1FD05CAA8CAA1CAA8CAA1CA%CACAA1CAA1CAA1CACACAA1CAA8CAA1FD09CAA7CAA1CAA7FD09CAA8CAA89A%8CFD0593B593B593B593BB93B593B593B593B593B593B593B593BB93B593%B593B593B593B593BB93B593B593B593B593B593B593B593B593B593B593%B593B593B593BB93B593BB93B593B593B593B593B593B593B593BB93B593%BB93B593B593B593B593B593B593B593B593B593B593B593B593B593B593%B593B593B593BB93B593BBFD7F9392BCC392B593B593B593B593B593B593%B593B593B593B593B593B593B593B593B593B593B593B593B593B593B593%B593B593B593B593B593B593B593B593B593B593B593B593B593B593B593%B593B593B593B593B593B593B593B593B593B593B593B593B593B593B593%B593B593B593B593B593B593B593B593B593B593B59393A1A8998CFD7C93%FFFFCABB92B593B593BB93B593BB93B593BB93B593BB93B593BB93B593BB%93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB93B5%93BB93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB%93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB93B593BB93B5%93BB93B593B593CAFFFFFFCABC92938C938C938C938C938C938C938C938C%938C938C938C938C938C938C938C938C938C938C938C938C938C938C938C%938C938C938C938C938C938C938C938C938C938C938C938C938C938C938C%938C938C938C938C938C938C938C938C938C938C938C938C938C938C938C%938C938C938C938C938C938C939AFD07FFCAA1C3A0C39AC3A0C39AC3A0C3%9AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3%A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C3%9AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3A0C39AC3%A0C39AC3A0C39AC3A0C39AC3A0C39AC3CAFD83FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au0 O0.00296 0.992859 0.971923 0.000885 0.929412 0.109804 0.141176 Xa0 J 0 j 1 w 10 M []0 d0 XR864.5287 323.8883 m1303.0753 323.8883 1741.6222 323.8878 2180.1688 323.8958 C2184.0047 323.896 2187.841 324.0021 2191.6763 324.0782 C2192.61 324.0968 2194.0698 325.6909 2194.1314 326.6934 C2194.1898 327.6484 2194.2959 328.6026 2194.3048 329.5579 C2194.3318 332.4368 2194.3254 335.316 2194.3254 338.1952 C2194.3261 476.7136 2194.3247 615.232 2194.3322 753.7504 C2194.3325 757.2671 2194.3964 760.7847 2194.493 764.3001 C2194.5382 765.9552 2195.8547 767.1323 2197.6409 767.2044 C2199.2383 767.2691 2200.8383 767.2883 2202.4371 767.2884 C2246.2596 767.2924 2290.0824 767.293 2333.905 767.2854 C2335.5019 767.2852 2337.0998 767.2218 2338.6953 767.1438 C2340.4497 767.0581 2341.4126 765.964 2341.5003 764.0054 C2341.5431 763.0474 2341.5717 762.0881 2341.5771 761.1293 C2341.5895 758.89 2341.5853 756.6506 2341.5853 754.4113 C2341.5855 612.6945 2341.5855 470.9778 2341.5853 329.261 C2341.5853 327.3417 2341.5877 325.4222 2341.5823 323.5028 C2341.4794 286.9938 2328.6271 255.3709 2304.4356 228.3598 C2283.135 204.5765 2256.5682 189.3282 2225.686 181.4705 C2213.2175 178.2979 2200.5267 177.0076 2187.6978 176.8315 C2184.8195 176.7919 2181.9401 176.8178 2179.0614 176.8178 C1351.5483 176.8172 524.0353 176.8156 -303.4777 176.8427 C-310.5097 176.8429 -317.5647 176.9344 -324.5701 177.4811 C-378.1466 181.6608 -428.5162 214.1024 -451.934 263.8695 C-460.0646 281.1482 -464.758 299.2794 -465.1649 318.4368 C-465.1918 319.7065 -465.122 321.0064 -464.8581 322.241 c-464.7489 322.7519 -464.0504 323.4436 -463.5488 323.5091 C-461.6579 323.7562 -459.7387 323.8525 -457.8286 323.8722 C-453.3508 323.9183 -448.8723 323.8882 -444.3941 323.8882 C-8.08646 323.8883 428.2211 323.8883 864.5287 323.8883 Cf0.749721 0.679194 0.670497 0.901457 0 0 0 Xa1645.9299 634.9994 m1645.9299 725.5242 1645.9163 816.049 1645.9463 906.5738 C1645.9505 918.9041 1644.5335 917.4669 1656.4179 917.4797 C1698.9573 917.5252 1741.4969 917.5043 1784.0362 917.4824 C1786.9039 917.4809 1789.7759 917.3163 1792.6352 917.0921 C1793.0991 917.0556 1793.6368 916.3772 1793.9053 915.8708 C1794.1843 915.3448 1794.2705 914.6692 1794.2808 914.0562 C1794.3293 911.1783 1794.334 908.2993 1794.334 905.4207 C1794.3359 803.7003 1794.335 701.9799 1794.3378 600.2594 C1794.338 597.0612 1794.3396 593.8622 1794.4235 590.6658 C1794.4371 590.1466 1794.8647 589.628 1795.1372 589.1289 C1795.4659 588.5274 1796.6141 588.9105 1797.4766 589.9657 C1799.7021 592.6886 1801.9133 595.4235 1804.114 598.1666 C1847.539 652.2952 1890.9614 706.4258 1934.3871 760.554 C1935.7879 762.3 1937.1463 764.0888 1938.6671 765.7249 C1939.2669 766.3702 1940.2179 766.9053 1941.0803 767.0432 C1942.6456 767.2935 1944.2641 767.2567 1945.8606 767.257 C2000.2342 767.2655 2054.6081 767.2653 2108.9817 767.2579 C2110.2577 767.2578 2111.5346 767.107 2112.8096 767.1266 C2113.6296 767.1392 2114.0539 766.8607 2114.0818 766.0252 C2114.0912 765.7407 2114.2161 765.3596 2114.0802 765.1856 C2112.3082 762.9194 2110.5403 760.6481 2108.6933 758.4431 C2064.7445 705.9765 2020.787 653.5172 1976.828 601.0589 C1969.8448 592.7256 1962.8383 584.4118 1955.8632 576.0717 C1954.2735 574.1709 1954.3145 573.1733 1956.0145 571.0722 C1957.8247 568.8348 1959.6826 566.6361 1961.5361 564.4342 C2017.7623 497.6379 2073.9929 430.8452 2130.2128 364.0431 C2132.8863 360.8663 2135.4719 357.6156 2138.0746 354.3802 C2138.2354 354.1803 2138.233 353.8115 2138.2276 353.5228 C2138.2124 352.7232 2137.7991 352.3303 2137.0466 352.3105 C2135.1331 352.26 2133.2199 352.1507 2131.3064 352.1503 C2074.6937 352.1416 2018.0811 352.1427 1961.4684 352.146 C1959.55 352.1461 1957.6316 352.1708 1955.7135 352.2115 C1954.3602 352.2401 1953.252 352.8518 1952.4062 353.8668 C1950.1565 356.5672 1947.9312 359.2883 1945.7195 362.0202 C1897.8259 421.1749 1849.9375 480.3339 1802.0364 539.4828 C1800.2316 541.7114 1798.3189 543.8531 1796.4291 546.0114 C1796.2639 546.2001 1795.8942 546.2858 1795.6186 546.2872 C1794.8021 546.2915 1794.4617 545.8622 1794.4559 545.0925 C1794.4317 541.8969 1794.3413 538.7014 1794.3408 535.506 C1794.3333 478.2482 1794.3368 420.9905 1794.3326 363.7328 C1794.3326 360.8548 1794.3136 357.9764 1794.256 355.0991 C1794.2183 353.2126 1793.2275 352.2587 1791.2772 352.2111 C1789.0402 352.1566 1786.8013 352.1462 1784.5634 352.146 C1741.3842 352.1425 1698.2052 352.1418 1655.026 352.1476 C1652.788 352.148 1650.5496 352.1903 1648.3126 352.2534 C1647.0823 352.288 1646.1166 353.4063 1646.047 354.7948 C1645.999 355.7517 1645.9442 356.7096 1645.9381 357.6672 C1645.9219 360.226 1645.9301 362.7852 1645.9301 365.3442 C1645.9299 455.2292 1645.9299 545.1143 1645.9299 634.9994 Cf609.8709 498.4873 m609.8709 453.3864 609.8734 408.2855 609.8652 363.1847 C609.8646 360.3079 609.8004 357.4306 609.7268 354.5545 C609.6964 353.3641 608.5108 352.3112 607.153 352.2772 C604.2783 352.205 601.4022 352.15 598.5267 352.1489 C573.5797 352.1394 548.6325 352.1434 523.6856 352.1434 c507.0543 352.1434 490.4229 352.1423 473.7916 352.1442 C471.233 352.1446 468.6737 352.1269 466.1158 352.1737 C463.5359 352.2211 462.5161 353.1425 462.4753 355.4661 c462.4248 358.3439 462.4283 361.2227 462.4282 364.1011 C462.4261 453.9829 462.4264 543.8648 462.4261 633.7466 C462.4261 636.3055 462.372 638.8655 462.4302 641.4231 C462.5298 645.7994 461.3786 646.1149 457.2724 646.1057 C455.0336 646.1006 452.7947 646.1072 450.5559 646.1072 C434.5643 646.1075 418.5726 646.1021 402.5809 646.1145 C400.6641 646.116 398.7469 646.206 396.8303 646.2711 C396.2754 646.2899 395.114 647.6584 395.0844 648.3042 C395.0257 649.5789 394.8884 650.8527 394.888 652.1268 C394.8767 681.5543 394.8761 710.9818 394.8912 740.4093 C394.8919 741.6827 394.9468 742.9806 395.2095 744.2176 C395.3194 744.7354 396.0004 745.4558 396.4878 745.5123 C398.3825 745.7319 400.304 745.7857 402.2155 745.7876 C419.8064 745.8046 437.3973 745.7914 454.9882 745.8073 C456.9036 745.809 458.8283 745.8555 460.7283 746.0661 C461.2351 746.1223 461.9602 746.7971 462.0736 747.3025 C462.3501 748.535 462.4437 749.8382 462.4062 751.107 C462.1018 761.374 463.0224 771.5787 464.3825 781.7171 C467.3798 804.0571 473.7036 825.4314 484.1243 845.4776 C489.4573 855.7368 496.1753 865.0779 504.0684 873.5418 C524.8813 895.8594 549.9359 911.0756 579.6282 918.4265 C593.3089 921.8134 607.194 923.7797 621.2826 924.6542 C637.9335 925.6878 654.5468 925.228 671.1295 923.9523 C684.5122 922.9228 697.7877 920.8304 710.9711 918.2481 C712.7607 917.8975 713.8806 916.7346 713.9684 915.0863 C714.0363 913.8112 714.0672 912.5326 714.0675 911.2555 C714.0724 880.5485 714.0718 849.8416 714.0671 819.1346 C714.0669 817.8559 714.0363 816.5764 713.9832 815.2987 C713.9085 813.5013 712.7236 812.6848 710.7054 813.0475 C709.4488 813.2732 708.1953 813.5247 706.951 813.8105 C693.5297 816.8936 679.928 818.7483 666.2166 819.9067 C659.4543 820.4779 652.7393 819.9657 646.1976 818.4403 C633.7252 815.5321 624.292 808.2988 617.9669 797.1455 C613.3137 788.9408 610.9117 779.9854 610.2946 770.6571 C609.8101 763.3311 610.0286 755.9573 609.9861 748.6045 C609.9758 746.8235 611.0905 745.8893 613.0968 745.8519 C615.6543 745.8041 618.213 745.8004 620.7711 745.7998 C638.0421 745.7959 655.3132 745.7978 672.5842 745.7975 C674.8231 745.7974 677.0622 745.8194 679.3006 745.789 C683.4852 745.7321 683.9867 745.176 684.082 740.6006 C684.0954 739.961 684.0914 739.3212 684.0915 738.6814 C684.092 710.2135 684.0955 681.7456 684.0826 653.2777 C684.0819 651.6828 683.9711 650.0862 683.8639 648.4937 C683.7865 647.3413 682.5165 646.2119 681.2569 646.1868 C678.7 646.1359 676.1422 646.1115 673.5848 646.1106 C655.994 646.1045 638.4031 646.1089 620.8122 646.1058 C618.2539 646.1053 615.6951 646.1096 613.1373 646.0635 C610.8275 646.0219 609.9317 645.0197 609.8962 642.4259 C609.8569 639.5476 609.8718 636.6686 609.8718 633.7898 C609.8706 588.6889 609.8709 543.5881 609.8709 498.4873 Cf-458.6659 429.4927 m-458.6658 444.5217 -458.6724 459.5505 -458.6561 474.5795 C-458.6543 476.1736 -458.604 477.7801 -458.3733 479.3512 C-458.3252 479.6791 -457.2163 480.2323 -456.874 480.0755 C-454.268 478.8812 -451.6833 477.6218 -449.1802 476.2246 C-433.8351 467.6594 -418.2086 459.6518 -402.1166 452.5826 C-392.4599 448.3403 -382.5597 444.8139 -372.2553 442.3874 C-357.1906 438.8403 -341.9353 438.0253 -326.5415 438.4402 C-320.127 438.613 -313.7953 439.3001 -307.5181 440.5988 C-301.8483 441.7716 -296.4033 443.5771 -291.4412 446.5915 C-285.1376 450.421 -281.0563 455.8323 -279.5161 463.2016 C-278.1206 469.879 -279.6227 475.8862 -283.0358 481.5382 C-285.212 485.1417 -288.3237 487.9273 -291.6194 490.4938 C-297.1859 494.8286 -303.1791 498.5326 -309.4731 501.6579 C-320.3369 507.0525 -331.29 512.2761 -342.3105 517.343 C-351.0103 521.3428 -359.8923 524.944 -368.6502 528.8197 C-391.3509 538.8659 -411.9157 552.161 -429.8548 569.3903 C-433.0807 572.4886 -436.2462 575.6698 -439.2167 579.0109 C-455.073 596.8461 -463.7124 617.7033 -465.0149 641.5448 C-465.2588 646.0087 -465.2682 650.4936 -465.1892 654.9653 C-464.9834 666.6119 -462.2946 677.7463 -457.8908 688.4807 C-450.2163 707.1876 -438.5828 722.9923 -422.8466 735.7049 C-404.6934 750.3701 -384.1774 760.4802 -361.7584 766.7161 C-350.3608 769.8864 -338.7211 771.8098 -326.941 773.1613 C-310.0242 775.1019 -293.1084 775.0487 -276.1858 774.0313 C-259.2603 773.0137 -242.5218 770.4611 -225.9818 766.6737 c-207.2797 762.3913 -188.8583 757.2005 -171.2378 749.4937 C-165.9771 747.1928 -160.8457 744.5953 -155.6641 742.1148 C-154.3859 741.5028 -153.9086 740.3726 -153.8814 739.0184 C-153.8492 737.4203 -153.8122 735.822 -153.812 734.2237 C-153.808 705.1252 -153.8061 676.0266 -153.818 646.928 C-153.8187 645.3344 -153.934 643.7403 -154.0169 642.1475 C-154.0603 641.3146 -155.3304 640.8337 -156.2347 641.3039 C-157.3679 641.8932 -158.5185 642.455 -159.6171 643.104 C-163.4673 645.3788 -167.3264 647.6406 -171.1322 649.9882 C-192.2596 663.0205 -214.991 672.0493 -239.1937 677.4827 C-254.9279 681.0149 -270.8127 681.8603 -286.8438 680.5114 C-291.6611 680.1061 -296.2933 678.8903 -300.6768 676.8631 C-309.3279 672.8623 -314.6646 666.054 -317.393 657.0135 C-319.084 651.4106 -317.8305 646.2735 -315.1858 641.3368 C-312.8773 637.0281 -309.5886 633.4986 -305.5476 630.8383 C-301.2884 628.0344 -296.8887 625.3913 -292.3437 623.0855 C-283.5135 618.6057 -274.3378 614.8823 -265.0948 611.3309 C-248.6953 605.03 -232.5304 598.1842 -216.8466 590.2469 C-206.579 585.0507 -196.568 579.4043 -186.9912 573.0045 C-178.9991 567.6635 -171.462 561.7595 -164.5116 555.1121 C-148.0233 539.3428 -137.8423 520.2785 -134.2513 497.6867 C-130.9448 476.8849 -131.2819 456.2314 -137.2812 435.9673 C-145.5225 408.1315 -162.6132 386.8377 -186.7351 371.024 C-200.2312 362.1764 -215.072 356.3894 -230.6238 352.3908 C-243.0181 349.2043 -255.6182 347.2489 -268.3819 346.0634 C-279.2304 345.056 -290.0697 344.7137 -300.9433 344.7016 C-335.3425 344.6633 -369.1171 349.1217 -402.2002 358.6465 C-418.4622 363.3285 -434.585 368.4423 -450.5536 374.0429 C-452.3608 374.6766 -454.2032 375.2426 -455.9391 376.0372 C-457.4046 376.708 -458.6337 377.7355 -458.6345 379.6096 C-458.6355 382.1676 -458.6639 384.7258 -458.6645 387.2838 c-458.6677 401.3534 -458.666 415.4231 -458.6659 429.4927 Cf1240.8788 429.2958 m1240.8789 444.0118 1240.8644 458.7277 1240.8969 473.4437 C1240.901 475.3454 1241.078 477.2564 1241.344 479.1393 C1241.3933 479.4883 1242.4263 480.0881 1242.7139 479.9528 C1245.2927 478.7397 1247.839 477.4471 1250.3335 476.0674 C1265.4376 467.7133 1280.7661 459.8062 1296.5698 452.8505 C1307.409 448.0797 1318.4905 444.0467 1330.1634 441.7531 C1338.3308 440.1483 1346.5113 438.667 1354.853 438.585 C1362.8456 438.5065 1370.8448 438.5244 1378.8328 438.7694 C1385.5726 438.9762 1392.1368 440.4519 1398.5674 442.4583 C1402.5522 443.7017 1406.2545 445.5125 1409.7353 447.857 C1421.7083 455.9213 1423.3636 472.9052 1414.9111 483.4369 C1412.0764 486.969 1408.7743 490.0063 1405.0005 492.4247 C1399.6261 495.8689 1394.2215 499.3304 1388.5437 502.2229 C1378.3011 507.4409 1367.9045 512.3683 1357.4616 517.1771 C1349.6316 520.7828 1341.6191 523.9911 1333.7038 527.4129 C1308.8087 538.1752 1286.2797 552.5322 1267.0205 571.7459 C1262.7294 576.0267 1258.6335 580.5626 1254.9106 585.3417 C1244.4955 598.7122 1238.1482 613.8742 1235.4151 630.6306 C1234.3278 637.2975 1233.8504 643.9564 1233.8255 650.6827 C1233.7787 663.313 1236.2789 675.4449 1240.898 687.1648 C1247.8217 704.7312 1258.2903 719.8256 1272.4684 732.3195 C1287.778 745.8106 1305.314 755.5523 1324.3745 762.5314 C1339.1293 767.934 1354.4386 771.0781 1370.0597 772.9305 C1381.5299 774.2906 1393.0086 774.7346 1404.5284 774.6849 C1428.6112 774.5809 1452.3417 771.555 1475.7837 766.0899 C1493.5451 761.9493 1511.0188 756.908 1527.7683 749.6069 C1533.0323 747.3124 1538.1741 744.7356 1543.3557 742.2547 C1544.6024 741.6578 1545.1946 740.5444 1545.2567 739.1873 C1545.3296 737.5908 1545.3722 735.9914 1545.3725 734.3933 C1545.3788 705.2812 1545.3816 676.1692 1545.3643 647.0571 C1545.3633 645.4693 1545.1738 643.8819 1545.0878 642.2935 C1545.0426 641.4604 1543.709 640.8327 1542.9112 641.2999 C1537.9473 644.207 1532.9499 647.0604 1528.0471 650.068 C1509.1147 661.6816 1488.8597 670.1146 1467.3914 675.7689 C1449.9018 680.3753 1432.1828 681.9528 1414.1611 680.7001 C1409.9633 680.4083 1405.9229 679.4808 1401.9721 678.2374 C1392.0922 675.1279 1385.7401 668.1129 1382.305 658.676 C1380.1581 652.778 1380.8402 646.6506 1384.1491 641.0967 C1386.8073 636.635 1390.328 632.9038 1394.7065 630.1336 C1398.7492 627.5757 1402.9097 625.1721 1407.1689 622.9953 C1415.9939 618.4849 1425.1976 614.8271 1434.4353 611.2492 C1453.2107 603.977 1471.7152 596.0912 1489.4876 586.5737 C1499.3602 581.2867 1508.9713 575.5746 1518.0527 569.0069 C1525.5845 563.5598 1532.6444 557.5646 1539.0368 550.7943 C1552.1006 536.9577 1560.4648 520.7182 1564.2149 502.0608 C1568.5718 480.3835 1568.2199 458.8714 1562.3731 437.4804 C1557.5547 419.8509 1548.736 404.497 1536.415 391.0849 C1521.1292 374.445 1502.4172 363.2243 1481.1108 356.1005 C1465.5791 350.9076 1449.6101 347.9574 1433.3364 346.2779 C1421.2168 345.0272 1409.0913 344.6684 1396.9304 344.7014 C1362.8398 344.7934 1329.3757 349.2944 1296.6054 358.7949 C1279.7315 363.6865 1262.9628 368.896 1246.4644 374.9494 C1245.5652 375.2795 1244.6297 375.5116 1243.7382 375.8591 C1242.132 376.4851 1241.0416 377.6245 1240.9659 379.3915 C1240.8566 381.9467 1240.8827 384.5084 1240.8815 387.0674 C1240.8754 401.1435 1240.8787 415.2197 1240.8788 429.2958 Cf0.00296 0.992859 0.971923 0.000885 0.929412 0.109804 0.141176 Xa2195.5719 862.9301 m2195.5719 870.6041 2195.5658 878.2782 2195.5794 885.9522 C2195.5812 886.9074 2195.6815 887.8628 2195.7483 888.8174 C2195.8347 890.0536 2196.9708 891.2882 2198.136 891.3321 C2200.6876 891.4284 2203.2407 891.534 2205.7935 891.5416 C2214.7458 891.5683 2223.6978 891.5508 2232.6501 891.5634 C2233.607 891.5648 2234.5645 891.6462 2235.5209 891.7037 C2236.7556 891.7778 2237.9641 892.8917 2238.0074 894.0879 C2238.1119 896.9591 2238.2225 899.8318 2238.2326 902.7043 C2238.2635 911.6572 2238.23 920.6104 2238.2731 929.5632 C2238.2792 930.825 2238.4589 932.1163 2238.7874 933.332 C2238.9275 933.8497 2239.6034 934.4846 2240.1289 934.5867 C2241.683 934.8886 2243.2837 935.0834 2244.8663 935.0872 C2259.2537 935.1226 2273.641 935.1202 2288.0284 935.0914 C2289.616 935.0883 2291.2363 935.0018 2292.7775 934.6628 C2293.6174 934.4782 2294.5687 933.879 2294.6333 932.7421 C2294.7594 930.5152 2294.9187 928.2862 2294.9264 926.0574 C2294.9602 916.465 2294.9327 906.8724 2294.9594 897.28 C2294.963 896.0083 2294.9288 894.6611 2295.3315 893.4937 C2295.5808 892.7715 2296.5723 891.9212 2297.3185 891.8272 C2299.5263 891.5491 2301.7776 891.566 2304.0122 891.5605 C2313.2841 891.5374 2322.5562 891.557 2331.828 891.5374 C2333.1033 891.5348 2334.4127 891.554 2335.6411 891.275 C2336.5152 891.0764 2337.3465 890.4432 2337.4861 889.3629 C2337.6089 888.4158 2337.7748 887.4635 2337.7757 886.5134 C2337.7921 871.1654 2337.7891 855.8173 2337.776 840.4693 C2337.7753 839.5132 2337.6726 838.5559 2337.5904 837.6015 C2337.4951 836.4933 2336.2446 835.3788 2334.9689 835.3158 C2333.0564 835.2214 2331.1413 835.1283 2329.2269 835.1238 C2319.9551 835.1017 2310.6827 835.1358 2301.4114 835.0805 C2299.8423 835.0712 2298.2573 834.8077 2296.718 834.481 C2296.2202 834.3754 2295.5609 833.7463 2295.4674 833.2617 C2295.1684 831.7128 2294.97 830.1201 2294.963 828.5433 C2294.9194 818.951 2294.9522 809.3583 2294.9274 799.7659 C2294.9231 798.1752 2294.7502 796.5854 2294.6774 794.9943 C2294.6246 793.8447 2293.736 793.2882 2292.9185 792.9401 C2292.0711 792.5793 2291.0463 792.5266 2290.0988 792.5251 C2274.4327 792.5004 2258.7668 792.5031 2243.1007 792.5106 C2242.4662 792.5109 2241.8318 792.6176 2241.1973 792.676 C2239.7063 792.8137 2238.3832 794.2747 2238.3326 795.9543 C2238.2651 798.1908 2238.249 800.4296 2238.2457 802.6673 C2238.233 811.6204 2238.2551 820.5735 2238.2061 829.5262 C2238.1991 830.773 2237.9728 832.0469 2237.6379 833.2497 C2237.5014 833.7415 2236.847 834.3651 2236.3575 834.4354 c2234.1594 834.7508 2231.9374 835.0443 2229.7215 835.0636 C2221.0895 835.1389 2212.4568 835.0901 2203.8243 835.1286 C2201.916 835.1371 2200.0061 835.2846 2198.1008 835.423 C2196.9193 835.5088 2195.7881 836.7514 2195.7251 837.9959 C2195.6443 839.5911 2195.5787 841.189 2195.5747 842.7858 C2195.5585 849.5006 2195.5676 856.2153 2195.5676 862.9301 C2195.5691 862.9301 2195.5705 862.9301 2195.5719 862.9301 Cf*u1 D0.749721 0.679194 0.670497 0.901457 0 0 0 Xa1169.1213 582.0647 m1167.8821 596.1042 1165.953 609.9888 1162.8789 623.7311 c1155.7632 655.5406 1141.5092 683.7653 1120.3408 708.516 c1104.9807 726.4753 1086.9404 741.0867 1065.615 751.3673 c1034.3763 766.4269 1001.4474 774.5778 966.6614 774.6791 c953.8704 774.7164 941.1146 774.2893 928.3532 773.0721 c912.0825 771.5201 896.0325 768.866 880.2581 764.7163 c855.0375 758.0815 831.4858 747.6629 809.9167 732.8729 c785.7516 716.3028 766.4288 695.3513 752.5047 669.5397 c737.3962 641.5329 729.3686 611.4587 727.4186 579.8073 c726.3962 563.2126 726.639 546.605 728.6833 530.0152 c730.844 512.4816 734.7313 495.4119 740.7943 478.8615 c752.582 446.6834 771.1708 419.1949 797.7842 397.3659 c818.0015 380.783 840.5518 368.394 865.2467 359.8207 c892.0499 350.516 919.7756 346.3264 947.9719 345.0149 c971.6377 343.9143 995.2926 344.9025 1018.8747 347.0045 c1029.3662 347.9396 1039.8225 349.4702 1050.2241 351.1649 c1064.7419 353.5302 1078.9189 357.3682 1092.9177 361.8911 c1112.3799 368.1789 1131.5454 375.2155 1150.0281 384.0221 c1152.3335 385.1206 1154.6316 386.2375 1156.8979 387.4136 c1158.3948 388.1902 1159.3831 389.3862 1159.406 391.1789 c1159.4302 393.0972 1159.4583 395.0156 1159.4585 396.9341 c1159.4619 421.2372 1159.4797 445.5402 1159.4355 469.8433 c1159.4307 472.674 1159.9497 475.5753 1158.7699 478.3251 C1155.2958 478.9239 1152.8541 476.4044 1149.9197 475.3767 c1148.7175 474.9557 1147.5747 474.3661 1146.4015 473.8616 c1115.5193 460.5823 1083.8677 449.7556 1050.7339 443.5632 c1031.5085 439.9702 1012.1571 437.9929 992.5869 438.3701 c985.5493 438.5057 978.5732 439.0367 971.6136 440.313 c943.963 445.3835 920.5228 458.1179 901.3908 478.6617 c890.5225 490.3317 883.2817 504.0983 878.9702 519.4241 c878.7983 520.0347 878.7787 520.6868 878.6592 521.314 c878.4135 522.6016 879.3296 524.0811 880.4744 524.119 c883.3442 524.2141 886.2154 524.3246 889.0859 524.3254 c933.8506 524.3381 978.6152 524.3344 1023.3799 524.3344 c1068.1445 524.3344 1112.9092 524.3343 1157.6738 524.3345 c1159.9121 524.3345 1162.1504 524.3315 1164.3885 524.3404 c1165.3474 524.3441 1166.3074 524.3553 1167.2653 524.3977 c1168.9392 524.4717 1170.2458 525.7469 1170.2383 527.4231 c1170.1567 545.6412 1170.7285 563.8547 1169.1213 582.0647 cf0 D1032.2488 599.9089 m1032.1696 598.2303 1031.0027 597.0446 1029.2308 596.9563 c1028.2754 596.9088 1027.3188 596.8635 1026.3627 596.8571 c1024.1284 596.842 1021.8942 596.8504 1019.6599 596.8504 c997.3171 596.8502 974.9742 596.8503 952.6315 596.8503 c929.3312 596.8503 906.0309 596.8456 882.7307 596.858 c880.4994 596.8592 878.2674 596.9474 876.0373 597.0351 c875.0856 597.0726 873.6653 598.6878 873.7017 599.6875 c874.1799 612.8547 876.107 625.7542 881.6093 637.8488 c890.5982 657.6078 904.8618 671.9631 925.4358 679.5453 c933.2519 682.4259 941.3757 684.0193 949.7328 684.3713 c960.968 684.8447 972.0373 684.0801 982.8292 680.6064 c995.6772 676.471 1006.195 669.0807 1014.37 658.3527 c1022.8634 647.2067 1027.8467 634.53 1030.2456 620.8405 c1031.4548 613.9394 1032.5829 606.9821 1032.2488 599.9089 cf*U*u1 D377.9995 443.4621 m377.9991 444.7366 377.9295 446.0114 377.8783 447.2856 c377.8466 448.0791 376.561 448.9705 375.8342 448.6741 c374.0633 447.9518 372.2984 447.213 370.5454 446.4478 c364.3909 443.7613 358.1289 441.4123 351.6133 439.7073 c347.5323 438.6396 343.4285 438.3135 339.2631 438.4202 c333.2782 438.5736 328.9722 441.5063 326.2026 446.7039 c324.0775 450.6923 322.8817 455.0239 322.2803 459.4741 c321.2526 467.0803 320.3465 474.6976 320.4863 482.4096 c320.6138 489.4451 320.5129 496.4846 320.5129 503.5224 c320.5128 549.2679 320.5162 595.0135 320.5097 640.759 c320.5084 650.0392 320.1778 659.2703 318.5588 668.4685 c315.2229 687.4214 307.9841 704.5705 295.9321 719.6252 c286.0105 732.0187 273.965 741.8926 260.1777 749.6931 c250.1251 755.3804 239.5031 759.7078 228.4973 763.1711 c206.9993 769.9361 184.8557 773.0329 162.4701 774.18 c136.8839 775.491 111.3458 774.6904 85.892 771.1679 c64.6258 768.2249 43.7418 763.7983 23.2826 757.323 c-2.4494 749.179 -26.7776 738.0717 -49.2137 722.974 c-51.067 721.7269 -52.9199 720.4612 -54.64 719.043 c-55.3068 718.4932 -55.8352 717.5447 -56.0159 716.6908 c-56.2767 715.4589 -56.2032 714.1478 -56.2036 712.8704 c-56.2104 679.281 -56.2121 645.6917 -56.194 612.1022 c-56.1933 610.8375 -56.0858 609.5497 -55.8008 608.3256 c-55.7358 608.0469 -54.4565 607.6616 -54.1904 607.8797 c-51.7217 609.9039 -49.3282 612.0226 -46.958 614.1638 c-27.8865 631.3932 -7.01965 646.0331 15.6274 658.2156 c49.8542 676.627 86.3761 683.4927 124.9161 680.4367 c132.5851 679.8287 140.0341 678.0566 147.1756 675.038 c154.8481 671.7947 160.6243 666.5634 164.565 659.2534 c167.1544 654.45 169.0927 649.4017 170.5537 644.1423 c172.451 637.3127 172.9348 630.2888 173.5936 623.2919 c174.1655 617.2192 173.8214 616.6686 167.8192 613.9559 c164.0406 612.2483 160.2048 610.6321 156.2957 609.256 c147.2605 606.0753 138.1905 602.9883 129.0892 600.0018 c105.4245 592.2362 81.6688 584.7419 58.077 576.7625 c39.0121 570.3141 20.3171 562.8732 2.16541 554.1151 c-6.20441 550.0766 -14.2429 545.4946 -21.8412 540.1594 c-32.1067 532.9514 -41.2679 524.5354 -49.171 514.7715 c-56.9149 505.2041 -62.3884 494.501 -65.8114 482.6599 c-69.4994 469.9017 -70.3793 456.8995 -69.9545 443.73 c-69.4841 429.1466 -65.8066 415.3478 -59.9256 402.0588 c-55.3235 391.6594 -48.7568 382.7131 -40.3558 375.0958 c-30.2992 365.9773 -18.9113 359.0099 -6.24133 354.1365 c9.14929 348.2166 25.2464 345.7785 41.5786 344.9692 c60.4684 344.0332 79.2868 345.0099 97.9713 348.2474 c110.0001 350.3317 121.6317 353.6453 132.7508 358.6697 c147.6512 365.4027 161.746 373.535 174.8804 383.3013 c176.923 384.8201 178.9926 386.3026 181.0004 387.7659 C182.8206 386.4448 183.377 384.6138 184.1315 382.8548 c187.4376 375.1481 192.0245 368.2876 197.6655 362.0656 c203.8774 355.2139 211.4379 350.7363 220.3295 348.4387 c228.7138 346.2721 237.2412 344.9866 245.9028 344.8016 c258.3812 344.5353 270.8233 344.9166 283.2699 346.1554 c296.3586 347.4584 309.1891 349.7843 321.8104 353.4625 c335.9238 357.5756 349.8555 362.2131 363.6036 367.4101 c367.7842 368.9904 371.984 370.527 376.1078 372.2444 c376.8399 372.5493 377.5652 373.5826 377.7268 374.3928 c378.0353 375.9397 377.9951 377.5679 377.996 379.1625 c378.0093 400.5957 378.0069 422.0289 377.9995 443.4621 cf0 D171.4177 450.7734 m161.6628 443.5236 151.6042 436.739 140.8643 431.0063 c133.4272 427.0367 125.4592 424.7552 117.1185 424.0233 c98.7972 422.4156 80.5184 433.415 75.6159 451.1212 c74.4314 455.3991 73.6182 459.8985 73.4707 464.324 c72.9102 481.1457 78.1499 495.7992 90.8916 507.2382 c94.2054 510.2133 97.8887 512.8138 101.5829 515.3203 c108.9933 520.3482 116.8568 524.6258 124.8276 528.6898 c139.0583 535.9454 153.6114 542.4999 168.421 548.4835 c169.593 548.957 170.8049 549.3994 172.0402 549.6126 c172.486 549.6895 173.442 549.1092 173.5009 548.7266 c173.7424 547.1577 173.7949 545.5494 173.7969 543.9554 c173.8148 529.5657 173.8072 515.1761 173.8072 500.7863 C173.7995 500.7863 173.7918 500.7863 173.7841 500.7863 C173.7841 485.7571 173.758 470.7279 173.8138 455.6989 c173.8217 453.571 173.0131 451.959 171.4177 450.7734 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF