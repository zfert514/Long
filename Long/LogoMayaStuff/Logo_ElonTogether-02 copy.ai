%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 25.4.1%%For: (Zachary Fertig) ()%%Title: (Logo_ElonTogether-02 copy.ai)%%CreationDate: 4/21/22 2:04 PM%%Canvassize: 16383%%BoundingBox: -921 -274 1521 1113%%HiResBoundingBox: -920.7096 -273.5602 1520.6023 1112.7152%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3898 298.5 420.3898%AI3_TileBox: 9.63779 64.9449 585.6378 798.9449%AI3_DocumentPreview: None%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1842.4182 1646.5955 0.501191 2547 1303 26 0 0 6 45 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 76 8%%BeginData: 11156 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF7DA17DA8A1A27DA8A1A27DA8A1A27DA8A1A27DA8A1A2FD05FFCA%7DA17DA8A1A27DA8A1A17DA17DFD18FFA876764545204B20454B77A1FD0E%FFCA7DA17DA8A1A2A1FD11FFA1A17DA8A1A27DA87DA17DA8764B4BFD1120%4420A8FD04FF7D704B202044FD04204B764B76A8FD15FF774B204B52A1A1%A87DA14C4B20202076A2FD0BFF7D4B2020204420204BFD10FF774B4BFD05%204B4B76FD04FFA8204520454BA17DA17DA17DA17DA177762045A1FD07FF%A14B204B20457DFD18FFA84B2045A8FD09FFA14544204576FD0DFFA14B20%4B202076FD12FFA22045207DFD08FF7620452076FD0BFF7620A1FD08FF76%2020444BFD17FFCB76202076FD0DFF7644202020A8FD0CFF762020452020%52FD12FF76204BFD09FF7D45444476FD0BFFCA4577FD08FFA8204B2076FD%17FF76204576FD0FFF7D45204520A8FD0BFF77204B204B204576FD11FFA1%444BFD09FFA120452076FD0CFF4B77FD08FFA144204476FD16FF7020204B%FD11FF7D20204520A8FD0AFF76204B702045202077FD10FFA1204BFD09FF%A144204576FD0CFF774CFD08FFA820452077FD15FF76204545FD13FF7644%204520FD0AFF77207DFF4B204B20457DFD0FFFA1204BFD09FFA120452076%FD0CFFA8A8FD08FFA145202052FD14FFA82044207DFD14FFFD04204BFD09%FF522076FFA84B204520207DFD0EFFA1204BA8FD08FFA145204576FD16FF%CA204B207DFD14FF4B45204BCAFD14FFA1204B2045A1FD08FF7D2077FFFF%A84B204B2045A8FD0DFFA1444BFD09FFA120452076FD16FFA145202076FD%13FF7D4420204BFD15FFA84B20452070FD08FF762076FFFFFFA845204520%45A2FD0CFFA1204BFD09FF7D45204476FD0AFFA8A1FD0AFFA8204B2077FD%13FF76204B20A1FD16FF7644204B44FD08FF772077FD04FFA145204B204B%A8FD0BFF7D444BFD09FFA120452076FD0AFF4B76FD0AFFA120202076FD13%FF20442045A8FD16FFA2204420207DFD07FF762052FD05FF7D2020452045%A8FD0AFFA1204BFD09FF7D45204476FD0AFF4B76FD0AFFA8204B2077FD12%FFA845204B45FD17FFA84B204B207DFD07FF77207DFD06FF7D45204B204B%CBFD09FF7D444BFD09FFA120452076FD04FFA8FFFFFFA877207DFD0AFFA1%44202076FD12FFA12045204BFD18FF4544204452FD07FF762076FD07FF76%202045204BA8FD08FFA1204BFD09FFA144204B44FD094B20447DFD0AFFA8%20452077FD12FF764420454BFD18FF7020452076FD07FF772077FD08FF76%44204B2070FD08FFA1204BFD09FFA12045204B204B204B204B204B202020%7DFD0AFFA145202052FD12FF762045204BA8FD17FF4B2020204BFD07FF52%2076FD09FF522020452076FD07FFA1204BA8FD08FFA145204576FD09FF76%207DFD0AFFCA204B207DFD12FF764544454BFD18FF76204B207DFD07FF7D%2077FD0AFF7644204B2076FD06FFA1444BFD09FFA120452076FD0AFF207D%FD0AFFA145202076FD12FF7620452045A8FD17FF4B44202076FD07FF7620%76FD0BFF4B2020452076FD05FFA1204BFD09FF7D45204476FD0AFF4B76FD%0AFFA8204B2077FD12FF7D44204B20A8FD17FF4B204B20A8FD07FF772077%FD0CFF4B20204B2077FD04FF7D444BFD09FFA120452076FD0AFF7DA2FD0A%FFA120202076FD12FFA82044202076FD17FF20442045A8FD07FF762052FD%0DFF4B2020452077FFFFFFA1204BFD09FF7D45204476FD16FFA8204B2077%FD13FF4B204B2076FD16FFA84520454CFD08FF77207DFD0EFF4B45444520%A1FFFF7D444BFD09FFA120452076FD16FFA144202076FD13FF7620204520%A8FD15FF7D204520A8FFFFA8FD05FF762076FD0FFF2044204420A1FFA120%4BFD09FFA144204576FD16FFA820452077FD13FFCA2045204576FD15FF4B%45204CFFFFFFA0A1FD04FF772077FD0FFFCA2045204520A8A2204BFD09FF%A120452076FD0EFF52A1FD06FFA145202052FD0EFFA17DFD04FF76204520%44A8FD13FF7D202020A1FFFFA775A0CFFFFFFF522076FD10FFA820442020%2076204BA8FD08FFA145204576FD0EFF4BA1FD06FFCA204B207DFD0DFFCA%20CAFD05FF4B204B204CFD13FF70204576FFFFCF7CA0A0FD04FF7D2077FD%11FFCA2045204B20454BFD09FFA220452076FD0DFFA120A8FD06FFA14520%2076FD0DFF4576FD06FFA84520452076FD11FF7D20204BFFFFFF7BA07BA1%FD04FF762076FD12FFA220442045204BFD09FF7D44204476FFFFCFA7FD09%FF4B45A8FD06FFA8204B2076FD0CFF4C45A8FD07FFA84B204B2076FD0BFF%A7CFFFFFA820444BFFFFFFA1A07CA0A7FD04FF772076FD13FFA820452045%4BFD09FF762045204BA8FF7C7CCFFD07FF522020FD07FF7D2020444BFD0B%FF4C2052FD09FFA84B2045204CA8FD08FFA775CFFFA120204BFFFFFFA77C%7B7C75CFFD04FF4B2045FD14FFA12044204BFD08FFA8204B444B20707CA0%7CA17DA177A17D7D4B45204CFD07FF76204B44454CA17DA177A17DA17DA1%4B4420FD0CFF7D2044204B7DFD06FFCF7CA0A177204B7DFD04FFA77CA07B%A7FD04FFA14520457DFD14FF7D20454BFD04FF4C764B4B20202044202020%7C7C7CFD0A204BFFFFFF77704B4B20202044FD0D2077FD0DFFCB764B2020%204C76A8A8A87CA07C4B207DA8FD04FFA775A07C7CA8FF7D4BFD07204B4B%A8FD11FF77204BFD04FFA17DA17DA2A1A17DA27D7C7CA07CA17DA2A1A17D%A2A1A17DA8FFFFFFA877A17DA2A1A17DA2A1A17DA2A1A17DA2A1A17DA2FD%11FFA87670454B20454BA07CA0A1FD07FF7CA07CA0A7FFFFCA77A17DA2A1%A17DA17DA1A8FD12FF7D76FD0DFFCF7B7C75A7FD38FFA8A87DFD047CFD07%FF7CA07C7C7CFD30FFA0A07CA0A7CFFD39FFCA7CA07CA7A8FD05FFA7A07C%A07BCFFD1BFFCA7CCAFD0DFF7CA7A1A77CA07CA07BA075A1CAFD32FFA77C%A7A0A07BA07CA07BA07CCFFFFFCFA07BA07BA7FD1BFFA775A0A1FD0DFFA7%75A07CA07CA07CA07CA07CCFFD32FFA77C75A07CA07CA07CA07CA0A7FFFF%A77CA07CA0CFFD1AFFCA7BA07BA8FD0EFFA8A1A07B7C75A7A8FFA8FD05FF%A8A8A7CAFD0EFFCFCFA7A7A7FFFFFFA1FD0AFFA87CA7A1FD07FFA8A77CA0%7C7C7CCFA8FFA8FFFFCF75A07C7CA7FFA8A8A7FD0BFFA8A7A0A7A7FD06FF%CF75A07C7CA7FFFFFFA8A7A8FD0AFF7CA07CA0CFFD07FFA7A07CA07CA7FD%0CFFA8A77CA07BA0A7FFA7A0A7FD07FFA8A77BA07CA07CCFFD07FFA77CA0%7BCFFD06FFA0A07CA0A0FFA7A07BA0A7FD09FFA7A07CA07BA0A7FD05FFA7%A07CA07CFFFFFFA8A77BA7FD09FFA0A07C7CA1FD06FFCF7CA07CA07BA075%A7FD0AFFA17C7BA07B7C7BA0A8A075A0FD06FFA7A07BA07BA0A0A075CFFD%05FFA875A07BA0FD06FFA87C7BA07CA77C7C7BA07BA0A7FD07FF7C7C7BA0%7BA07CA0A0FD04FFA07BA07BA7CFCFA07C7BA07BA8FD07FFCAA07CA07CFD%07FF7CA07CA07CA07CA77BA7FD08FF7CA07CA07BA7CAA87CA77CA07CFD05%FFA7A07CA07CA0A8FFA7A07CFD05FFA0A07CA0A8FD06FFA77CA07CA67CA0%A1CF7CA07BA7FD06FF7CA07CA07CCAFFFF7CA0A7FFFFFF7CA07CA0A0A17B%A07CA07CA0A7FD07FFA77B7C75A8FD06FF7BA07C7C7CA075A7A8A075A8FD%06FF7C7C7BA07BA7FFFFA87C75A07BA1FD04FFA77C7B7C75A7CAFFFFA775%7CA7FFFFFFA7FD047CFD06FFA875A07C7C75A0A7FFA8A07B7CA1FD05FF7C%7C7BA07BA8FFFFA87C75A1FFFFFFA77B7C757C757C7CA77B7C75A7FD07FF%7CA07CA7FD06FFA0A07CA07CFFA0A0A7FF7CA0A0FD05FFA0A07CA07CCFFF%FFFFCF7BA07CA0A7FFFFFFCAA07CA07BA7FD04FF7CA07BCFFFFFFFA77CA0%7CFD07FF7CA07CA07BA7CFFFFFA77CA07BCFFD04FFA7A07CA07CCFFFFFFF%A77BA0A0FD04FFA77BA7A1A7A8FFA0A07CA0A7FD06FF7CA07C7CA7FD05FF%A77C7BA07CCFFFA775A7A8A07BA0CFFFFFFFA0A07CA075CAFD04FFA17C7B%A07CFD04FFA075A07BA0A8FFFFFFA1A07C7CA8FFFFA875A07BA7FD06FFA7%7C7BA07BA1CFFFFFA775A07BA0FD04FFA8A07CA075A8FD04FF7BA075A7FD%04FF7C7CA8FFFFFF7CA07C7C7CFD06FFCAA07CA0A0FD05FFCFA07CA07BCF%FFFFCAA07CA87CA0A0FFFFFFA8A07CA07CA8FD05FFA77CA07BA7FFFFFFCF%7BA07CA0A8FFFFFFCAA07CA07CFFFFFFA0A07CA0CFFD05FFCAA07CA07BA7%FD04FF7CA07CA0A8FD04FFA77BA07CA7FD04FFA0A07CA0A8FFFFFFA7A0A7%FFFFFFA7A07CA0A0FD07FFA77B7C75CFFD05FFA775A07BA7FD04FFA8A07B%7C75A1A8FFA8A07B7C75A7FD05FFA875A07B7CA8FFFFFF7CA07C7C7CFFFF%FFA8A07B7C75A7FFFFA77C7C7CA1FD06FFA775A07BA0A8FFFFFFFD057CFD%04FFA8757C7BA0A8FFFFFFA77C7BA07CFFFFFFCAA075FFFFFFA8A07B7C7B%FD08FF7CA07BA7FD06FF7CA07CA0CFFD05FFCAA07CA07CA7FFA77CA07CA7%FD06FFA0A07CA0A7FFFFFFA8A07CA07CFD04FFA77CA07CA6FFFFFFA77CA0%7CFD07FF7CA07CA0CAFFFFFFA8A07CA07CFD05FFA0A07CA0A7FFFFFFA8A0%7CA07CCFFFFFFFA87BA7FFFFFFA77CA07BCFFD07FFA1A07C7CA8FD05FFA8%7C7BA0A1FD07FF7C7C75A7FFCF75A07C7CA7FD05FFA87C7BA07CFD04FFA7%75A07BA7FFFFA8A775A07B7CA8FFFFCF75A07BA7FD06FFA17C7BA0A7FD04%FFA775A07BA7FD04FFA8A07CA07BCAFFFFA1A07CA075A7FD04FF7BA0A8FF%FFA775A07BA7FD08FFA07CA0A0FD06FFA77CA07CFD07FFA7A07CA0A8FFA1%A07CA0A0FD06FFA77CA07BA7FD04FF7CA07CA07CA1A0A07CA07BA0A8FFFF%FFA7A07CA0CFFD05FFA8A07CA07CFD05FF7CA07CA0CFFD04FFA87BA07CA0%7CA77CA07CA07BA7FD04FFA0A0A7FFFFFF7CA07CA0FD08FFCA7B7C75CAFD%06FF7CA07BA0FD06FFCFA075A07CFFA8A07B7C75CFFD05FFA875A07B7CA8%FFFFFFA8A07B7C7CCA7C7B75A07BA0A8FFFFFFA8A07B7CA1FD06FFA775A0%7BCAFD04FFFD047CA1FD05FFA07C7BA0A7A8757C7B7C7CA8FD04FFA77B7C%FFFFFFA77C7C7CA7FD05FFA8CAFFA7A07CA7FD07FFA77CA0A7FD06FFCA7B%A07CCAFFCF7CA07CA7FD06FF7CA07CA0A1FD04FFCF7CA07BC9FFFFA8CAA7%CFFD05FFCF7CA07CFD07FF7CA07CA7FD04FFCFA67CA07CFD06FFA77CA07C%FFFFFFA8CFA8FD05FFCFA07CFD04FFA77CA07CFD06FFA77CFFA77B7CA1FD%07FF7BA07BCAFD06FF7C7C7BA0CFFFA1A07C7CA7FD05FFA17C7BA07BCFFD%04FF7CA07C7CA7FD0AFFCF7CA07BA0FD06FFA77C7BA0A8FD04FFA875A07B%A7FD05FFCF7BA07BA0FD0BFFA775A8FD04FF7CA07BA7FD06FF7BA1FF7CA0%7CCFFD06FFA7A07CA0CFFD05FFA1A07CA0A7FFFFA77BA07CFD05FFA8A07C%A07BA7FD04FFA0A07CA07CCAFD0AFFA0A07CA0A7FD06FFA77CA0A1FD05FF%A7A07CA0CAFD05FF7CA07CA07CFD0AFFA775A7FD04FFCAA07CA0CAFD05FF%A1A0A7FFA075A0A8FD05FFA77C7B7C7CFD05FFA77C7BA07CFFFFFFA07C75%A1FD04FFA8A075A07B7CA8FFFFFF7C7C7CA07B7CA7FD09FF7C7C7B7C75A8%FD05FFCF75A07BCFFD05FFA77B7C7CFD05FFA17C75A07BA0A8FD08FFA775%A1FD05FFCF7B7C7CFD05FFA87C75CFFFA0A07CFD05FFA8A07CA77CA6FD04%FFCAA07CA07CFD04FFA77BA0A7FD04FFA77BA07CA0A0FFFFFF7CA07CFFA0%A07CA7FD08FFA0A0A0A77CA0A7FD05FFA0A07CA7FD06FFA0A07BA7FD04FF%A8A07CC97CA07CFD08FFA77BA7FD06FFCFA07CA7FD05FFA77BA7FFFFA875%A0A8FFFFFFA8A075A8FFA075CFFFFFA7A07B7C75CAFD04FFA77C7BA7FFFF%A8A77BA07BA07BCAFFCA7C7B7CCFFFA875A07CFD06FFCF7C7B7CFFCA7C75%A7FD04FFA07C7BA0A8FD06FFA77B7C7CFFFFFFA7A07BA8FFA77B7CA0FD05%FFA8A075A7FD08FF7C7C7BFFFFFFA8A775A0A8FFFFFFA77BA7CAFFA7A07B%CAFFFFCAA07CA7A0A07BA07CCAFD06FF7CA07CA7A7A07BA77CA07BA7CFA7%7BA0A0FD04FFA77BA0A0CFCFFFA8A775A0A7FFFFFFA7A07BCAFFCA7CFD04%A0FD07FFA8A07CA0A7FFA7A07BCFFFFFCAA77BA0A1FFCACAA0A07CCAFD09%FFCF7BA0A0FFA8A075A7CFFD04FFA8A0757C757C7CCFFD04FFA8A0757C75%7C7CCFFD07FFCF7C7C757C7CCFA7A07B7C7CA075A0A7FD06FFA77C7C757C%757C7CA7A8FD05FFA17C757C75A0A7FF7CA8FD08FFA1A0757B757C7CCFFD%04FFA8A77C7C757C7BA0A1FD0CFFA87C7C757C7BA7A8FD07FFCFA7CAA8FD%09FFA7CAA8FD0BFFA8CFCAFFFFA77CA07CA07CCAFD0AFFA8CAA7CFA8FD09%FFA8CFA7CFFD0EFFCFCAA7CFCAFD09FFA8CFA8FD11FFA8CAA8FD28FFA8A7%7BA07BA0A7FD78FFA1A07CA07CA0CAFD76FFA8A77B7B7CA07C7C7CFD76FF%A8A77BA0A7CA7CA07BCFFD75FFA87C75A0A8FF7CA07BA0CFFD74FFA8A07C%A0A8FFA8A07CA0A7FD74FFA87C757CA7FFCFA07B7C7BFD75FFA77BA0A7FF%FFCF7CA07BA7FD74FFCF7B7C7CFFFFFF7CA07C7CA8FD74FFA1A07CCAFFFF%A7A07CA0A7FD74FFA8A075A0FFFFA8A07B7C7BFD75FFCF7CA0A7FFFFA77C%A07BCAFD75FFA87C7BCFFFA875A07BA0A8FD76FF7CA0FFFF7CA07CA0A8FD%76FFA8A07BA77CA07C7CA1FD78FFA7A07BA07CA0A0FD7AFFA07C75A0A1FD%7CFFA7A7A8FDE1FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auu*u0 O0.297215 0.351202 0.7785 0.031617 0.709804 0.603922 0.341176 Xa0 J 0 j 1 w 10 M []0 d0 XR552.8996 549.7593 m552.3341 548.4475 551.601 547.1814 551.2294 545.8169 C548.0714 534.2189 543.8305 523.0221 538.8966 512.0756 C538.5687 511.348 538.2637 510.6057 538.0185 509.8473 C537.9294 509.5714 538.0463 509.2288 538.0836 508.7198 C542.006 508.41 545.9627 508.1143 549.9163 507.782 C559.1105 507.0093 567.8345 504.6382 575.9143 500.09 C585.3993 494.7508 592.3748 487.0281 597.4348 477.4772 C598.654 475.1757 599.3295 472.7707 599.3249 470.1319 C599.3197 467.08 597.97 464.9372 595.3293 463.563 C593.029 462.3659 590.564 461.6609 587.9681 461.6568 C584.7712 461.6517 581.5622 461.6388 578.3792 461.8915 C567.6756 462.741 556.9857 462.7209 546.2804 461.9029 C541.3418 461.5254 536.3829 461.4654 531.465 460.754 C525.7747 459.9309 520.0669 459.2279 514.3679 458.4641 C511.6959 458.1061 509.8636 456.8697 508.4285 454.3633 C491.983 425.6416 475.284 397.0649 458.9112 368.3022 C446.2553 346.0694 434.0107 323.6055 422.077 300.9714 C411.7089 281.3068 401.7015 261.4636 392.0604 241.4376 C385.7518 228.3333 379.4747 215.2 374.7285 201.4133 C370.5061 189.1477 367.2785 176.6556 365.4954 163.7707 C364.7686 158.5189 364.3907 153.2446 364.3159 148.0065 C364.1226 134.4653 365.6723 121.1814 372.5254 109.0737 C375.7371 103.3993 379.9558 98.6971 385.6118 95.3471 C389.9505 92.7775 394.5978 91.2889 399.6423 90.894 C408.2991 90.2168 416.4901 91.8894 424.3861 95.3818 C433.8296 99.5589 442.2861 105.2756 450.1893 111.8435 C463.045 122.5272 474.1621 134.8746 484.5274 147.9344 C485.6418 149.3383 486.391 150.8489 486.8417 152.6037 C492.3554 174.0723 501.1408 194.2932 510.4455 214.3165 C520.8937 236.8003 532.1912 258.8597 543.7651 280.7761 C556.0849 304.105 568.7576 327.2433 581.6232 350.2779 C597.062 377.9191 612.7703 405.4058 628.8511 432.6751 C644.1194 458.567 659.5667 484.3557 675.1846 510.0383 C697.2026 546.2451 719.7768 582.1057 743.1606 617.4508 C759.575 642.2617 776.2498 666.892 794.2366 690.6048 C797.2328 694.5548 800.3181 698.4375 803.3837 702.3344 C805.2909 704.7586 807.6081 706.7036 810.4214 707.9981 C814.3659 709.813 817.843 709.2385 821.028 706.2688 C822.8116 704.6056 824.0557 702.5625 825.0276 700.3462 C828.7228 691.9179 830.744 683.0948 831.4315 673.9255 C831.9952 666.4069 831.8788 658.8871 831.0515 651.4274 C829.8696 640.7697 827.5077 630.3276 824.2353 620.0987 C818.7066 602.8163 811.195 586.4233 802.0743 570.7632 C789.1141 548.5109 775.1568 526.8742 761.2573 505.2068 C737.1687 467.656 712.9477 430.1902 688.7965 392.6796 C687.9709 391.3974 686.7607 390.2753 686.7165 388.0465 C688.598 389.7705 690.1901 391.2212 691.7735 392.6814 C707.4497 407.1365 724.1459 420.274 742.2272 431.6077 C752.2702 437.9027 762.6396 443.5749 773.798 447.6909 C778.9096 449.5764 784.1258 451.1222 789.5247 451.8547 C799.1396 453.1591 807.9059 450.6762 816.0216 445.547 C822.3329 441.5581 827.5706 436.4266 831.8332 430.3449 C838.1682 421.3062 842.223 411.3287 843.9143 400.3759 C846.3573 384.5542 843.8973 369.4876 837.1274 355.0828 C831.4097 342.9169 824.8111 331.2102 818.1013 319.5757 C804.0427 295.1987 789.7569 270.9523 775.7851 246.526 C766.4175 230.149 757.5135 213.5135 749.5444 196.3932 C742.362 180.9628 736.8229 165.0064 733.7888 148.2281 C732.244 139.6847 731.8192 131.0612 732.5929 122.4282 C733.109 116.6704 734.572 111.0945 737.4079 105.9724 C741.9472 97.7739 748.8261 93.2893 758.253 92.7351 C765.76 92.2939 772.8456 93.7187 779.6863 96.8449 C790.5914 101.8283 799.9811 108.9618 808.7288 117.0043 C819.2341 126.6627 828.6798 137.3016 837.4363 148.5602 C851.2126 166.273 863.3379 185.0643 874.2042 204.6844 C875.5474 207.1096 876.2464 209.5802 876.4559 212.3843 C877.3746 224.6794 879.6211 236.7638 882.6884 248.7032 C888.8537 272.7022 898.5167 295.2645 910.464 316.9143 C918.976 332.3389 928.3433 347.2078 938.855 361.346 C956.1249 384.574 975.7637 405.5136 998.8711 423.0623 C1010.7531 432.0859 1023.394 439.8627 1037.0366 445.9774 C1047.1586 450.5142 1057.643 453.9274 1068.6128 455.4957 C1078.4788 456.9063 1088.3638 456.817 1098.0738 453.97 C1101.9361 452.8375 1105.5906 451.2763 1109.1073 449.3494 C1130.4325 437.6647 1148.6164 422.2946 1163.6632 403.1703 C1168.2467 397.3446 1170.8923 390.8064 1172.1133 383.5919 C1174.1181 371.7449 1173.1088 360.01 1170.6802 348.3531 C1166.4574 328.0846 1158.2778 309.4052 1147.4526 291.8662 C1137.4921 275.7285 1125.6784 261.0561 1111.744 248.1403 C1100.5127 237.7299 1088.07 229.1151 1074.0067 222.9655 C1063.5323 218.3852 1052.6244 215.5772 1041.1662 214.7087 C1019.3585 213.0557 999.4093 218.8295 980.5463 229.2678 C974.0966 232.8369 968.0259 236.9848 962.1339 241.4018 C961.6221 241.7857 961.1328 242.2004 960.6126 242.5722 C958.953 243.7584 958.5497 243.6673 957.9115 241.8465 C954.8952 233.2427 952.4075 224.4862 950.3311 215.6091 C948.2544 206.7302 946.6014 197.7542 945.8695 188.6849 C944.9691 177.5295 944.7773 166.3389 946.1854 155.1651 C947.1494 147.515 948.7627 140.0415 951.4074 132.8124 C954.7948 123.5528 959.5155 115.0661 966.6502 108.1214 C975.582 99.4278 986.2207 94.5962 998.7444 93.728 C1016.8158 92.4751 1034.0332 96.0099 1050.773 102.4692 C1065.7856 108.2618 1079.6007 116.2551 1092.6659 125.5776 C1111.1003 138.7312 1127.6441 153.9987 1143.0102 170.5978 C1171.9405 201.849 1196.2464 236.4752 1218.0035 272.9758 C1229.6374 292.4934 1240.3853 312.4872 1250.2134 332.9707 C1254.0164 340.8971 1257.6018 348.928 1261.2839 356.9123 C1261.485 357.3479 1261.6777 357.7883 1261.8518 358.235 C1262.5502 360.0258 1262.4166 360.5042 1260.8696 361.3576 C1259.8905 361.8977 1258.8582 362.3402 1257.8692 362.8633 C1243.2011 370.6212 1236.166 383.0608 1235.5305 399.3908 C1235.178 408.4511 1236.9781 417.2013 1239.6131 425.7958 C1243.1959 437.4826 1248.5012 448.4077 1254.8268 458.8237 C1263.7514 473.5192 1274.2458 487.0009 1286.7731 498.8243 C1293.7711 505.429 1301.2139 511.4641 1309.8962 515.7985 C1313.6393 517.6671 1317.4899 519.2299 1321.6853 519.6332 C1327.8738 520.2282 1332.989 518.341 1336.6084 513.0055 C1339.3023 509.0345 1340.4262 504.5198 1340.853 499.9112 C1341.5314 492.5808 1341.4147 485.2218 1340.4956 477.8884 C1337.8772 456.9989 1331.9738 436.9411 1325.1603 417.1143 C1323.5503 412.4292 1321.7872 407.7969 1320.1311 403.1274 C1319.6272 401.7069 1320.2595 400.844 1321.7005 401.1412 C1326.7049 402.1731 1331.7282 403.1561 1336.6681 404.4482 C1353.7311 408.9114 1370.2075 414.9942 1385.9996 422.8637 C1397.8979 428.7925 1409.2804 435.5975 1420.1417 443.2743 C1423.1433 445.3957 1426.2281 447.4042 1429.3326 449.3737 C1432.0436 451.0934 1434.9627 452.3512 1438.0882 453.1916 C1441.8761 454.21 1445.0977 453.318 1447.7182 450.533 C1450.0161 448.0909 1452.207 445.5325 1454.2754 442.8925 C1463.5422 431.0658 1470.6168 418.0903 1474.6585 403.5481 C1476.7735 395.9375 1477.8002 388.1899 1477.1764 380.3082 C1476.2774 368.9506 1472.1007 358.8899 1464.4543 350.4082 C1451.2762 335.7904 1438.5122 320.8256 1426.3242 305.3737 C1408.2776 282.4945 1391.4099 258.7957 1376.8863 233.4973 C1368.8349 219.4723 1361.6469 205.0171 1356.313 189.7146 C1351.8275 176.8463 1348.7593 163.6704 1347.4772 150.0517 C1346.7669 142.5112 1346.7816 135.0475 1347.8055 127.5826 C1348.8341 120.0817 1350.8692 112.8747 1354.9343 106.3837 C1358.0599 101.3928 1362.1404 97.4369 1367.5877 95.01 C1370.388 93.7624 1373.2886 93.0371 1376.3656 92.788 C1386.4559 91.971 1395.6732 94.6788 1404.4073 99.4705 C1412.7336 104.0385 1420.1933 109.7827 1427.1058 116.2615 C1436.3538 124.9296 1444.6042 134.4859 1452.188 144.6228 C1462.4567 158.3479 1471.5142 172.8447 1479.7355 187.8802 C1486.0309 199.3934 1491.7829 211.165 1496.9735 223.2134 C1497.8744 225.3046 1499.1223 227.1408 1500.8096 228.6624 C1504.0064 231.5453 1507.7666 231.1327 1510.2829 227.6191 C1511.1254 226.4423 1511.6808 225.1262 1512.101 223.7296 C1513.3004 219.7402 1514.1302 215.6717 1514.7049 211.5566 C1516.9296 195.6268 1514.3883 180.3882 1508.1707 165.6295 C1501.6756 150.2116 1493.5145 135.7884 1483.0464 122.7176 C1466.8063 102.4395 1447.3639 86.1562 1423.6376 75.2138 C1405.8279 67.0003 1387.1915 63.3651 1367.6388 65.3097 C1349.5986 67.1039 1333.0387 72.8861 1318.8859 84.6115 C1308.4336 93.2712 1300.9784 104.1093 1295.8449 116.5913 C1292.2372 125.3633 1290.1407 134.506 1288.9472 143.9237 C1287.7325 153.5078 1287.7159 163.1078 1288.5256 172.653 C1289.7997 187.6689 1293.1257 202.3105 1298.0989 216.5624 C1303.6469 232.4612 1310.7907 247.6336 1318.9305 262.3458 C1335.9435 293.0966 1356.4705 321.4366 1378.4385 348.779 C1389.0595 361.9983 1400.0722 374.8866 1411.3397 387.5586 C1411.6544 387.9125 1411.9155 388.3136 1412.2058 388.6983 C1411.5708 389.546 1411.1466 388.7464 1410.7004 388.5394 C1410.1234 388.2718 1409.5919 387.904 1409.0477 387.5685 C1393.7293 378.1261 1377.4985 370.6683 1360.356 365.1979 C1345.5405 360.4699 1330.4119 357.2884 1314.9151 355.8103 C1310.9337 355.4304 1306.9623 354.9366 1302.9661 354.9847 C1300.9195 355.0093 1299.7581 354.2442 1298.88 352.4188 C1295.3445 345.0713 1291.743 337.7546 1288.0798 330.4699 C1269.4507 293.4232 1248.8136 257.5495 1225.2752 223.383 C1206.6374 196.33 1186.2864 170.6582 1163.1694 147.2656 C1144.6717 128.5472 1124.6587 111.6611 1102.2347 97.7577 C1081.8263 85.1042 1060.1215 75.5573 1036.5672 70.5052 C1027.0223 68.458 1017.3761 67.0931 1007.5882 66.9705 C998.6316 66.8585 989.6887 66.8633 980.7723 68.0305 C953.4738 71.604 929.3097 81.7734 909.8023 101.693 C898.2023 113.5379 890.0849 127.5734 884.2779 143.0287 C883.7008 144.5648 883.886 146.5497 882.0749 147.501 C880.3849 146.6573 879.8 144.893 878.8364 143.4813 C863.5018 121.0162 844.6983 102.0603 821.8712 87.1955 C807.4237 77.7874 791.9664 70.6378 775.087 66.7707 C767.901 65.1245 760.648 64.1363 753.2544 64.0301 C742.3401 63.8735 731.5201 64.5399 720.8892 67.152 C711.6576 69.4201 702.9267 72.8907 695.0753 78.3524 C682.3111 87.2314 674.3583 99.473 670.2527 114.3026 C668.2432 121.5609 667.2577 128.9854 667.0211 136.5426 C666.3826 156.9397 670.3377 176.5928 676.2805 195.9481 C681.4047 212.6369 687.9955 228.7481 695.3272 244.5775 C704.881 265.2043 715.7451 285.1344 727.3082 304.6819 C739.5189 325.3242 751.9973 345.8078 764.276 366.41 C768.9404 374.2363 773.5409 382.1155 777.1252 390.5184 C778.1874 393.0089 778.941 395.6305 779.8507 398.1869 C780.29 399.421 780.3954 400.6909 780.2372 401.972 C779.9791 404.0605 778.5922 405.5171 776.5243 405.7706 C774.7666 405.9862 773.0441 405.741 771.309 405.2874 C763.9779 403.3708 757.2089 400.1473 750.6043 396.5345 C729.7458 385.1244 710.7493 371.0484 692.5402 355.8589 C678.6421 344.2655 665.6023 331.7547 653.1599 318.6214 C634.5062 298.932 618.0224 277.583 603.9102 254.397 C583.2797 220.5019 564.0165 185.8571 546.6024 150.1996 C535.095 126.6368 524.2241 102.7811 514.3052 78.4994 C513.3984 76.2793 512.4335 74.0854 510.9045 72.1871 C507.3087 67.7224 502.7514 67.3222 498.4572 71.1743 C497.5083 72.0254 496.6335 72.9752 495.8192 73.958 C490.7647 80.0581 486.8644 86.7919 484.6607 94.4494 C484.3078 95.6751 483.9169 96.892 483.4835 98.0912 C483.291 98.6241 482.7074 98.7513 482.3093 98.4932 C480.9726 97.6265 479.6783 96.691 478.3999 95.7386 C470.1794 89.6139 461.6278 84.0177 452.512 79.298 C439.0502 72.3283 424.9089 67.2679 409.8311 65.5724 C391.8932 63.5555 374.4111 65.2725 358.0208 73.7686 C343.8827 81.0973 332.7191 91.554 324.2768 104.9841 C317.0363 116.5025 312.4914 129.0546 310.0365 142.4001 C309.7507 143.9541 309.3744 145.4916 309.0469 147.0048 C307.6974 146.9329 307.2295 146.0024 306.6144 145.3066 C283.2698 118.8945 255.4253 98.5997 223.2455 84.2935 C204.4673 75.9453 184.8978 70.1912 164.5867 66.8586 C150.3226 64.5182 136.0125 63.3172 121.6003 64.337 C96.5006 66.1132 73.3095 73.3974 53.1353 88.957 C38.1137 100.5425 27.1512 115.2872 19.4119 132.5048 C16.5901 138.7823 14.3402 145.2755 12.535 151.9213 C12.1734 153.2529 11.6983 154.5538 11.2888 155.8273 C9.93436 155.6168 9.53854 154.6432 8.99291 153.9045 C-6.2744 133.2411 -24.9725 116.1403 -45.7469 101.2038 C-67.3829 85.6478 -90.6467 72.9442 -114.8149 61.8155 C-131.0894 54.3218 -147.6811 47.6143 -164.4868 41.421 C-165.087 41.1999 -165.6691 40.9117 -166.2852 40.7545 C-168.0092 40.3147 -168.8251 39.1171 -169.4756 37.5344 C-173.7898 27.0374 -178.0976 16.5363 -182.5675 6.1051 C-189.8708 -10.938 -197.208 -27.9677 -204.6921 -44.9321 C-214.5669 -67.3161 -224.9826 -89.4517 -236.1382 -111.2275 C-249.7791 -137.8549 -264.2729 -163.9995 -281.0464 -188.8169 C-291.4484 -204.2074 -302.5558 -219.0527 -315.3267 -232.5883 C-325.3452 -243.2068 -336.0295 -253.0564 -348.4417 -260.8745 C-356.0485 -265.6656 -363.9816 -269.7266 -372.7356 -272.0685 C-386.7461 -275.8167 -398.9581 -272.3997 -409.6671 -262.9624 C-413.2722 -259.7855 -416.4565 -256.198 -419.362 -252.3517 C-424.86 -245.0733 -430.2354 -237.7366 -434.4599 -229.5999 C-441.0121 -216.9798 -445.2082 -203.6299 -447.107 -189.5709 C-449.3645 -172.8557 -448.0249 -156.3528 -443.1502 -140.2377 C-439.2141 -127.2258 -434.4568 -114.494 -428.2823 -102.3357 C-419.6196 -85.2778 -408.9293 -69.5992 -396.3867 -55.1641 C-375.6424 -31.2896 -351.2749 -11.734 -324.6154 5.08901 C-300.4756 20.3218 -275.0175 32.9688 -248.6052 43.7362 C-245.4963 45.0034 -242.4458 46.4489 -239.2621 47.4857 C-236.8885 48.2588 -235.5793 49.6914 -234.6574 51.9181 C-231.1723 60.3359 -227.5224 68.6853 -224.0181 77.0954 C-219.7148 87.423 -215.4874 97.7824 -211.2506 108.1375 C-210.7151 109.4467 -209.8059 110.6885 -210.2376 112.246 C-210.1147 112.2644 -209.977 112.2553 -209.8751 112.3113 c-209.8132 112.3452 -209.8066 112.48 -209.7751 112.5694 C-209.907 112.437 -210.039 112.3046 -210.171 112.1722 C-213.8235 109.8363 -216.6544 106.5469 -219.9003 103.7398 C-230.8343 94.284 -242.5449 86.0097 -255.4412 79.4128 C-267.5173 73.2354 -280.206 68.8881 -293.6712 67.4415 C-308.6342 65.8343 -323.3607 66.9657 -337.3267 73.4117 C-350.8826 79.6682 -361.0621 89.5164 -368.3926 102.3626 C-374.8103 113.609 -378.4799 125.7976 -380.1942 138.6091 C-381.2346 146.3845 -381.9759 154.1911 -381.7206 162.0271 C-381.2037 177.8886 -378.9885 193.527 -374.943 208.8911 C-370.7809 224.6985 -365.1536 239.9606 -358.3263 254.8161 C-348.9373 275.2458 -337.1081 294.2009 -324.1598 312.5121 C-308.9916 333.9628 -292.6162 354.4346 -274.4397 373.4155 C-254.5672 394.1676 -233.0088 412.9324 -208.4613 428.047 C-194.5277 436.6262 -179.9464 443.8612 -164.2422 448.6661 C-152.39 452.2926 -140.3219 454.4845 -127.8764 453.7967 C-119.4782 453.3326 -111.4631 451.2969 -104.0546 447.1941 C-92.9498 441.0443 -85.4363 431.7799 -80.7627 420.108 C-77.7021 412.4644 -76.2963 404.4679 -75.8904 396.2699 C-75.8394 395.2417 -76.2865 394.0823 -75.3913 393.1941 C-74.3234 393.2529 -74.1166 394.1167 -73.7319 394.7569 C-64.0144 410.928 -54.2991 427.1004 -44.6066 443.2864 C-43.2874 445.4894 -41.8964 447.6409 -40.1324 449.5011 C-39.0402 450.653 -37.8312 451.7432 -36.5172 452.627 C-31.9652 455.6888 -27.4247 455.4546 -23.3036 451.852 C-21.7544 450.4976 -20.4226 448.8551 -19.1696 447.2087 C-15.1438 441.9188 -12.5646 435.895 -10.7289 429.5657 C-8.76428 422.792 -7.72727 415.872 -7.41096 408.7939 C-6.49065 388.2044 -10.8985 368.7161 -19.6969 350.2546 C-27.2627 334.3791 -35.3877 318.7699 -43.2884 303.0544 C-57.0048 275.7707 -70.8522 248.5522 -84.4296 221.1996 C-95.2348 199.4317 -105.8143 177.5503 -116.32 155.6358 C-127.1706 133.002 -137.5952 110.1683 -147.7539 87.2144 C-148.7204 85.0305 -149.6053 82.8106 -150.5598 80.532 C-149.222 79.6455 -148.3613 80.669 -147.4873 81.107 C-131.6005 89.0704 -116.2826 98.0188 -101.4472 107.7976 C-78.9603 122.6198 -57.8853 139.2193 -38.1873 157.5993 C-23.19 171.593 -9.25613 186.5616 3.89117 202.2836 C4.60899 203.1422 5.23143 204.0864 5.99624 204.8985 C7.15435 206.1281 7.60226 207.5332 7.72717 209.2171 C9.26142 229.9031 13.8833 249.9356 20.7101 269.4806 C26.5778 286.2797 34.1549 302.302 42.7367 317.8776 C52.169 334.9969 62.6526 351.4239 74.5419 366.9412 C90.9646 388.3751 109.4514 407.7765 131.1125 424.017 C143.8281 433.5507 157.346 441.7187 172.0755 447.7994 C183.3826 452.467 195.0825 455.681 207.2918 456.523 C220.6737 457.4458 233.2922 454.8601 244.9835 447.8249 C259.6048 439.0264 272.9889 428.7535 284.7277 416.3568 C289.0206 411.8231 292.9565 406.9901 296.8969 402.1506 C301.6685 396.2902 304.4962 389.5947 305.9654 382.2838 C307.7781 373.2633 307.7554 364.157 306.6388 355.0698 C303.4518 329.1293 293.5128 305.7703 278.955 284.2984 C265.8336 264.9451 250.0487 248.0635 231.0103 234.3655 C218.4278 225.3124 204.731 218.5628 189.6237 214.8306 C169.768 209.9254 150.3181 211.457 131.1985 218.4683 C118.3163 223.1922 106.7008 230.15 95.7679 238.3433 C94.2704 239.4656 92.9215 240.8523 91.2084 241.5659 C89.9514 240.5078 89.8302 239.1679 89.4448 238.0132 C84.7815 224.0428 81.1054 209.8108 79.0187 195.2281 C77.6836 185.8972 76.7298 176.4889 77.0474 167.0374 C77.5009 153.5462 79.3216 140.2791 84.6276 127.7199 C89.7374 115.6249 97.3152 105.5591 108.8561 98.8418 C115.5919 94.9214 122.8491 92.6411 130.61 91.9343 C150.4596 90.127 169.4341 93.923 187.8489 101.0275 C203.9178 107.2267 218.6223 115.9126 232.4427 126.128 C248.5753 138.0525 263.217 151.6114 276.7808 166.3823 C289.2429 179.9535 300.702 194.3161 311.4764 209.246 C312.9974 211.3538 314.0954 213.5812 314.7658 216.0904 C317.9075 227.8485 322.0796 239.2473 326.8774 250.4242 C338.2963 277.0254 350.7134 303.1617 363.6493 329.0514 C373.5824 348.9313 383.5264 368.8088 393.7501 388.5398 C403.6068 407.5624 413.8343 426.3927 423.8765 445.3195 C424.5991 446.6813 425.5951 447.9761 425.6879 450.0147 C423.7377 450.0147 422.0105 449.9728 420.2859 450.0211 C399.168 450.613 381.1518 458.4424 366.1353 473.2566 C363.4622 475.8938 361.5862 479.0293 360.482 482.6 C358.795 488.0543 360.73 491.6124 366.171 493.3011 C368.4972 494.0231 370.8719 494.1538 373.2838 494.1099 C386.7219 493.8653 400.1656 493.7834 413.5912 494.3854 C423.962 494.8505 434.3339 495.4908 444.6468 496.8081 C446.8654 497.0914 449.1077 497.1881 451.3374 497.3903 C453.4113 497.5783 454.7279 498.6149 455.7598 500.5213 C460.7067 509.6604 465.8056 518.7173 470.8586 527.799 C472.1645 530.146 473.4994 532.4768 474.8928 534.9423 C472.3307 536.1671 469.878 534.8893 467.639 535.6894 C469.5601 536.6696 471.6639 536.3318 473.6826 536.3924 C475.3244 536.4416 476.2942 537.099 477.0865 538.4503 C480.368 544.0465 483.7092 549.6078 487.0209 555.1864 C487.4014 555.8274 488.0342 556.4065 487.6272 557.351 C486.1009 557.4844 484.5439 557.6205 482.9869 557.7565 C483.9657 558.4795 485.1445 558.4234 486.2185 558.3429 C488.4804 558.1733 489.7774 559.3094 490.7176 561.1551 C491.0065 561.7219 491.3802 562.2457 491.717 562.7879 C500.4754 576.888 509.4641 590.839 518.7875 604.5728 C521.5664 608.6662 524.3658 612.7462 527.2096 616.7946 C529.1527 619.5606 531.4275 622.016 534.4551 623.6421 C538.5749 625.8549 542.4845 625.2466 545.8302 621.9584 C547.9391 619.8857 549.1674 617.3061 550.1563 614.5924 C553.3953 605.705 555.6422 596.6162 556.0584 587.1048 C556.2187 583.4413 556.7084 579.7975 556.2824 576.1215 C556.1675 575.13 556.9508 574.784 557.7137 574.4875 C556.7993 573.6436 555.8897 572.9503 555.862 571.4066 C555.7561 565.5032 554.4962 559.7515 553.2421 554.0078 C552.9368 552.6094 552.6463 551.205 552.8996 549.7593 Cf1 D-102.7997 381.7557 m-102.6084 387.1868 -104.148 394.083 -105.7932 397.16 C-108.505 402.2321 -112.5627 405.0282 -118.4527 405.1742 C-123.5235 405.2999 -128.263 404.0753 -132.9243 402.2884 C-142.1086 398.7675 -150.3483 393.569 -158.3263 387.9279 C-168.7918 380.5279 -178.5528 372.2657 -187.8678 363.4721 C-212.5002 340.2189 -234.1623 314.4138 -253.7115 286.7955 C-269.7312 264.1636 -283.9723 240.5095 -295.1249 215.0631 C-303.038 197.0082 -309.4833 178.4878 -313.4109 159.131 C-315.7454 147.6257 -316.6309 136.0259 -315.8014 124.3197 C-315.3561 118.0365 -313.7994 112.0153 -310.5836 106.5306 C-307.5113 101.2907 -303.0588 97.7791 -296.9933 96.8568 C-292.5573 96.1821 -288.0794 96.4152 -283.6569 97.4695 C-275.431 99.4307 -268.1509 103.3688 -261.2446 108.0719 C-254.4865 112.6739 -248.2931 117.9726 -242.4224 123.6599 C-227.4293 138.1845 -214.5322 154.4675 -202.3872 171.3759 C-187.9174 191.5205 -174.7265 212.4892 -162.2013 233.8873 C-147.0852 259.7116 -133.1794 286.1516 -121.445 313.6991 C-115.6771 327.2398 -110.6058 341.0305 -106.9063 355.2955 C-104.6546 363.9774 -103.1157 372.7734 -102.7997 381.7557 Cf132.531 253.1884 m142.1466 253.0042 151.6229 256.1426 160.633 260.9229 C171.623 266.7534 181.027 274.6844 189.621 283.5556 C205.5883 300.0377 219.3715 318.2282 231.206 337.8831 C238.4702 349.9475 244.9367 362.4137 249.8139 375.6632 C252.194 382.1294 254.0721 388.7173 254.9664 395.5586 C255.3608 398.5762 255.3571 401.5688 254.6872 404.5982 C253.6375 409.345 250.3664 413.0254 244.2553 413.5794 C241.5525 413.8244 238.8424 413.715 236.1536 413.0937 C231.4588 412.0089 226.9662 410.399 222.6324 408.3074 C209.7175 402.0747 198.2711 393.6701 187.4325 384.3966 C170.3543 369.7847 155.3736 353.2073 141.7892 335.3386 C126.0552 314.6425 113.008 292.3354 101.9459 268.8405 C101.4019 267.6852 100.9168 266.4998 100.4575 265.3079 C99.7553 263.4852 99.839 263.0735 101.3921 262.1501 C110.7593 256.5805 120.7463 253.0874 132.531 253.1884 Cf999.5354 255.4633 m1001.292 255.4633 1003.07 255.2843 1004.8014 255.493 C1014.3002 256.6381 1023.0765 259.8743 1031.2751 264.778 C1043.6222 272.1628 1053.9637 281.8953 1063.5185 292.494 C1079.3033 310.0041 1093.2548 328.8537 1104.4027 349.6861 C1110.6723 361.4025 1116.0943 373.4728 1119.5618 386.3586 C1121.0717 391.9703 1121.787 397.641 1121.2998 403.4301 C1120.8451 408.8327 1117.889 412.2585 1112.6636 413.6032 C1110.0103 414.286 1107.3673 414.474 1104.6056 414.0053 C1101.1185 413.4135 1097.7417 412.5202 1094.4441 411.2873 C1087.2146 408.5841 1080.6016 404.7181 1074.1914 400.479 C1062.5457 392.7778 1052.0289 383.6922 1042.0673 373.965 C1027.6215 359.8588 1014.6925 344.4424 1003.0205 327.9741 C989.4935 308.889 977.6823 288.8222 968.4376 267.2943 C967.553 265.2344 967.5761 264.9684 969.4871 263.884 C978.8063 258.5956 988.6956 255.2749 999.5354 255.4633 Cf-253.9034 8.31818 m-257.1002 6.95316 -259.9392 4.92685 -262.8551 3.07219 C-291.6668 -15.2534 -317.1908 -37.3708 -339.3556 -63.3551 C-357.0758 -84.1289 -372.2537 -106.585 -384.354 -131.095 C-392.8761 -148.3565 -399.8339 -166.16 -403.6127 -185.1138 C-404.9969 -192.0561 -405.4793 -199.0397 -405.138 -206.0952 C-404.9652 -209.6685 -404.1334 -213.0646 -402.1666 -216.0863 c-400.7321 -218.2901 -398.9463 -218.9246 -396.3728 -218.3338 C-394.6461 -217.9375 -393.0311 -217.2638 -391.5217 -216.3249 C-388.7998 -214.6321 -386.192 -212.7873 -383.8309 -210.613 C-379.1213 -206.2756 -374.6504 -201.7073 -370.4722 -196.8517 C-360.7583 -185.563 -351.9672 -173.5764 -343.5926 -161.2786 C-323.7671 -132.1664 -306.3413 -101.6352 -290.08 -70.4258 C-282.0276 -54.9713 -274.3828 -39.3102 -267.0855 -23.4848 C-262.7359 -14.0519 -258.5642 -4.53699 -254.3523 4.95884 C-253.9268 5.91821 -253.0801 6.87478 -253.9034 8.31818 Cf*U*u0 D-706.341 582.3338 m-703.9236 582.2474 -702.4039 583.2566 -701.0129 585.3995 C-694.5104 595.4169 -687.7577 605.2717 -681.1128 615.197 C-679.6874 617.3262 -678.0658 619.2738 -676.2191 621.0494 C-675.0564 622.1672 -673.7584 623.0701 -672.3223 623.7764 C-668.15 625.8286 -664.2138 625.1134 -661.048 621.6834 C-659.5215 620.0296 -658.3887 618.1038 -657.5746 616.0068 C-654.6239 608.4068 -652.5862 600.587 -651.5861 592.4747 C-651.1367 588.8298 -650.9173 585.1873 -650.7507 581.5311 C-650.7695 572.5692 -651.8284 563.7227 -653.6667 554.9594 C-654.0254 553.2497 -654.2954 551.5215 -654.6063 549.8018 C-654.9985 548.5924 -655.4342 547.395 -655.7761 546.1716 C-658.9658 534.7578 -663.1121 523.6948 -667.883 512.8543 C-668.4407 511.5869 -669.5155 510.4288 -669.0857 508.7118 C-664.6751 508.3744 -660.2205 508.1548 -655.7946 507.6714 C-644.1248 506.3968 -633.3373 502.7727 -624.0982 495.2677 C-618.1854 490.4646 -613.5104 484.6204 -609.954 477.9055 C-609.0653 476.2276 -608.3676 474.3878 -607.9376 472.5397 C-606.8927 468.049 -608.7301 464.6391 -613.0375 462.9719 C-615.273 462.1068 -617.622 461.5452 -620.0596 461.6075 C-623.0969 461.6852 -626.1434 461.6636 -629.1685 461.9042 C-639.7107 462.7423 -650.2409 462.7048 -660.786 461.9231 C-666.2039 461.5214 -671.6446 461.429 -677.0328 460.6431 C-682.7201 459.8136 -688.406 458.9728 -694.0989 458.1831 C-695.9932 457.9204 -697.1916 456.9842 -698.1645 455.2937 C-705.9794 441.7142 -713.9255 428.2102 -721.7496 414.636 C-730.2924 399.8151 -738.8108 384.9794 -747.2218 370.0836 C-754.4536 357.2759 -761.5547 344.394 -768.6504 331.51 C-780.4525 310.08 -791.8614 288.4389 -802.7755 266.5454 C-811.6894 248.6644 -820.6384 230.7888 -828.2766 212.306 C-833.786 198.9746 -837.9468 185.2248 -840.5498 171.0298 C-842.5468 160.1393 -843.4328 149.1394 -842.6061 138.0896 C-841.8128 127.4846 -839.602 117.1993 -833.9564 107.9572 C-828.7134 99.3742 -821.4074 93.4168 -811.4175 91.4522 C-804.4375 90.0794 -797.4339 90.5765 -790.5384 92.5821 C-780.555 95.486 -771.7675 100.6344 -763.4789 106.7287 C-752.0786 115.111 -742.1399 125.0742 -732.8294 135.6617 C-717.8934 152.6464 -705.0879 171.1844 -693.3389 190.475 C-692.081 192.5402 -691.1788 194.6036 -691.1746 197.1813 C-691.1463 214.3926 -688.1494 231.1969 -683.8493 247.7972 C-678.2952 269.2389 -670.1313 289.6873 -660.2907 309.4978 C-648.15 333.9385 -633.7389 356.9221 -616.2832 377.9347 C-600.4657 396.9752 -582.8621 414.1072 -562.1236 427.8098 C-550.8733 435.2432 -538.9776 441.3839 -526.162 445.712 C-512.1697 450.4375 -497.81 452.1491 -483.1444 450.928 C-470.2843 449.8573 -459.0935 444.757 -449.6585 435.9174 C-444.7472 431.3162 -440.1748 426.3988 -436.1847 420.9658 C-431.3462 414.3777 -425.9642 408.2646 -420.269 402.407 C-416.257 398.2804 -412.2892 394.1021 -408.4757 389.7929 C-398.6841 378.7286 -392.7279 365.8654 -390.4978 351.2306 C-388.8032 340.1113 -388.3577 328.9898 -389.4408 317.7852 C-390.0403 311.5841 -390.342 305.3543 -390.7808 299.1376 C-390.8483 298.1813 -390.8204 297.2014 -391.0261 296.2745 C-391.9312 292.1946 -391.6176 291.3283 -386.6077 292.2255 C-382.0563 293.0406 -377.4698 293.6272 -372.8089 293.7741 C-368.3428 293.9149 -365.1945 291.2041 -368.4403 285.9721 C-369.8194 283.7493 -371.6776 281.9917 -373.6778 280.4167 C-378.9046 276.3013 -384.7067 273.367 -391.3727 272.3787 C-391.6891 272.3317 -392.0048 272.2737 -392.323 272.2464 C-394.4939 272.0604 -395.6712 270.9373 -396.2186 268.7692 C-397.3519 264.2793 -398.6375 259.8247 -399.9702 255.3886 C-407.7308 229.5559 -418.5702 205.0466 -431.7246 181.5273 C-441.8205 163.4764 -453.2817 146.357 -466.524 130.4611 C-480.826 113.2934 -496.7112 97.8218 -515.5627 85.6331 C-527.9928 77.5964 -541.1723 71.1858 -555.7155 67.9142 C-583.6696 61.6254 -609.7789 66.2193 -633.6906 81.9082 C-654.5084 95.5672 -670.1194 113.873 -680.326 136.6729 C-680.8478 137.8385 -681.2959 139.0389 -681.8554 140.1854 c-682.1988 140.889 -682.9294 141.0041 -683.4227 140.4898 C-684.5259 139.3393 -685.5143 138.077 -686.5283 136.843 C-702.5745 117.3154 -720.6665 100.0308 -742.1301 86.5052 C-755.6003 78.0167 -769.901 71.4312 -785.4866 67.7062 C-797.2995 64.8828 -809.254 64.1163 -821.2135 65.4131 C-839.0587 67.3479 -854.6899 74.6167 -867.8977 86.8656 C-881.9244 99.8742 -890.5826 116.0252 -895.373 134.3683 C-899.0413 148.4147 -900.1036 162.7508 -899.1467 177.1813 C-897.7295 198.5511 -892.5597 219.1138 -884.9033 239.0716 C-880.7221 249.9708 -875.9662 260.6304 -871.1153 271.2412 C-857.5534 300.9063 -843.3447 330.2629 -828.4498 359.2807 C-817.1332 381.3274 -805.5904 403.2582 -794.0967 425.2137 C-790.6121 431.8702 -786.9509 438.434 -783.3829 445.047 C-782.7767 446.1707 -782.1784 447.3051 -781.6831 448.4795 C-781.4232 449.0956 -781.5418 449.8088 -782.3946 449.8807 C-783.6656 449.988 -784.9469 449.9822 -786.2242 450.0061 C-807.356 450.4008 -825.4087 458.1611 -840.6004 472.7488 C-843.7912 475.8127 -845.9484 479.5143 -847.0342 483.7948 C-848.1027 488.0072 -846.2588 491.4645 -842.152 492.9325 C-839.4196 493.9093 -836.5709 494.184 -833.6561 494.1239 C-821.0198 493.8633 -808.3791 493.819 -795.75 494.3162 C-784.415 494.7625 -773.0915 495.4786 -761.8226 496.8748 C-759.7613 497.1302 -757.6766 497.1908 -755.6075 497.3918 C-753.9068 497.5569 -752.6728 498.3651 -751.8427 499.9491 C-749.9135 503.6303 -747.9276 507.2845 -745.864 510.8922 C-739.0377 522.8263 -732.1692 534.7362 -725.3082 546.6505 C-724.7561 547.6091 -723.9333 548.4853 -724.654 549.7062 C-722.6834 550.1877 -722.0747 551.9969 -721.1712 553.4383 C-716.5856 560.7538 -712.0757 568.1168 -707.5344 575.4602 C-706.3869 577.3158 -705.2216 579.1604 -704.0562 581.0232 C-704.9993 581.5642 -705.6702 581.949 -706.341 582.3338 Cf1 D-520.4538 378.6329 m-522.405 377.9623 -523.3904 376.8955 -524.4366 375.9495 C-541.6808 360.3544 -557.4405 343.409 -571.2445 324.6662 C-587.2487 302.9359 -600.4192 279.6168 -610.7155 254.6766 C-622.7185 225.6023 -631.7777 195.7509 -634.7497 164.2626 c-635.7302 153.8742 -635.8945 143.5233 -634.3779 133.1924 C-633.6578 128.2864 -632.4989 123.4572 -630.4569 118.9055 C-625.83 108.5915 -617.7858 103.1787 -606.5512 102.4707 C-600.2485 102.0734 -594.1408 103.0472 -588.1725 105.1172 C-579.3301 108.1844 -571.3169 112.771 -563.7366 118.1819 C-553.2715 125.6522 -543.9844 134.4352 -535.4345 143.9862 C-519.7941 161.458 -506.7664 180.7812 -495.3947 201.2462 C-486.6159 217.0449 -478.632 233.2361 -471.5375 249.8632 C-467.0837 260.3014 -463.0367 270.8967 -459.2537 281.5937 C-458.4531 283.8576 -458.5825 284.273 -460.7941 285.3224 C-467.9474 288.7167 -474.1421 293.4648 -480.0492 298.6531 C-497.0511 313.5857 -508.8294 331.8832 -515.5205 353.4863 C-518.0313 361.5925 -519.3873 369.923 -520.4538 378.6329 Cf-443.6238 363.9928 m-443.6238 367.8241 -443.5489 371.6574 -443.6539 375.4857 C-443.7105 377.5515 -444.0019 379.62 -444.3149 381.6677 C-445.0921 386.7524 -446.3896 391.6843 -449.3105 396.0133 C-453.4499 402.1481 -458.9127 402.6319 -464.0929 397.3988 C-467.0856 394.3755 -468.8717 390.6549 -470.2705 386.7137 C-474.105 375.9099 -474.3329 364.7161 -472.9092 353.5875 C-471.0248 338.8583 -464.943 325.7592 -455.5103 314.2567 C-454.8029 313.394 -454.0466 312.5663 -453.2604 311.7745 C-452.3316 310.8392 -451.5287 310.9821 -451.1405 312.1276 C-450.7823 313.1846 -450.4609 314.2554 -450.1632 315.3311 C-445.7576 331.2524 -443.3859 347.4568 -443.6238 363.9928 Cf*U0 D0.389166 0.950042 0.726253 0.594446 0.345098 0 0.094118 Xa1400.4622 666.0991 m1400.4622 668.3049 1400.4622 669.7125 1400.4622 671.1202 C1400.462 785.9745 1400.4592 900.8289 1400.4664 1015.6832 C1400.4669 1024.4906 1400.1233 1033.2693 1398.6614 1041.9744 C1398.0245 1045.7676 1397.0723 1049.4766 1395.7273 1053.0814 C1392.3238 1062.2034 1386.2351 1068.8642 1377.4687 1073.1187 C1371.9574 1075.7935 1366.1274 1077.4615 1360.1587 1078.639 C1351.8336 1080.2814 1343.4072 1081.1972 1334.9372 1081.6627 C1328.7091 1082.0051 1322.4755 1082.2509 1316.2448 1082.5477 C1314.1122 1082.6493 1313.912 1082.7824 1313.8961 1084.6365 C1313.8591 1088.955 1313.8884 1093.274 1313.8902 1097.5928 C1313.8907 1098.741 1314.4293 1099.3634 1315.6118 1099.3682 c1316.8914 1099.3733 1318.1712 1099.3919 1319.4507 1099.392 C1384.5604 1099.3932 1449.6702 1099.393 1514.7799 1099.393 C1516.5284 1099.393 1518.2769 1099.393 1519.7671 1099.393 C1520.7891 1098.353 1520.5846 1097.3513 1520.5874 1096.4139 C1520.5995 1092.4149 1520.5801 1088.4158 1520.5766 1084.4167 C1520.5756 1083.307 1520.1632 1082.5909 1518.9296 1082.5925 C1517.65 1082.5942 1516.3702 1082.5783 1515.0906 1082.5716 C1504.3652 1082.5153 1493.6661 1081.9794 1483.0202 1080.6479 C1476.9863 1079.8932 1471.0035 1078.8136 1465.2361 1076.8265 C1462.8248 1075.9957 1460.4356 1075.0455 1458.1469 1073.9238 C1449.4009 1069.6374 1444.0574 1062.6279 1441.8374 1053.1813 C1440.6968 1048.3281 1440.3795 1043.3831 1440.1897 1038.4273 C1440.11 1036.3507 1440.1688 1034.2687 1440.1688 1032.1892 C1440.1683 871.4262 1440.1683 710.6632 1440.1669 549.9001 C1440.1669 548.3007 1440.1838 546.6999 1440.1243 545.1022 C1440.0816 543.9583 1439.3987 543.4307 1438.2581 543.4312 C1431.8591 543.4338 1425.4604 543.4439 1419.0614 543.4057 C1417.853 543.3984 1416.9023 543.7902 1416.0938 544.6501 C1415.3272 545.4657 1414.5363 546.2584 1413.7629 547.0678 C1289.0885 677.5096 1164.4148 807.9518 1039.7415 938.3947 C1014.4312 964.8764 989.1352 991.3719 963.7802 1017.811 C962.6582 1018.9811 961.9715 1020.8599 959.9147 1020.9347 C958.9935 1019.4667 959.4614 1017.84 959.461 1016.296 C959.4366 891.8438 959.4281 767.3916 959.4603 642.9394 C959.4626 633.6651 959.6542 624.3854 960.8851 615.1658 C961.6482 609.4508 962.782 603.8295 964.6585 598.3577 C968.6912 586.5984 976.4634 578.4534 987.9947 573.8337 C995.9332 570.6534 1004.2426 569.1144 1012.6801 568.1421 C1023.1805 566.9321 1033.7351 566.6674 1044.2906 566.4458 C1045.4094 566.4223 1046.5371 566.455 1047.6406 566.3096 C1047.9893 566.2638 1048.3357 565.7612 1048.5633 565.3935 C1048.7149 565.1485 1048.6842 564.7722 1048.6847 564.4547 C1048.6884 560.1358 1048.6786 555.817 1048.6842 551.4981 C1048.6856 550.3338 1048.1382 549.75 1046.9683 549.7471 C1045.6887 549.744 1044.4091 549.7233 1043.1296 549.7233 C978.6598 549.722 914.1901 549.7222 849.7202 549.7222 c849.0803 549.7222 848.4404 549.7213 847.8005 549.7232 c843.2782 549.7365 843.6713 549.4455 843.6646 553.8654 C843.6592 557.3847 843.6428 560.9041 843.6832 564.4229 C843.7024 566.09 843.9919 566.3536 845.6056 566.422 C851.5171 566.6727 857.4368 566.7938 863.3393 567.1787 C870.6949 567.6583 877.9444 568.8802 885.0095 571.0386 C886.9943 571.6448 888.9656 572.3193 890.8897 573.0952 C905.5537 579.0083 914.2611 589.9014 917.5811 605.2313 C918.6998 610.3969 919.3648 615.6319 919.5035 620.9207 C919.5792 623.7985 919.587 626.6786 919.5871 629.5577 C919.5908 770.9661 919.5901 912.3745 919.59 1053.7829 C919.59 1055.0627 919.4527 1056.36 919.617 1057.6182 C919.9113 1059.8734 918.7991 1061.0916 917.0092 1062.2189 C902.2179 1071.5361 886.2621 1077.8038 869.0156 1080.7294 C862.2267 1081.881 855.3952 1082.6168 848.4974 1082.6062 C847.8583 1082.6052 847.2116 1082.6004 846.5821 1082.692 C845.8926 1082.7923 845.4403 1083.245 845.437 1083.9629 C845.416 1088.5992 845.4062 1093.2357 845.4227 1097.872 C845.4261 1098.811 846.0184 1099.2973 846.933 1099.3295 c848.211 1099.3744 849.4907 1099.3905 850.7697 1099.3906 C893.6428 1099.3935 936.5161 1099.393 979.3893 1099.393 C979.8693 1099.393 980.3596 1099.3276 980.8273 1099.4034 C983.3261 1099.8091 984.9967 1098.5913 986.6459 1096.8627 C1001.5526 1081.2385 1016.5181 1065.6704 1031.468 1050.087 C1152.0644 924.3799 1272.6599 798.6716 1393.2702 672.9776 C1395.3552 670.8048 1397.6219 668.8062 1400.4622 666.0991 Cf482.9869 557.7565 m484.5439 557.6205 486.1009 557.4844 487.6272 557.351 C488.0342 556.4065 487.4014 555.8274 487.0209 555.1864 C483.7092 549.6078 480.368 544.0465 477.0865 538.4503 C476.2942 537.099 475.3244 536.4416 473.6826 536.3924 C471.6639 536.3318 469.5601 536.6696 467.639 535.6894 C453.5591 535.2319 439.487 535.519 425.4448 536.6249 C379.5693 540.2379 335.6218 551.2292 294.1253 571.3717 C262.3355 586.8025 233.7597 606.7801 209.1698 632.2558 C176.5782 666.0214 154.4017 705.57 143.528 751.3133 C140.083 765.8059 138.0577 780.508 137.082 795.385 C136.1792 809.1514 136.3845 822.8964 137.4518 836.6131 C142.5893 902.6315 165.732 961.1997 210.2784 1010.7175 C237.0644 1040.4929 269.0492 1063.2791 305.305 1080.1519 C332.5594 1092.8356 361.0759 1101.4495 390.65 1106.7243 C419.7561 1111.9156 449.0952 1113.7175 478.5699 1112.1908 C534.9283 1109.2716 587.8278 1094.3035 636.5061 1065.3782 C668.9069 1046.1253 696.8407 1021.7756 719.5382 991.5894 C742.778 960.6817 758.2709 926.2788 765.7177 888.3112 C769.0833 871.152 770.4745 853.8058 770.2644 836.3187 C770.1124 823.6718 769.4016 811.0644 767.7656 798.5246 C763.5986 766.5842 754.8719 735.9546 740.7804 706.9547 C715.1277 654.1614 676.8231 612.8725 626.8064 582.341 C604.3189 568.614 580.3841 558.0854 555.2323 550.293 C554.4729 550.0576 553.6787 549.9348 552.9 549.7594 C552.6463 551.205 552.9368 552.6094 553.2421 554.0078 C554.4962 559.7515 555.7561 565.5032 555.862 571.4066 C555.8897 572.9503 556.7993 573.6436 557.7155 574.4885 C578.1257 583.4948 596.2532 595.8724 612.2685 611.3745 C629.6751 628.2237 643.5818 647.6522 654.6475 669.1398 C673.5979 705.9378 683.2873 745.2632 686.3069 786.3634 C687.3744 800.8928 687.4177 815.4315 686.6391 829.9963 C685.578 849.8472 683.018 869.4713 678.6035 888.844 C671.3723 920.5785 659.6411 950.5037 642.2895 978.1247 C623.0251 1008.7908 598.4432 1034.2558 567.8131 1053.7097 C532.6101 1076.0679 493.951 1087.6829 452.4712 1090.0958 C432.9353 1091.2322 413.4772 1090.3195 394.1948 1086.5542 C368.9339 1081.6215 345.4842 1072.312 324.0453 1058.0328 C300.3965 1042.2816 281.1541 1022.1608 265.7537 998.3961 C236.5923 953.3965 222.3839 903.6702 219.9287 850.407 C218.962 829.4322 220.3676 808.5358 223.5219 787.7556 C227.4763 761.7057 234.3958 736.5036 244.8689 712.3178 C262.1399 672.4332 287.0746 638.2558 321.0858 610.9735 C356.4958 582.569 396.8567 565.6616 441.8099 559.7026 C455.4666 557.8922 469.2086 557.2937 482.9869 557.7565 Cf-706.341 582.3338 m-705.6702 581.949 -704.9993 581.5642 -704.0562 581.0232 C-705.2216 579.1604 -706.3869 577.3158 -707.5344 575.4602 C-712.0757 568.1168 -716.5856 560.7538 -721.1712 553.4383 C-722.0747 551.9969 -722.6834 550.1877 -724.654 549.7062 C-787.6796 549.7114 -850.7071 549.7132 -913.7347 549.7379 C-915.7893 549.7386 -918.3488 548.8998 -919.7771 550.1771 C-921.4585 551.6808 -920.3295 554.399 -920.4434 556.5805 C-920.5765 559.1328 -920.5022 561.6981 -920.456 564.2567 C-920.4219 566.144 -920.1726 566.4116 -918.1721 566.4199 C-909.8538 566.4541 -901.5344 566.3585 -893.2173 566.4634 C-881.8579 566.6066 -870.5172 567.1015 -859.2911 569.0548 C-852.4953 570.2372 -845.8646 571.9699 -839.5709 574.854 C-828.8403 579.7714 -821.5013 587.7567 -817.5611 598.9177 C-814.7645 606.8393 -813.564 615.0452 -813.0907 623.3597 C-812.7365 629.5835 -812.6535 635.8296 -812.6523 642.0658 C-812.6286 764.2738 -812.6276 886.4819 -812.649 1008.69 C-812.6506 1017.804 -812.6712 1026.925 -813.9493 1035.9849 C-814.7329 1041.5389 -815.8686 1047.0027 -817.8141 1052.2782 C-821.9043 1063.3695 -829.3428 1071.2768 -840.2329 1075.9347 C-845.7057 1078.2756 -851.4102 1079.7634 -857.267 1080.7109 C-865.4956 1082.0419 -873.7841 1082.5959 -882.1159 1082.5796 C-888.1947 1082.5676 -894.2736 1082.562 -900.3523 1082.595 C-902.4048 1082.6061 -902.6888 1082.8544 -902.7088 1084.6777 C-902.7546 1088.836 -902.7605 1092.9954 -902.7137 1097.1537 c-902.6924 1099.0372 -902.37 1099.2969 -900.4072 1099.3694 C-899.1291 1099.4166 -897.8481 1099.3924 -896.5684 1099.3924 C-759.1554 1099.3931 -621.7424 1099.3942 -484.3294 1099.3895 C-477.8589 1099.3893 -478.482 1100.0337 -478.1112 1093.545 C-476.907 1072.4701 -475.6558 1051.3978 -474.4554 1030.3226 C-473.646 1016.1122 -472.8969 1001.8983 -472.1087 987.6866 C-471.9317 984.4939 -471.6871 981.305 -471.5122 978.1123 C-471.4623 977.2016 -471.9423 976.5439 -472.8911 976.535 C-477.2079 976.4943 -481.5252 976.4937 -485.8422 976.5054 c-487.0109 976.5085 -487.4387 977.25 -487.6263 978.3304 C-488.5561 983.6837 -489.4469 989.0462 -490.5161 994.3724 C-493.0049 1006.7697 -496.1997 1018.9708 -501.1057 1030.6648 C-503.4615 1036.2803 -506.2776 1041.6501 -509.7566 1046.665 C-518.8689 1059.8003 -531.4649 1066.5888 -547.3728 1067.3291 c-550.2476 1067.4628 -553.1295 1067.487 -556.0081 1067.4875 C-615.1965 1067.4961 -674.3849 1067.5032 -733.5733 1067.481 C-740.0754 1067.4785 -739.1786 1068.331 -739.1806 1061.9469 C-739.2017 993.1648 -739.2003 924.3828 -739.1825 855.6008 C-739.1809 849.4961 -739.9992 850.2043 -733.9111 850.2021 C-683.361 850.1838 -632.8109 850.1912 -582.2609 850.1929 C-577.46 850.193 -572.6846 850.3567 -567.9271 851.2041 C-555.613 853.3973 -546.4756 859.9056 -540.5747 870.9356 C-537.308 877.0418 -535.2301 883.5764 -533.6545 890.2896 C-531.7876 898.2445 -530.7885 906.3325 -529.9142 914.4412 C-529.7249 916.1977 -529.5224 916.4314 -527.8833 916.4451 C-523.4047 916.4828 -518.9253 916.4649 -514.4465 916.4314 C-513.5392 916.4246 -512.9727 915.8792 -512.9289 914.9426 C-512.8767 913.8256 -512.8638 912.7059 -512.8637 911.5873 C-512.861 858.8011 -512.8591 806.0149 -512.8652 753.2287 C-512.8658 748.2421 -512.4131 748.4989 -517.4561 748.5079 C-520.8154 748.5139 -524.1751 748.4843 -527.5339 748.5284 C-529.6361 748.556 -529.6636 748.6146 -529.9701 750.598 C-530.8976 756.6 -531.7082 762.6223 -532.7611 768.6021 C-534.0373 775.85 -535.7808 782.9963 -538.5057 789.8543 C-539.5653 792.521 -540.7761 795.1426 -542.115 797.6808 C-547.7143 808.2952 -556.562 814.4989 -568.2934 816.7037 C-575.2379 818.0089 -582.2631 818.3661 -589.3062 818.3688 C-636.9769 818.3872 -684.6475 818.379 -732.3181 818.3767 C-734.0773 818.3766 -735.8366 818.3542 -737.5957 818.3314 c-738.5371 818.3191 -739.088 817.8038 -739.1458 816.8913 C-739.2165 815.7757 -739.1924 814.6535 -739.1924 813.5342 C-739.1935 752.91 -739.188 692.2859 -739.1986 631.6617 C-739.1999 623.9721 -738.9385 616.3141 -737.2253 608.7734 C-736.5504 605.803 -735.6488 602.9144 -734.4103 600.1296 c-731.2672 593.062 -726.128 588.0923 -718.9003 585.2889 C-714.8489 583.7175 -710.6601 582.7553 -706.341 582.3338 Cf82.2225 677.8749 m81.6663 676.7596 81.0644 675.49 80.4093 674.2483 C59.2293 634.0974 38.0444 593.949 16.8595 553.8008 C16.4866 553.0939 15.9951 552.4278 15.7496 551.6801 c15.1864 549.9652 13.9125 549.6601 12.355 549.7163 C11.2367 549.7567 10.1156 549.7222 8.99572 549.7222 C-118.8299 549.7221 -246.6555 549.717 -374.4811 549.7362 C-381.3042 549.7372 -380.2723 548.7779 -380.3653 555.4795 C-380.4053 558.3584 -380.3949 561.2388 -380.3515 564.1176 c-380.3202 566.1857 -380.1287 566.3668 -378.2415 566.4297 C-377.1228 566.467 -376.002 566.4423 -374.8822 566.4425 C-366.4031 566.444 -357.9231 566.3681 -349.4453 566.4687 C-341.7603 566.5599 -334.1046 567.0886 -326.6106 568.9861 C-325.6824 569.2211 -324.7657 569.5021 -323.8456 569.7685 C-311.3134 573.3976 -303.3127 581.5895 -299.3864 593.9457 C-297.1399 601.0155 -296.2942 608.3062 -295.7969 615.6535 C-295.6242 618.2042 -295.623 620.7697 -295.6229 623.3284 C-295.6156 754.9853 -295.619 886.6421 -295.6119 1018.299 C-295.6115 1025.9941 -296.1662 1033.6369 -297.5295 1041.2142 C-298.3529 1045.7908 -299.601 1050.2454 -301.428 1054.5287 C-305.3535 1063.7323 -311.7859 1070.5518 -320.7877 1074.9563 C-326.7308 1077.8642 -333.0267 1079.6066 -339.5181 1080.6846 C-347.4229 1081.9973 -355.3908 1082.5928 -363.4047 1082.5788 C-367.5641 1082.5716 -371.724 1082.5622 -375.883 1082.6064 C-377.4327 1082.6228 -377.837 1083.0327 -377.8494 1084.6329 C-377.8829 1088.9514 -377.8591 1093.2706 -377.8334 1097.5893 C-377.8266 1098.7467 -377.1391 1099.313 -376.0212 1099.3508 c-374.9025 1099.3886 -373.7822 1099.3915 -372.6626 1099.3916 C-289.312 1099.3932 -205.9614 1099.3931 -122.6108 1099.3927 C-121.6509 1099.3927 -120.6903 1099.4098 -119.7312 1099.3799 c-117.181 1099.3004 -117.0811 1099.237 -117.0628 1096.615 C-117.0336 1092.4565 -117.0665 1088.2974 -117.0908 1084.1387 C-117.0962 1083.2171 -117.5798 1082.6607 -118.5306 1082.6323 C-119.809 1082.594 -121.0887 1082.5812 -122.3679 1082.5807 C-133.0867 1082.5765 -143.8055 1082.5863 -154.5243 1082.5748 C-164.7685 1082.5638 -174.9943 1082.2183 -185.1526 1080.7554 C-190.2315 1080.024 -195.1992 1078.8678 -199.9647 1076.9157 C-208.084 1073.5897 -213.7547 1067.8593 -217.0619 1059.732 C-219.9317 1052.6798 -221.0947 1045.2658 -221.6133 1037.7556 C-222.0207 1031.8558 -222.1836 1025.9281 -222.1849 1020.0128 C-222.2152 885.7966 -222.2106 751.5804 -222.2001 617.3643 C-222.1997 611.927 -222.1076 606.4998 -220.8461 601.1493 C-218.6595 591.8748 -213.0021 586.0116 -203.8523 583.4721 C-200.1402 582.4418 -196.3526 581.8383 -192.5086 581.6624 C-189.9529 581.5454 -187.3909 581.5329 -184.8317 581.5325 C-142.5965 581.5253 -100.3612 581.5361 -58.126 581.52 C-50.1165 581.517 -42.1554 581.9165 -34.237 583.2744 C-21.8495 585.3986 -10.7202 590.3017 -0.714916 597.8613 C5.69316 602.703 11.4158 608.2803 16.8575 614.1549 C25.8924 623.9084 34.0606 634.3773 42.0042 645.0178 C49.6579 655.27 57.23 665.5849 64.6856 675.9815 C66.1745 678.0576 67.7331 678.9004 70.2374 678.7436 C73.4246 678.5441 76.6339 678.7101 79.8332 678.6758 C80.5712 678.6679 81.4144 678.916 82.2225 677.8749 Cf-654.6063 549.8018 m-654.2954 551.5215 -654.0254 553.2497 -653.6667 554.9594 C-651.8284 563.7227 -650.7695 572.5692 -650.7507 581.5311 C-619.08 581.5302 -587.4097 581.5455 -555.7395 581.5192 C-545.1591 581.5105 -534.6595 582.2094 -524.2738 584.3743 C-505.854 588.2137 -491.3444 597.8312 -480.7774 613.4269 C-474.371 622.882 -469.6046 633.1493 -465.4453 643.7331 C-461.1758 654.5976 -457.6859 665.7237 -454.2905 676.882 C-453.9652 677.9512 -453.6388 679.0202 -453.3001 680.0852 C-453.0301 680.9341 -452.4624 681.3735 -451.5447 681.3672 C-447.068 681.3364 -442.5912 681.3258 -438.1148 681.2749 C-437.8385 681.2718 -437.5654 680.9849 -437.0963 680.7203 C-441.7308 637.2734 -446.3743 593.7423 -451.0073 550.3101 C-452.9209 549.3313 -454.7118 549.7453 -456.4292 549.7439 C-492.8979 549.7151 -529.3667 549.7221 -565.8355 549.7221 c-593.5069 549.7221 -621.1784 549.7205 -648.8499 549.7255 C-650.7687 549.7259 -652.6875 549.7752 -654.6063 549.8018 CfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF